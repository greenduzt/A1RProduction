using A1QSystem.Core;
using A1QSystem.Core.Enumerations;
using A1QSystem.Model;
using A1QSystem.Model.Capacity;
using A1QSystem.Model.Categories;
using A1QSystem.Model.Comments;
using A1QSystem.Model.DeliveryDetails;
using A1QSystem.Model.Formula;
using A1QSystem.Model.FormulaGeneration;
using A1QSystem.Model.Machine;
using A1QSystem.Model.Meta;
using A1QSystem.Model.Orders;
using A1QSystem.Model.Other;
using A1QSystem.Model.Production;
using A1QSystem.Model.Production.Grading;
using A1QSystem.Model.Production.Mixing;
using A1QSystem.Model.Production.Model;
using A1QSystem.Model.Production.Peeling;
using A1QSystem.Model.Production.ReRoll;
using A1QSystem.Model.Production.SlitingPeeling;
using A1QSystem.Model.Production.Slitting;
using A1QSystem.Model.Products;
using A1QSystem.Model.Products.Rolls;
using A1QSystem.Model.Products.Tiles;
using A1QSystem.Model.RawMaterials;
using A1QSystem.Model.Sales;
using A1QSystem.Model.Shifts;
using A1QSystem.Model.Shreding;
using A1QSystem.Model.Stock;
using A1QSystem.Model.Transaction;
using A1QSystem.Model.Users;
using A1QSystem.Model.Vehicles;
using A1QSystem.Models;
using A1QSystem.View;
using A1QSystem.ViewModel.Orders;
using A1QSystem.ViewModel.Productions;
using A1QSystem.ViewModel.Productions.Peeling;
using A1QSystem.ViewModel.Productions.ReRolling;
using A1QSystem.ViewModel.Productions.SlitPeel;
using A1QSystem.ViewModel.Productions.Slitting;
using A1QSystem.ViewModel.Sales;
using A1QSystem.ViewModel.Stock;
using A1QSystem.ViewModel.StockMaintenance;
using Microsoft.VisualBasic.Logging;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Windows.Documents;
using System.Windows.Forms;

namespace A1QSystem.DB
{
    public static class DBAccess
    {
        public static DataSet GetAllCustomers()
        {
            // query
            string sql = @"
                SELECT *
                FROM Customers
             ";

            // create connection
            SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString);

            try
            {
                // Create data adapter
                SqlDataAdapter da = new SqlDataAdapter();
                da.SelectCommand = new SqlCommand(sql, conn);

                // create and fill dataset
                DataSet ds = new DataSet();
                da.Fill(ds, "Customers");

                return ds;
            }
            catch (Exception e)
            {
                Debug.WriteLine("Error: " + e);
            }
            finally
            {
                // close connection
                conn.Close();
            }

            return null;
        }

        public static DataSet GetFreightNames()
        {
            // query
            string sql = @"
                SELECT *
                FROM Freight
             ";

            // create connection
            SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString);

            try
            {
                // Create data adapter
                SqlDataAdapter da = new SqlDataAdapter();
                da.SelectCommand = new SqlCommand(sql, conn);

                // create and fill dataset
                DataSet ds = new DataSet();
                da.Fill(ds, "Freight");

                return ds;
            }
            catch (Exception e)
            {
                Debug.WriteLine("Error: " + e);
            }
            finally
            {
                // close connection
                conn.Close();
            }

            return null;
        }


        public static void UpdateEmployees(DataSet ds)
        {
            // SQL to update customers
            string update = @"
                UPDATE Employees   
                SET
                   LastName = @LastName,
                   FirstName = @FirstName,
                   Title = @Title,
                   TitleOfCourtesy = @TitleOfCourtesy,
                   BirthDate = @BirthDate,
                   HireDate = @HireDate,
                   Address = @address,                
                   City = @city,
                   Region = @Region,
                   PostalCode = @PostalCode,
                   Country = @Country,
                   HomePhone = @HomePhone                   
                WHERE
                    EmployeeID = @EmployeeID
             ";

            // create connection
            SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString);

            try
            {
                // Create data adapter
                SqlDataAdapter da = new SqlDataAdapter();

                // create command
                SqlCommand updateCmd = new SqlCommand(update, conn);

                //
                // map parameters
                //
                updateCmd.Parameters.Add("@LastName", SqlDbType.NVarChar, 20, "LastName");
                updateCmd.Parameters.Add("@FirstName", SqlDbType.NVarChar, 10, "FirstName");
                updateCmd.Parameters.Add("@Title", SqlDbType.NVarChar, 30, "Title");
                updateCmd.Parameters.Add("@TitleOfCourtesy", SqlDbType.NVarChar, 25, "TitleOfCourtesy");
                updateCmd.Parameters.Add("@BirthDate", SqlDbType.DateTime, 20, "BirthDate");
                updateCmd.Parameters.Add("@HireDate", SqlDbType.DateTime, 20, "HireDate");
                updateCmd.Parameters.Add("@address", SqlDbType.NVarChar, 60, "Address");
                updateCmd.Parameters.Add("@city", SqlDbType.NVarChar, 15, "City");
                updateCmd.Parameters.Add("@Region", SqlDbType.NVarChar, 15, "Region");
                updateCmd.Parameters.Add("@PostalCode", SqlDbType.NVarChar, 10, "PostalCode");
                updateCmd.Parameters.Add("@Country", SqlDbType.NVarChar, 15, "Country");
                updateCmd.Parameters.Add("@HomePhone", SqlDbType.NVarChar, 24, "HomePhone");

                // EmployeeID
                SqlParameter parm = updateCmd.Parameters.Add("@EmployeeID", SqlDbType.Int, 4, "EmployeeID");
                parm.SourceVersion = DataRowVersion.Original;

                // Update database
                da.UpdateCommand = updateCmd;
                da.Update(ds, "Employees");
            }
            catch (Exception e)
            {
                Debug.WriteLine("Error: " + e);
            }
            finally
            {
                // close connection
                conn.Close();
            }
        }

        public static void InsertEmployee(DataSet ds)
        {
            // SQL to insert into customers
            string insert = @"
                INSERT into Employees
                (
                   LastName,
                   FirstName,
                   Title,
                   BirthDate,
                   HireDate,
                   Address,
                   City,
                   Region,
                   PostalCode,                   
                   Country,
                   HomePhone
                )
                values
                (
                   @LastName,
                   @FirstName,
                   @Title,
                   @BirthDate,
                   @HireDate,
                   @Address,
                   @City,
                   @Region,
                   @PostalCode,                   
                   @Country,
                   @HomePhone
                )
             ";

            string getID = @"SELECT @@IDENTITY";

            // create connection
            SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString);

            try
            {
                // Create data adapter
                SqlDataAdapter da = new SqlDataAdapter();

                // create commands
                SqlCommand insertCmd = new SqlCommand(insert, conn);
                SqlCommand getIDCmd = new SqlCommand(getID, conn);

                //
                // map parameters
                //
                insertCmd.Parameters.Add("@LastName", SqlDbType.NVarChar, 20, "LastName");
                insertCmd.Parameters.Add("@FirstName", SqlDbType.NVarChar, 10, "FirstName");
                insertCmd.Parameters.Add("@Title", SqlDbType.NVarChar, 30, "Title");
                insertCmd.Parameters.Add("@BirthDate", SqlDbType.DateTime, 20, "BirthDate");
                insertCmd.Parameters.Add("@HireDate", SqlDbType.DateTime, 20, "HireDate");
                insertCmd.Parameters.Add("@Address", SqlDbType.NVarChar, 60, "Address");
                insertCmd.Parameters.Add("@City", SqlDbType.NVarChar, 15, "City");
                insertCmd.Parameters.Add("@Region", SqlDbType.NVarChar, 15, "Region");
                insertCmd.Parameters.Add("@PostalCode", SqlDbType.NVarChar, 10, "PostalCode");
                insertCmd.Parameters.Add("@Country", SqlDbType.NVarChar, 15, "Country");
                insertCmd.Parameters.Add("@HomePhone", SqlDbType.NVarChar, 24, "HomePhone");

                // Update database
                da.InsertCommand = insertCmd;
                da.SelectCommand = getIDCmd;
                da.Update(ds, "Employees");
            }
            catch (Exception e)
            {
                Debug.WriteLine("Error: " + e);
            }
            finally
            {
                // close connection
                conn.Close();
            }
        }


        public static int GetWorkOrderID()
        {
            int maxId = 0;
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    SqlCommand cmdGetId = conn.CreateCommand();
                    cmdGetId.CommandText = "SELECT MAX(WorkOrderID) FROM WorkOrders";
                    int ret = Convert.ToInt32(cmdGetId.ExecuteScalar());

                    if (ret == 0)
                    {
                        maxId = 0;
                    }
                    else
                    {
                        maxId = ret;
                    }

                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return maxId + 1;
        }


        public static int InsertFreightDetails(Freight newFreight)
        {
            int result = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmd = new SqlCommand("INSERT INTO Freight(FreightName, FreightPrice, FreightUnit, FreightDescription) OUTPUT INSERTED.ID VALUES (@FreightName,@FreightPrice,@FreightUnit,@FreightDescription)", conn))
                    {
                        cmd.Parameters.AddWithValue("@FreightName", newFreight.FreightName);
                        cmd.Parameters.AddWithValue("@FreightPrice", newFreight.FreightPrice);
                        cmd.Parameters.AddWithValue("@FreightUnit", newFreight.FreightUnit);
                        cmd.Parameters.AddWithValue("@FreightDescription", newFreight.FreightDescription);
                        Int32 rowCount = (Int32)cmd.ExecuteScalar();
                        result = rowCount;
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return result;
        }


        public static DataSet GetCustomers()
        {
            // query
            string sql = @"
                SELECT *
                FROM Customers
             ";

            // create connection
            SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString);

            try
            {
                // Create data adapter
                SqlDataAdapter da = new SqlDataAdapter();
                da.SelectCommand = new SqlCommand(sql, conn);

                // create and fill dataset
                DataSet ds = new DataSet();
                da.Fill(ds, "Customers");

                return ds;
            }
            catch (Exception e)
            {
                Debug.WriteLine("Error: " + e);
            }
            finally
            {
                // close connection
                conn.Close();
            }

            return null;
        }

        public static void UpdateCustomers(DataSet ds)
        {
            // SQL to update customers
            string update = @"
                UPDATE Customers   
                SET
                   CompanyName = @CompanyName,
                   ContactName = @ContactName,
                   ContactTitle = @ContactTitle,
                   Address = @address,                
                   City = @city,
                   Region = @region,
                   PostalCode = @postalcode,
                   Country = @country,
                   Phone = @phone,
                   Fax = @Fax
                WHERE
                    CustomerID = @customerid
             ";

            // create connection
            SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString);

            try
            {
                // Create data adapter
                SqlDataAdapter da = new SqlDataAdapter();

                // create command
                SqlCommand updateCmd = new SqlCommand(update, conn);

                //
                // map parameters
                //
                updateCmd.Parameters.Add("@CompanyName", SqlDbType.NVarChar, 40, "CompanyName");
                updateCmd.Parameters.Add("@ContactName", SqlDbType.NVarChar, 30, "ContactName");
                updateCmd.Parameters.Add("@ContactTitle", SqlDbType.NVarChar, 30, "ContactTitle");
                updateCmd.Parameters.Add("@address", SqlDbType.NVarChar, 60, "Address");
                updateCmd.Parameters.Add("@city", SqlDbType.NVarChar, 15, "City");
                updateCmd.Parameters.Add("@region", SqlDbType.NVarChar, 15, "Region");
                updateCmd.Parameters.Add("@postalcode", SqlDbType.NVarChar, 10, "PostalCode");
                updateCmd.Parameters.Add("@country", SqlDbType.NVarChar, 15, "Country");
                updateCmd.Parameters.Add("@phone", SqlDbType.NVarChar, 24, "Phone");
                updateCmd.Parameters.Add("@Fax", SqlDbType.NVarChar, 24, "Fax");

                // CustomerID
                SqlParameter parm = updateCmd.Parameters.Add("@customerid", SqlDbType.NChar, 5, "CustomerID");
                parm.SourceVersion = DataRowVersion.Original;

                // Update database
                da.UpdateCommand = updateCmd;
                da.Update(ds, "customers");
            }
            catch (Exception e)
            {
                Debug.WriteLine("Error: " + e);
            }
            finally
            {
                // close connection
                conn.Close();
            }
        }

        public static void InsertCustomer(DataSet ds)
        {
            // SQL to insert into customers
            string insert = @"
                INSERT into Customers
                (
                   CustomerID,
                   CompanyName,
                   ContactName,
                   ContactTitle,
                   Address,
                   City,
                   Region,
                   PostalCode,                   
                   Country,
                   Phone,
                   Fax
                )
                values
                (
                   @CustomerID,
                   @CompanyName,
                   @ContactName,
                   @ContactTitle,
                   @Address,
                   @City,
                   @Region,
                   @PostalCode,                   
                   @Country,
                   @Phone,
                   @Fax
                )
             ";

            // create connection
            SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString);

            try
            {
                // Create data adapter
                SqlDataAdapter da = new SqlDataAdapter();

                // create command
                SqlCommand insertCmd = new SqlCommand(insert, conn);

                //
                // map parameters
                //
                insertCmd.Parameters.Add("@CustomerID", SqlDbType.NChar, 5, "CustomerID");
                insertCmd.Parameters.Add("@CompanyName", SqlDbType.NVarChar, 40, "CompanyName");
                insertCmd.Parameters.Add("@ContactName", SqlDbType.NVarChar, 30, "ContactName");
                insertCmd.Parameters.Add("@ContactTitle", SqlDbType.NVarChar, 30, "ContactTitle");
                insertCmd.Parameters.Add("@Address", SqlDbType.NVarChar, 60, "Address");
                insertCmd.Parameters.Add("@City", SqlDbType.NVarChar, 15, "City");
                insertCmd.Parameters.Add("@Region", SqlDbType.NVarChar, 15, "Region");
                insertCmd.Parameters.Add("@PostalCode", SqlDbType.NVarChar, 10, "PostalCode");
                insertCmd.Parameters.Add("@Country", SqlDbType.NVarChar, 15, "Country");
                insertCmd.Parameters.Add("@Phone", SqlDbType.NVarChar, 24, "Phone");
                insertCmd.Parameters.Add("@Fax", SqlDbType.NVarChar, 24, "Fax");

                // Update database
                da.InsertCommand = insertCmd;
                da.Update(ds, "Customers");
            }
            catch (Exception e)
            {
                Debug.WriteLine("Error: " + e);
            }
            finally
            {
                // close connection
                conn.Close();
            }
        }



        public static DataSet GetOrderDetails()
        {
            // query
            string sql = @"
                SELECT *
                FROM OrderDetails
             ";

            // create connection
            SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString);

            try
            {
                // Create data adapter
                SqlDataAdapter da = new SqlDataAdapter();
                da.SelectCommand = new SqlCommand(sql, conn);

                // create and fill dataset
                DataSet ds = new DataSet();
                da.Fill(ds, "OrderDetails");

                return ds;
            }
            catch (Exception e)
            {
                Debug.WriteLine("Error: " + e);
            }
            finally
            {
                // close connection
                conn.Close();
            }

            return null;
        }

        public static ObservableCollection<RawProduct> GetAllRawProducts()
        {
            ObservableCollection<RawProduct> rawProdColl = new ObservableCollection<RawProduct>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT * FROM RawProducts", conn))
                    {

                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    RawProduct rawProduct = new RawProduct();

                                    rawProduct.RawProductID = Convert.ToInt16(dr["RawProductID"]);
                                    rawProduct.RawProductCode = dr["RawProductCode"].ToString();
                                    rawProduct.Description = dr["Description"].ToString();
                                    rawProduct.RawProductType = dr["RawProductType"].ToString();
                                    rawProdColl.Add(rawProduct);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading production line: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return rawProdColl;

        }

        public static ObservableCollection<Product> GetAllProds()
        {
            ObservableCollection<Product> prodColl = new ObservableCollection<Product>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();
                    //using (SqlCommand cmdGetData = new SqlCommand("SELECT id, category_id, raw_product_id, type, product_name, product_code, product_description, unit, price, density, thickness, width, " +
                    //                                              "height, max_yield, min_yield, logo_path, mould_type, min_cut_length, custom_re_roll, qr_video_path, qr_pdf_path, active " +
                    //                                              "FROM Products WHERE active = 'true' " +
                    //                                              "UNION " +
                    //                                              "SELECT RawProductID,0 AS category_id,RawProductID,RawProductType AS type,RawProductName,RawProductCode,Description, UPPER(RawProductType), " +
                    //                                              "Cost,'n/a' AS density,0 AS thickness,0 AS width,0 AS height,0 AS max_yield,0 AS min_yield, " +
                    //                                              "'' AS logo_path,'' AS mould_type,0 AS min_cut_length,0 AS custom_re_roll,'' AS qr_video_path, '' AS qr_pdf_path,1 as active FROM RawProducts where RawProductType <> 'kg' AND RawProductType <> 'pallet' AND RawProductType <> 'box' ORDER BY product_code", conn))
                    using (SqlCommand cmdGetData = new SqlCommand("SELECT Products.id, Products.category_id,Products.product_type_id, Products.raw_product_id, Products.type,Products.commodity_code, Products.product_name, Products.product_code, Products.product_description, Products.unit,ISNULL(Products.size,0) AS size,Products.material_cost,Products.units_per_package,Products.unit_cost,Products.unit_price,Products.minimum_order_qty,Products.orders_in_multiples_of,Products.safety_stock_qty,Products.order_point,Products.is_manufactured,Products.is_purchased, Products.last_modified_by, Products.last_modified_date, Products.is_raw_material,Products.is_auto_order,Products.active, " +
										                          "RawProducts.RawProductCode,RawProducts.RawProductName,RawProducts.Description,RawProducts.RawProductType,ISNULL(ProductTiles.thickness,0) AS thickness,ISNULL(ProductTiles.max_yield,0) AS  max_yield, " +
										                          "Formulas.product_capacity1,Formulas.grading_weight1,Grades.grade_name,Formulas.product_capacity2,ISNULL(x.grade_name,'') AS grade_name2,Formulas.grading_weight2 " +
                                                                  "FROM Products " +
                                                                  "INNER JOIN RawProducts ON Products.raw_product_id = RawProducts.RawProductID " +
                                                                  "INNER JOIN Formulas ON RawProducts.RawProductID = Formulas.raw_product_id " +
										                          "INNER JOIN Grades ON Formulas.product_capacity1 = Grades.grade_id " +
										                          "LEFT JOIN Grades x ON Formulas.product_capacity2 = x.grade_id " +
                                                                  "LEFT JOIN ProductTiles ON Products.id = ProductTiles.product_id " +
                                                                  "WHERE Products.active = 'true' ORDER BY product_code", conn))
                    {

                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    Product prod = new Product();
                                    prod.ProductID = Convert.ToInt16(dr["id"]);
                                    prod.Category = new Category() { CategoryID = Convert.ToInt16(dr["category_id"]) };
                                    prod.ProductType = new ProductType() { ProductTypeID = Convert.ToInt16(dr["product_type_id"]) };
                                    prod.RawProduct = new RawProduct()
                                    {
                                        RawProductID = Convert.ToInt16(dr["raw_product_id"]),
                                        RawProductCode = dr["product_code"].ToString(),
                                        RawProductName = dr["product_name"].ToString(),
                                        Description = dr["product_description"].ToString(),
                                        RawProductType = dr["unit"].ToString(),
                                        Formula = new Formulas() 
                                        { 
                                            ProductCapacity1 = Convert.ToInt16(dr["product_capacity1"]),
                                            FormulaName1 = dr["grade_name"].ToString(),
                                            GradingWeight1 = Convert.ToDecimal(dr["grading_weight1"]),
                                            FormulaName2 = dr["grade_name2"].ToString(),
                                            ProductCapacity2 = Convert.ToInt16(dr["product_capacity2"]),
                                            GradingWeight2 = Convert.ToDecimal(dr["grading_weight2"])
                                        }
                                    };
                                    prod.Tile = new Tile() { Thickness = Convert.ToDecimal(dr["thickness"]), MaxYield = Convert.ToDecimal(dr["max_yield"]) };
                                    prod.Type = dr["type"].ToString();
                                    prod.CommodityCode = dr["commodity_code"].ToString();
                                    prod.ProductCode = dr["product_code"].ToString();
                                    prod.ProductName = dr["product_name"].ToString();
                                    prod.ProductDescription = dr["product_description"].ToString();
                                    prod.ProductUnit = dr["unit"].ToString();
                                    prod.Size = Convert.ToInt16(dr["size"]);
                                    prod.MaterialCost = Convert.ToDecimal(dr["material_cost"]);
                                    prod.UnitsPerPack = Convert.ToInt16(dr["units_per_package"]);
                                    prod.UnitCost = Convert.ToDecimal(dr["unit_cost"]);
                                    prod.UnitPrice = Convert.ToDecimal(dr["unit_price"]);
                                    prod.MinimumOrderQty = Convert.ToDecimal(dr["minimum_order_qty"]);
                                    prod.OrderInMultiplesOf = Convert.ToDecimal(dr["orders_in_multiples_of"]);
                                    prod.SafetyStockQty = Convert.ToDecimal(dr["safety_stock_qty"]);
                                    prod.OrderPoint = Convert.ToDecimal(dr["order_point"]);
                                    prod.IsManufactured = Convert.ToBoolean(dr["is_manufactured"]);
                                    prod.IsPurchased = Convert.ToBoolean(dr["is_purchased"]);
                                    prod.LastModifiedBy = dr["last_modified_by"].ToString();
                                    prod.LastModifiedDate = Convert.ToDateTime(dr["last_modified_date"]);
                                    prod.IsRawMaterial = Convert.ToBoolean(dr["is_raw_material"]);
                                    prod.IsAutoOrder = Convert.ToBoolean(dr["is_auto_order"]);
                                    prod.Active = Convert.ToBoolean(dr["active"]);
                                    prodColl.Add(prod);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading products: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return prodColl;

        }

        public static ObservableCollection<Product> GetAllBlockLogsAsProds()
        {
            ObservableCollection<Product> prodColl = new ObservableCollection<Product>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();
                 
                    using (SqlCommand cmdGetData = new SqlCommand("SELECT RawProductID AS id,0 AS category_id,0 AS product_type_id,RawProductID AS raw_product_id,RawProductType AS unit,RawProductName AS product_name,RawProductCode AS product_code,RawProducts.Description AS product_description, RawProductType AS type,'' AS product_code, '' AS product_name,'' AS product_description, '' AS unit,'' AS commodity_code, " +
                                                                  "0 AS size,0 AS material_cost,0 AS units_per_package,0 AS unit_cost,0 AS unit_price, 0 AS minimum_order_qty,0 AS orders_in_multiples_of,0 AS safety_stock_qty,0 AS order_point,'False' AS is_manufactured,'False' AS is_purchased,'' AS last_modified_by,'True' AS is_raw_material,'False' AS is_auto_order,'' AS last_modified_date,RawProducts.Active AS active, " + 
                                                                  "Formulas.grading,Formulas.mixing,Formulas.product_capacity1,Formulas.grading_weight1,Grades.grade_name,Formulas.product_capacity2,ISNULL(x.grade_name,'') AS grade_name2,Formulas.grading_weight2 " +
                                                                  "FROM RawProducts " +
                                                                  "INNER JOIN Formulas ON RawProducts.RawProductID = Formulas.raw_product_id " +
																  "INNER JOIN Grades ON Formulas.product_capacity1 = Grades.grade_id " +
                                                                  "LEFT JOIN Grades x ON Formulas.product_capacity2 = x.grade_id " +
                                                                  "WHERE RawProducts.Active='true' AND RawProductType <> 'kg' ORDER BY RawProductCode", conn))
                    {

                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    Product prod = new Product();
                                    prod.ProductID = Convert.ToInt16(dr["id"]);
                                    prod.Category = new Category() { CategoryID = Convert.ToInt16(dr["category_id"]) };
                                    prod.ProductType = new ProductType() { ProductTypeID = Convert.ToInt16(dr["product_type_id"]) };
                                    prod.RawProduct = new RawProduct()
                                    {
                                        RawProductID = Convert.ToInt16(dr["raw_product_id"]),
                                        RawProductCode = dr["product_code"].ToString(),
                                        RawProductName = dr["product_name"].ToString(),
                                        Description = dr["product_description"].ToString(),
                                        RawProductType = dr["unit"].ToString(),
                                        Formula = new Formulas() 
                                        { 
                                            GradingFormula = dr["grading"].ToString(), 
                                            MixingFormula = dr["mixing"].ToString(),
                                            ProductCapacity1 = Convert.ToInt16(dr["product_capacity1"]),
                                            FormulaName1 = dr["grade_name"].ToString(),
                                            GradingWeight1 = Convert.ToDecimal(dr["grading_weight1"]),
                                            FormulaName2 = dr["grade_name2"].ToString(),
                                            ProductCapacity2 = Convert.ToInt16(dr["product_capacity2"]),
                                            GradingWeight2 = Convert.ToDecimal(dr["grading_weight2"]),
                                            GradingFormulaBtnVisibility = string.IsNullOrWhiteSpace(dr["grading"].ToString()) || dr["grading"].ToString().Equals("Not Available") ? "Collapsed" : "Visible",
                                            MixingFormulaBtnVisibility = string.IsNullOrWhiteSpace(dr["mixing"].ToString()) || dr["mixing"].ToString().Equals("Not Available") ? "Collapsed" : "Visible" 
                                        }
                                    };
                                    prod.Type = dr["type"].ToString();
                                    prod.CommodityCode = dr["commodity_code"].ToString();
                                    prod.ProductCode = dr["product_code"].ToString();
                                    prod.ProductName = dr["product_name"].ToString();
                                    prod.ProductDescription = dr["product_description"].ToString();
                                    prod.ProductUnit = dr["unit"].ToString();
                                    prod.Size = Convert.ToInt16(dr["size"]);
                                    prod.MaterialCost = Convert.ToDecimal(dr["material_cost"]);
                                    prod.UnitsPerPack = Convert.ToInt16(dr["units_per_package"]);
                                    prod.UnitCost = Convert.ToDecimal(dr["unit_cost"]);
                                    prod.UnitPrice = Convert.ToDecimal(dr["unit_price"]);
                                    prod.MinimumOrderQty = Convert.ToDecimal(dr["minimum_order_qty"]);
                                    prod.OrderInMultiplesOf = Convert.ToDecimal(dr["orders_in_multiples_of"]);
                                    prod.SafetyStockQty = Convert.ToDecimal(dr["safety_stock_qty"]);
                                    prod.OrderPoint = Convert.ToDecimal(dr["order_point"]);
                                    prod.IsManufactured = Convert.ToBoolean(dr["is_manufactured"]);
                                    prod.IsPurchased = Convert.ToBoolean(dr["is_purchased"]);
                                    prod.LastModifiedBy = dr["last_modified_by"].ToString();
                                    prod.LastModifiedDate = DateTime.Now;
                                    prod.IsRawMaterial = Convert.ToBoolean(dr["is_raw_material"]);
                                    prod.IsAutoOrder = Convert.ToBoolean(dr["is_auto_order"]);
                                    prod.Active = Convert.ToBoolean(dr["active"]);
                                    prodColl.Add(prod);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading production line: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return prodColl;

        }

        public static DataSet GetAllProducts()
        {
            // query
            string sql = @"
                SELECT Products.ProductCode,Products.ProductDescription,Products.ProductUnit,Products.max_items_per " +
                                                                  "FROM Products " +
                                                                  "INNER JOIN RawProducts ON Products.RawProductID = RawProducts.RawProductID " +
                                                                  "WHERE Products.RawProductID <> 0";

            // create connection
            SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString);

            try
            {
                // Create data adapter
                SqlDataAdapter da = new SqlDataAdapter();
                da.SelectCommand = new SqlCommand(sql, conn);

                // create and fill dataset
                DataSet ds = new DataSet();
                da.Fill(ds, "Products");

                return ds;
            }
            catch (Exception e)
            {
                Debug.WriteLine("Error: " + e);
            }
            finally
            {
                conn.Close();
            }

            return null;
        }

        public static ObservableCollection<string> GetAllQuoteNos()
        {
            ObservableCollection<string> list = new ObservableCollection<string>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();
                    using (SqlCommand cmdGetId = new SqlCommand("SELECT ID,Prefix FROM Quotes", conn))
                    {
                        using (SqlDataReader dr = cmdGetId.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    Quote quote = new Quote();

                                    quote.ID = Convert.ToInt16(dr["ID"]);
                                    quote.Prefix = dr["Prefix"].ToString();
                                    string quoteId = Regex.Replace(quote.Prefix + quote.ID, @"\s+", "");
                                    list.Add(quoteId);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading customer details: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return list;
        }


        /*   public static DataSet GetAllQuoteNos()
           {
               // query
               string sql = @" SELECT QuoteID FROM Quotes";

               // create connection
               SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString);

               try
               {
                   // Create data adapter
                   SqlDataAdapter da = new SqlDataAdapter();
                   da.SelectCommand = new SqlCommand(sql, conn);

                   // create and fill dataset
                   DataSet ds = new DataSet();
                   da.Fill(ds, "Quotes");

                   return ds;
               }
               catch (Exception e)
               {
                   Debug.WriteLine("Error: " + e);
               }
               finally
               {
                   conn.Close();
               }

               return null;
           }
           */
        public static DataSet GetAllProjectNames()
        {
            // query
            string sql = @" SELECT QuoteID,ProName,CustomerName FROM Quotes";

            // create connection
            SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString);

            try
            {
                // Create data adapter
                SqlDataAdapter da = new SqlDataAdapter();
                da.SelectCommand = new SqlCommand(sql, conn);

                // create and fill dataset
                DataSet ds = new DataSet();
                da.Fill(ds, "Quotes");

                return ds;
            }
            catch (Exception e)
            {
                Debug.WriteLine("Error: " + e);
            }
            finally
            {
                conn.Close();
            }

            return null;
        }



        public static DataSet GetProducts()
        {
            // query
            string sql = @"
                SELECT *
                FROM Products
             ";

            // create connection
            SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString);

            try
            {
                // Create data adapter
                SqlDataAdapter da = new SqlDataAdapter();
                da.SelectCommand = new SqlCommand(sql, conn);

                // create and fill dataset
                DataSet ds = new DataSet();
                da.Fill(ds, "Products");

                return ds;
            }
            catch (Exception e)
            {
                Debug.WriteLine("Error: " + e);
            }
            finally
            {
                // close connection
                conn.Close();
            }

            return null;
        }

        public static DataSet GetProductsInCategory(string categoryId)
        {

            // query
            string sql = @"
                SELECT *
                FROM Products
                WHERE ProductCode = @categoryId
             ";

            // create connection
            SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString);

            try
            {
                // Create data adapter
                SqlDataAdapter da = new SqlDataAdapter();
                da.SelectCommand = new SqlCommand(sql, conn);
                da.SelectCommand.Parameters.Add("@categoryId", SqlDbType.VarChar);
                da.SelectCommand.Parameters["@categoryId"].Value = categoryId;

                // create and fill dataset
                DataSet ds = new DataSet();
                da.Fill(ds, "Products");

                return ds;
            }
            catch (Exception e)
            {
                Debug.WriteLine("Error: " + e);
            }
            finally
            {
                // close connection
                conn.Close();
            }

            return null;
        }


        public static string CheckQuote(int QuoteNo)
        {
            string result = "";

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    using (SqlCommand cmd = new SqlCommand("SELECT COUNT(*) from Quotes where QuoteID like @QuoteID", conn))
                    {
                        conn.Open();

                        cmd.Parameters.AddWithValue("@QuoteID", QuoteNo);

                        int rowCount = (int)cmd.ExecuteScalar();

                        if (rowCount > 0)
                        {
                            result = "1";
                        }
                        else
                        {
                            try
                            {
                                using (SqlCommand cmdDelete = new SqlCommand("DELETE from QuoteNumbers where ID = @ID", conn))
                                {
                                    cmdDelete.Parameters.AddWithValue("@ID", QuoteNo);
                                    int res = cmdDelete.ExecuteNonQuery();

                                    if (res > 0)
                                    {
                                        result = "Deleted";
                                    }
                                    else
                                    {
                                        result = "NotDeleted";
                                    }
                                }
                            }
                            catch (Exception er)
                            {
                                Debug.WriteLine("SQL DELETE ERROR : " + er);
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL SELECT QUOTES ERROR : " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return result;
        }

        public static DataSet GetAllForkLifts()
        {
            // query
            string sql = @"
                SELECT *
                FROM ForkLifts
             ";

            // create connection
            SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString);

            try
            {
                // Create data adapter
                SqlDataAdapter da = new SqlDataAdapter();
                da.SelectCommand = new SqlCommand(sql, conn);

                // create and fill dataset
                DataSet ds = new DataSet();
                da.Fill(ds, "ForkLifts");

                return ds;
            }
            catch (Exception e)
            {
                Debug.WriteLine("Error: " + e);
            }
            finally
            {
                // close connection
                conn.Close();
            }

            return null;
        }

        //        public static DataSet GetAllVehicles()
        //        {
        //            // query
        //            string sql = @"
        //                SELECT *
        //                FROM Vehicles
        //             ";

        //            // create connection
        //            SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString);

        //            try
        //            {
        //                // Create data adapter
        //                SqlDataAdapter da = new SqlDataAdapter();
        //                da.SelectCommand = new SqlCommand(sql, conn);

        //                // create and fill dataset
        //                DataSet ds = new DataSet();
        //                da.Fill(ds, "Vehicles");
        //                return ds;
        //            }
        //            catch (Exception e)
        //            {
        //                Debug.WriteLine("Error: " + e);
        //            }
        //            finally
        //            {
        //                // close connection
        //                conn.Close();
        //            }
        //            return null;
        //        }


        //public static int InsertWorkOrder(List<ForkLiftRiskMatrix> _riskMatrix, List<Vehicle> _items, string FLSNo, string date, string WODate,string AssertType, string ServiceType,string extTime,int safetyItem,int breakdown, int routMain,int inspection,string Comment)
        //{
        //  int result = 0;
        //  int rowCount = 0;

        //  using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
        //  {
        //      SqlCommand cmdWorkOrders = new SqlCommand("INSERT INTO WorkOrders(ReferenceNo,WorkOrderCreatedDate,WorkOrderDate,AssertType,ServiceType,EstTime,SafetyItem,Breakdown,RoutMain,Inspection,Comment,Result) OUTPUT INSERTED.WorkOrderID VALUES (@ReferenceNo,@WorkOrderCreatedDate,@WorkOrderDate,@AssertType,@ServiceType,@EstTime,@SafetyItem,@Breakdown,@RoutMain,@Inspection,@Comment,@Result)", conn);
        //      SqlCommand cmdWorrkOrderDetails = new SqlCommand("INSERT INTO WorkOrderDetails(WorkOrderID, ReferenceNo, PartType,PartNumner,PartName,PartComment) VALUES(@WorkOrderID, @ReferenceNo, @PartType,@PartNumner,@PartName,@PartComment)", conn);
        //      SqlCommand cmdRiskMatrix = new SqlCommand("INSERT INTO ItemRiskMatrix(WorkOrderID,ItemID,ItemType,ItemName,Code) VALUES (@WorkOrderID,@ItemID,@ItemType,@ItemName,@Code)", conn);

        //      SqlTransaction trans = null;
        //      conn.Open();
        //      trans = conn.BeginTransaction();
        //      try
        //      {
        //          cmdWorkOrders.Transaction = trans;
        //          cmdWorkOrders.Parameters.AddWithValue("@ReferenceNo", FLSNo);
        //          cmdWorkOrders.Parameters.AddWithValue("@WorkOrderCreatedDate", date);
        //          cmdWorkOrders.Parameters.AddWithValue("@WorkOrderDate", WODate);
        //          cmdWorkOrders.Parameters.AddWithValue("@AssertType", AssertType);
        //          cmdWorkOrders.Parameters.AddWithValue("@ServiceType", ServiceType);
        //          cmdWorkOrders.Parameters.AddWithValue("@EstTime", extTime);
        //          cmdWorkOrders.Parameters.AddWithValue("@SafetyItem", safetyItem);
        //          cmdWorkOrders.Parameters.AddWithValue("@Breakdown", breakdown);
        //          cmdWorkOrders.Parameters.AddWithValue("@RoutMain", routMain);
        //          cmdWorkOrders.Parameters.AddWithValue("@Inspection", inspection);
        //          cmdWorkOrders.Parameters.AddWithValue("@Comment", Comment);
        //          cmdWorkOrders.Parameters.AddWithValue("@Result", "Pending");

        //          Int32 newWorkOrderID = (Int32)cmdWorkOrders.ExecuteScalar();

        //          for (int i = 0; i < _items.Count; i++)
        //          {
        //              cmdWorrkOrderDetails.Transaction = trans;
        //              cmdWorrkOrderDetails.Parameters.AddWithValue("@WorkOrderID", newWorkOrderID);
        //              cmdWorrkOrderDetails.Parameters.AddWithValue("@ReferenceNo", FLSNo);
        //              cmdWorrkOrderDetails.Parameters.AddWithValue("@PartType", _items[i].PartType);
        //              cmdWorrkOrderDetails.Parameters.AddWithValue("@PartNumner", _items[i].PartNumber);
        //              cmdWorrkOrderDetails.Parameters.AddWithValue("@PartName", _items[i].PartName);
        //              cmdWorrkOrderDetails.Parameters.AddWithValue("@PartComment", _items[i].PartComment);
        //              rowCount = cmdWorrkOrderDetails.ExecuteNonQuery();
        //              cmdWorrkOrderDetails.Parameters.Clear();
        //          }

        //          for (int i = 0; i < _riskMatrix.Count; i++)
        //          {
        //              cmdRiskMatrix.Transaction = trans;
        //              cmdRiskMatrix.Parameters.AddWithValue("@WorkOrderID", newWorkOrderID);
        //              cmdRiskMatrix.Parameters.AddWithValue("@ItemID", _riskMatrix[i].ItemID);
        //              cmdRiskMatrix.Parameters.AddWithValue("@ItemType", _riskMatrix[i].ItemType);
        //              cmdRiskMatrix.Parameters.AddWithValue("@ItemName", _riskMatrix[i].ItemName);
        //              cmdRiskMatrix.Parameters.AddWithValue("@Code", _riskMatrix[i].Code);
        //              rowCount = cmdRiskMatrix.ExecuteNonQuery();
        //              cmdRiskMatrix.Parameters.Clear();
        //          }

        //          if (rowCount > 0)
        //          {
        //              result = newWorkOrderID;
        //          }
        //          else
        //          {
        //              result = 0;
        //          }

        //          trans.Commit();
        //      }

        //      catch (Exception e)
        //      {
        //          trans.Rollback();
        //          Debug.WriteLine("SQL Error: " + e);
        //      }
        //      finally
        //      {
        //          conn.Close();
        //      }
        //  }
        //  return result;
        //}

        public static int InsertProductionData(BindingList<Expense> _dayShiftColl, BindingList<Expense> _eveShiftColl, BindingList<Expense> _nightShiftColl, string _peopleDay, string _peopleEvening, string _peopleNight, string _prodDate, string _machineName)
        {
            int rowCount = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdProduction = new SqlCommand("INSERT INTO Productions(Date) OUTPUT INSERTED.ProductionID VALUES (@Date)", conn);
                SqlCommand cmdProductionDetails = new SqlCommand("INSERT INTO ProductionDetails(ProductionID,ProductCode,ProductName,MachineName,Mixes,People,ShiftName) VALUES (@ProductionID,@ProductCode,@ProductName,@MachineName,@Mixes,@People,@ShiftName)", conn);

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {
                    cmdProduction.Transaction = trans;
                    cmdProduction.Parameters.AddWithValue("@Date", _prodDate);

                    Int32 newProdID = (Int32)cmdProduction.ExecuteScalar();


                    if (_dayShiftColl.Count > 0)
                    {
                        for (int i = 0; i < _dayShiftColl.Count; i++)
                        {
                            cmdProductionDetails.Transaction = trans;
                            cmdProductionDetails.Parameters.AddWithValue("@ProductionID", newProdID);
                            cmdProductionDetails.Parameters.AddWithValue("@ProductCode", _dayShiftColl[i].ProductCode);
                            cmdProductionDetails.Parameters.AddWithValue("@ProductName", _dayShiftColl[i].ProductName);
                            cmdProductionDetails.Parameters.AddWithValue("@MachineName", _machineName);
                            cmdProductionDetails.Parameters.AddWithValue("@Mixes", _dayShiftColl[i].Mixes);
                            cmdProductionDetails.Parameters.AddWithValue("@People", _peopleDay);
                            cmdProductionDetails.Parameters.AddWithValue("@ShiftName", "D");
                            rowCount = cmdProductionDetails.ExecuteNonQuery();
                            cmdProductionDetails.Parameters.Clear();
                        }
                    }
                    if (_eveShiftColl.Count > 0)
                    {
                        for (int i = 0; i < _eveShiftColl.Count; i++)
                        {
                            cmdProductionDetails.Transaction = trans;
                            cmdProductionDetails.Parameters.AddWithValue("@ProductionID", newProdID);
                            cmdProductionDetails.Parameters.AddWithValue("@ProductCode", _eveShiftColl[i].ProductCode);
                            cmdProductionDetails.Parameters.AddWithValue("@ProductName", _eveShiftColl[i].ProductName);
                            cmdProductionDetails.Parameters.AddWithValue("@MachineName", _machineName);
                            cmdProductionDetails.Parameters.AddWithValue("@Mixes", _eveShiftColl[i].Mixes);
                            cmdProductionDetails.Parameters.AddWithValue("@People", _peopleEvening);
                            cmdProductionDetails.Parameters.AddWithValue("@ShiftName", "E");
                            rowCount = cmdProductionDetails.ExecuteNonQuery();
                            cmdProductionDetails.Parameters.Clear();
                        }
                    }
                    if (_nightShiftColl.Count > 0)
                    {
                        for (int i = 0; i < _nightShiftColl.Count; i++)
                        {
                            cmdProductionDetails.Transaction = trans;
                            cmdProductionDetails.Parameters.AddWithValue("@ProductionID", newProdID);
                            cmdProductionDetails.Parameters.AddWithValue("@ProductCode", _nightShiftColl[i].ProductCode);
                            cmdProductionDetails.Parameters.AddWithValue("@ProductName", _nightShiftColl[i].ProductName);
                            cmdProductionDetails.Parameters.AddWithValue("@MachineName", _machineName);
                            cmdProductionDetails.Parameters.AddWithValue("@Mixes", _nightShiftColl[i].Mixes);
                            cmdProductionDetails.Parameters.AddWithValue("@People", _peopleNight);
                            cmdProductionDetails.Parameters.AddWithValue("@ShiftName", "N");
                            rowCount = cmdProductionDetails.ExecuteNonQuery();
                            cmdProductionDetails.Parameters.Clear();
                        }
                    }

                    trans.Commit();

                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("Production SQL Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return rowCount;
        }

        public static int GetProductionID()
        {
            int maxId = 0;
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    SqlCommand cmdGetId = conn.CreateCommand();
                    cmdGetId.CommandText = "SELECT MAX(ProductionID) FROM Productions";
                    int ret = Convert.ToInt32(cmdGetId.ExecuteScalar());

                    if (ret == 0)
                    {
                        maxId = 0;
                    }
                    else
                    {
                        maxId = ret + 1;
                    }

                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return maxId;
        }



        public static List<ProductionLine> GetProductionDataByDate(string pDate)
        {

            List<ProductionLine> pList = new List<ProductionLine>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT * FROM Productions WHERE Date='" + pDate + "'", conn))
                    {

                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    ProductionLine pLine = new ProductionLine();

                                    pLine.ProductionID = Convert.ToInt16(dr["ProductionID"]);
                                    pLine.ProductionDate = dr["Date"].ToString();
                                    pList.Add(pLine);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading production line: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return pList;
        }

        public static List<Machines> GetProductionData(List<ProductionLine> pLine)
        {
            List<Machines> list = new List<Machines>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    for (int i = 0; i < pLine.Count; i++)
                    {
                        using (SqlCommand cmdGetId = new SqlCommand("SELECT * FROM ProductionDetails WHERE ProductionID='" + pLine[i].ProductionID + "'", conn))
                        {
                            using (SqlDataReader dr = cmdGetId.ExecuteReader())
                            {
                                if (dr != null)
                                {
                                    while (dr.Read())
                                    {
                                        Machines mach = new Machines(0);

                                        mach.MachineName = dr["MachineName"].ToString();
                                        mach.Mixes = Convert.ToDouble(dr["Mixes"]);

                                        list.Add(mach);
                                    }
                                }
                            }
                        }

                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading production details: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return list;
        }

        public static DataSet GetAllEmployees()
        {
            // query
            string sql = @"
                SELECT *
                FROM Employees
             ";

            // create connection
            SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString);

            try
            {
                // Create data adapter
                SqlDataAdapter da = new SqlDataAdapter();
                da.SelectCommand = new SqlCommand(sql, conn);

                // create and fill dataset
                DataSet ds = new DataSet();
                da.Fill(ds, "Employees");

                return ds;
            }
            catch (Exception e)
            {
                Debug.WriteLine("Error: " + e);
            }
            finally
            {
                // close connection
                conn.Close();
            }

            return null;
        }

        public static int InsertProduct(Product newProduct)
        {
            int result = 0;
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmd1 = new SqlCommand("INSERT INTO Products(ProductName,ProductCode,ProductDescription,ProductUnit,ProductPrice) VALUES (@ProductName,@ProductCode,@ProductDescription,@ProductUnit,@ProductPrice)", conn);

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();

                try
                {
                    cmd1.Transaction = trans;
                    cmd1.Parameters.AddWithValue("@ProductName", newProduct.ProductName);
                    cmd1.Parameters.AddWithValue("@ProductCode", newProduct.ProductCode);
                    cmd1.Parameters.AddWithValue("@ProductDescription", newProduct.ProductDescription);
                    cmd1.Parameters.AddWithValue("@ProductUnit", newProduct.ProductUnit);
                    cmd1.Parameters.AddWithValue("@ProductPrice", newProduct.UnitPrice);
                    int rowCount = cmd1.ExecuteNonQuery();

                    if (rowCount > 0)
                    {
                        result = 1;
                    }
                    else
                    {
                        result = 2;
                    }

                    trans.Commit();

                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("Error adding data to products: " + e);
                }
                finally
                {
                    conn.Close();
                }
                return result;
            }
        }

        public static int InsertCustomerDetails(Customer newCustomer)
        {
            int result = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmd = new SqlCommand("INSERT INTO Customers(CompanyName, ContactFirstName, ContactLastName,Telephone,Mobile,Email,Address,City,State,Postcode) OUTPUT INSERTED.CustomerID VALUES (@CompanyName,@ContactFirstName,@ContactLastName,@Telephone,@Mobile,@Email,@Address,@City,@State,@Postcode)", conn))
                    {
                        cmd.Parameters.AddWithValue("@CompanyName", newCustomer.CompanyName);
                        cmd.Parameters.AddWithValue("@ContactFirstName", newCustomer.FirstName);
                        cmd.Parameters.AddWithValue("@ContactLastName", newCustomer.LastName);
                        cmd.Parameters.AddWithValue("@Telephone", newCustomer.Telephone ?? (object)DBNull.Value);
                        cmd.Parameters.AddWithValue("@Mobile", newCustomer.Mobile ?? (object)DBNull.Value);
                        cmd.Parameters.AddWithValue("@Email", newCustomer.Email);
                        cmd.Parameters.AddWithValue("@Address", newCustomer.Address ?? (object)DBNull.Value);
                        cmd.Parameters.AddWithValue("@City", newCustomer.City ?? (object)DBNull.Value);
                        cmd.Parameters.AddWithValue("@State", newCustomer.State ?? (object)DBNull.Value);
                        cmd.Parameters.AddWithValue("@Postcode", newCustomer.PostCode ?? (object)DBNull.Value);

                        Int32 rowCount = (Int32)cmd.ExecuteScalar();
                        result = rowCount;
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error adding customer: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return result;
        }



        public static string GetProductionData(string productDescription)
        {
            string productCode = "";

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetId = new SqlCommand("SELECT * FROM Products WHERE ProductDescription='" + productDescription + "'", conn))
                    {
                        using (SqlDataReader dr = cmdGetId.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    productCode = dr["ProductCode"].ToString();
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading product code: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return productCode;
        }

        public static ObservableCollection<Customer> GetCustomerData()
        {
            ObservableCollection<Customer> list = new ObservableCollection<Customer>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();
                    using (SqlCommand cmdGetId = new SqlCommand("SELECT * FROM Customers ORDER BY CompanyName", conn))
                    {
                        using (SqlDataReader dr = cmdGetId.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    Customer customer = new Customer();

                                    customer.CustomerId = Convert.ToInt16(dr["CustomerID"]);
                                    customer.CompanyName = dr["CompanyName"].ToString();
                                    customer.FirstName = dr["ContactFirstName"].ToString();
                                    customer.LastName = dr["ContactLastName"].ToString();
                                    customer.Telephone = dr["Telephone"].ToString();
                                    customer.Mobile = dr["Mobile"].ToString();
                                    customer.Email = dr["Email"].ToString();
                                    customer.Address = dr["Address"].ToString();
                                    customer.City = dr["City"].ToString();
                                    customer.State = dr["State"].ToString();
                                    customer.PostCode = dr["Postcode"].ToString();

                                    list.Add(customer);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading customer details: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return list;
        }

        public static ObservableCollection<Freight> GetFreightData()
        {
            ObservableCollection<Freight> list = new ObservableCollection<Freight>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();
                    using (SqlCommand cmdGetId = new SqlCommand("SELECT * FROM Freight", conn))
                    {
                        using (SqlDataReader dr = cmdGetId.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    Freight freight = new Freight();
                                    freight.Id = Convert.ToInt16(dr["ID"]);
                                    freight.FreightName = dr["FreightName"].ToString();
                                    freight.FreightUnit = dr["FreightUnit"].ToString();
                                    freight.FreightPrice = Convert.ToDecimal(dr["FreightPrice"]);
                                    freight.FreightDescription = dr["FreightDescription"].ToString();
                                    list.Add(freight);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading freight details: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return list;
        }


        public static BindingList<QuoteDetails> SearchQuote(int QuoteNo)
        {


            BindingList<QuoteDetails> quoteDetails = new BindingList<QuoteDetails>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    using (SqlCommand cmd = new SqlCommand("SELECT * FROM QuoteDetails WHERE QuoteID = '" + QuoteNo + "'", conn))
                    {
                        conn.Open();

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr != null)
                            {

                                while (dr.Read())
                                {
                                    QuoteDetails qDetails = new QuoteDetails();

                                    qDetails.ProductID = Convert.ToInt16(dr["ProductID"]);
                                    //  qDetails.ProductName = dr["ProductName"].ToString();
                                    qDetails.ProductCode = dr["ProductCode"].ToString();
                                    qDetails.ProductDescription = dr["ProductDescription"].ToString();
                                    qDetails.ProductUnit = dr["ProductUnit"].ToString();
                                    qDetails.ProductPrice = Convert.ToDecimal(dr["ProductPrice"]);
                                    qDetails.Quantity = Convert.ToDecimal(dr["Quantity"]);
                                    qDetails.Discount = Convert.ToDecimal(dr["Discount"]);
                                    qDetails.Total = Convert.ToDecimal(dr["Total"]);

                                    quoteDetails.Add(qDetails);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL SEARCH QUOTE DETAILS ERROR OCCURED : " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return quoteDetails;
        }


        public static int CheckCustomerAvailable(string CompName)
        {
            int result = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    using (SqlCommand cmd = new SqlCommand("SELECT COUNT(*) from Customers where CompanyName like @CompanyName", conn))
                    {
                        conn.Open();

                        cmd.Parameters.AddWithValue("@CompanyName", CompName);

                        int rowCount = (int)cmd.ExecuteScalar();

                        if (rowCount > 0)
                        {
                            result = 1;
                        }
                        else
                        {
                            result = 0;
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL Check Customer existance ERROR : " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return result;
        }

        public static int CheckFreightAvailable(string CompName)
        {
            int rowCount = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    using (SqlCommand cmd = new SqlCommand("SELECT COUNT(*) from Freight where FreightName like @CompanyName", conn))
                    {
                        conn.Open();

                        cmd.Parameters.AddWithValue("@CompanyName", CompName);

                        rowCount = (int)cmd.ExecuteScalar();
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL Check Freight Existance ERROR : " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return rowCount;
        }


        public static DataSet GetFreightDetailsByCode(int QuoteNo)
        {

            string sql = @"
                SELECT *
                FROM FreightDetails WHERE QuoteID ='" + QuoteNo + "'";

            // create connection
            SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString);

            try
            {
                // Create data adapter
                SqlDataAdapter da = new SqlDataAdapter();
                da.SelectCommand = new SqlCommand(sql, conn);

                // create and fill dataset
                DataSet ds = new DataSet();
                da.Fill(ds, "FreightDetails");

                return ds;
            }
            catch (Exception e)
            {
                Debug.WriteLine("Error Retrieving Freight Details: " + e);
            }
            finally
            {
                // close connection
                conn.Close();
            }

            return null;
        }

        public static DataSet GetQuoteByCode(int QuoteNo)
        {

            string sql = @" SELECT * FROM Quotes WHERE ID ='" + QuoteNo + "'";

            // create connection
            SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString);

            try
            {
                // Create data adapter
                SqlDataAdapter da = new SqlDataAdapter();
                da.SelectCommand = new SqlCommand(sql, conn);

                // create and fill dataset
                DataSet ds = new DataSet();
                da.Fill(ds, "Quotes");

                return ds;
            }
            catch (Exception e)
            {
                Debug.WriteLine("Error Retrieving Quotes: " + e);
            }
            finally
            {
                // close connection
                conn.Close();
            }

            return null;
        }

        public static bool IsQuoteNoValid(string QuoteNo)
        {
            bool result = false;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    using (SqlCommand cmd = new SqlCommand("SELECT COUNT(*) from Quotes where QuoteID like @QuoteID", conn))
                    {
                        conn.Open();

                        cmd.Parameters.AddWithValue("@QuoteID", QuoteNo);

                        int rowCount = (int)cmd.ExecuteScalar();

                        if (rowCount > 0)
                        {
                            result = true;
                        }
                        else
                        {
                            result = false;
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL SELECT QUOTES ERROR : " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return result;

        }

        public static int GetQuoteNoByProName(string ProName)
        {
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                string getId = ("select ID FROM Quotes WHERE ProName='" + ProName + "' ");
                conn.Open();
                SqlCommand cmd1 = new SqlCommand(getId, conn);
                int res = Convert.ToInt16(cmd1.ExecuteScalar());
                return res;
            }
        }


        public static int InsertQuote(string customerName, string quoteDate)
        {
            int maxId = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {

                //    SqlTransaction trans = null;
                try
                {
                    conn.Open();

                    //   trans = conn.BeginTransaction();

                    using (SqlCommand cmd1 = new SqlCommand("INSERT INTO Quotes(CustomerName,QuoteDate) VALUES (@CustomerName,@QuoteDate)", conn))
                    {
                        cmd1.Parameters.AddWithValue("@CustomerName", customerName);
                        cmd1.Parameters.AddWithValue("@QuoteDate", quoteDate);
                        int rowCount = cmd1.ExecuteNonQuery();

                        if (rowCount > 0)
                        {

                            SqlCommand cmdGetId = conn.CreateCommand();
                            cmdGetId.CommandText = "SELECT MAX(QuoteID) FROM Quotes";
                            maxId = Convert.ToInt32(cmdGetId.ExecuteScalar());
                        }
                    }
                    //    trans.Commit();



                }
                catch (Exception e)
                {
                    //   if (trans != null) trans.Rollback();
                    Debug.WriteLine("Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return maxId;
        }

        public static int InsertQuoteDetails(Quote newQuote)
        {
            int newQuoteId = 0;
            if (newQuote != null)
            {

                int rowCount = 0;
                using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
                {
                    SqlCommand cmd1 = new SqlCommand("INSERT INTO Quotes(Prefix,CustomerID,CustomerName,QuoteDate,FreightTotal,ListPriceTot,SubTotal,Tax,TotAmount,SalesPerson,ProName,Instructions,InternalComments,QuoteApproved)" +
                                                    " OUTPUT INSERTED.ID VALUES (@Prefix,@CustomerID,@CustomerName,@QuoteDate,@FreightTotal,@ListPriceTot,@SubTotal,@Tax,@TotAmount,@SalesPerson,@ProName,@Instructions,@InternalComments,@QuoteApproved)", conn);
                    SqlCommand cmd2 = new SqlCommand("INSERT INTO FreightDetails(QuoteID,FreightName,FreightDescription,FreightUnit,FreightPallets,FreightPrice,FreightDiscount,FreightTotal,ShipToAddress)" +
                                                    " VALUES (@QuoteID,@FreightName,@FreightDescription,@FreightUnit,@FreightPallets,@FreightPrice,@FreightDiscount,@FreightTotal,@ShipToAddress)", conn);
                    SqlCommand cmd3 = new SqlCommand("INSERT INTO QuoteDetails(QuoteID,ProductID,ProductName,ProductCode,ProductDescription,ProductUnit,ProductPrice,Quantity,Discount,Total)" +
                                                    " VALUES (@QuoteID,@ProductID,@ProductName,@ProductCode,@ProductDescription,@ProductUnit,@ProductPrice,@Quantity,@Discount,@Total)", conn);
                    SqlTransaction trans = null;
                    conn.Open();
                    trans = conn.BeginTransaction();

                    try
                    {
                        cmd1.Transaction = trans;
                        cmd1.Parameters.AddWithValue("@Prefix", newQuote.Prefix);
                        cmd1.Parameters.AddWithValue("@CustomerID", newQuote.customer.CustomerId);
                        cmd1.Parameters.AddWithValue("@CustomerName", newQuote.customer.CompanyName);
                        cmd1.Parameters.AddWithValue("@QuoteDate", newQuote.QuoteDate);
                        cmd1.Parameters.AddWithValue("@FreightTotal", newQuote.freightDetails.FreightTotal);
                        cmd1.Parameters.AddWithValue("@ListPriceTot", newQuote.ListPriceTot);
                        cmd1.Parameters.AddWithValue("@SubTotal", newQuote.SubTotal);
                        cmd1.Parameters.AddWithValue("@Tax", newQuote.Tax);
                        cmd1.Parameters.AddWithValue("@TotAmount", newQuote.TotAmount);
                        cmd1.Parameters.AddWithValue("@SalesPerson", newQuote.SalesPerson);
                        cmd1.Parameters.AddWithValue("@ProName", newQuote.ProName);
                        cmd1.Parameters.AddWithValue("@Instructions", newQuote.Instructions ?? (object)DBNull.Value);
                        cmd1.Parameters.AddWithValue("@InternalComments", newQuote.InternalComments ?? (object)DBNull.Value);
                        cmd1.Parameters.AddWithValue("@QuoteApproved", false);
                        newQuoteId = (Int32)cmd1.ExecuteScalar();
                        if (newQuoteId > 0)
                        {
                            cmd2.Transaction = trans;
                            cmd2.Parameters.AddWithValue("@QuoteID", newQuoteId);
                            cmd2.Parameters.AddWithValue("@FreightName", newQuote.freightDetails.FreightName ?? (object)DBNull.Value);
                            cmd2.Parameters.AddWithValue("@FreightDescription", newQuote.freightDetails.FreightDescription ?? (object)DBNull.Value);
                            cmd2.Parameters.AddWithValue("@FreightUnit", newQuote.freightDetails.FreightUnit ?? (object)DBNull.Value);
                            cmd2.Parameters.AddWithValue("@FreightPallets", newQuote.freightDetails.FreightPallets);
                            cmd2.Parameters.AddWithValue("@FreightPrice", newQuote.freightDetails.FreightPrice);
                            cmd2.Parameters.AddWithValue("@FreightDiscount", newQuote.freightDetails.FreightDiscount);
                            cmd2.Parameters.AddWithValue("@FreightTotal", newQuote.freightDetails.FreightTotal);
                            cmd2.Parameters.AddWithValue("@ShipToAddress", newQuote.freightDetails.ShipToAddress ?? (object)DBNull.Value);
                            cmd2.ExecuteNonQuery();

                            for (int i = 0; i < newQuote.quoteDetails.Count; i++)
                            {
                                cmd3.Transaction = trans;
                                cmd3.Parameters.AddWithValue("@QuoteID", newQuoteId);
                                cmd3.Parameters.AddWithValue("@ProductID", newQuote.quoteDetails[i].ProductID);
                                cmd3.Parameters.AddWithValue("@ProductName", newQuote.quoteDetails[i].ProductDescription);
                                cmd3.Parameters.AddWithValue("@ProductCode", newQuote.quoteDetails[i].ProductCode);
                                cmd3.Parameters.AddWithValue("@ProductDescription", newQuote.quoteDetails[i].ProductDescription);
                                cmd3.Parameters.AddWithValue("@ProductUnit", newQuote.quoteDetails[i].ProductUnit);
                                cmd3.Parameters.AddWithValue("@ProductPrice", newQuote.quoteDetails[i].ProductPrice);
                                cmd3.Parameters.AddWithValue("@Quantity", newQuote.quoteDetails[i].Quantity);
                                cmd3.Parameters.AddWithValue("@Discount", newQuote.quoteDetails[i].Discount);
                                cmd3.Parameters.AddWithValue("@Total", newQuote.quoteDetails[i].Total);
                                rowCount = cmd3.ExecuteNonQuery();
                                cmd3.Parameters.Clear();
                            }

                            if (rowCount <= 0)
                            {
                                newQuoteId = 1;
                            }
                        }
                        else
                        {
                            newQuoteId = -1;
                        }
                        trans.Commit();

                    }
                    catch (Exception e)
                    {
                        trans.Rollback();
                        Debug.WriteLine("Error: " + e);
                        newQuoteId = -2;
                    }
                    finally
                    {
                        conn.Close();
                    }
                }
            }
            return newQuoteId;
        }

        public static int UpdateQuote(Quote updateQuote)
        {
            int deleteRes = 0;
            int rowCount = 0;
            int rowCountUpdateQuote = 0;
            int rowCountAddFreight = 0;
            int result = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdDeleteQuoteDetails = new SqlCommand("DELETE FROM QuoteDetails WHERE QuoteID = '" + updateQuote.QuoteID + "'", conn);
                SqlCommand cmdInsertQuoteDetails = new SqlCommand("INSERT INTO QuoteDetails(QuoteID,ProductID,ProductName,ProductCode,ProductDescription,ProductUnit,ProductPrice,Quantity,Discount,Total) VALUES (@QuoteID,@ProductID,@ProductName,@ProductCode,@ProductDescription,@ProductUnit,@ProductPrice,@Quantity,@Discount,@Total)", conn);
                SqlCommand cmdUpdateQuotes = new SqlCommand("UPDATE Quotes SET Prefix = @Prefix,CustomerID = @CustomerID, CustomerName = @CustomerName,QuoteDate = @QuoteDate,FreightTotal = @FreightTotal,ListPriceTot=@ListPriceTot,SubTotal = @SubTotal,Tax = @Tax,TotAmount = @TotAmount,SalesPerson = @SalesPerson,ProName=@ProName,Instructions=@Instructions,InternalComments=@InternalComments WHERE ID  = '" + updateQuote.QuoteID + "'", conn);
                SqlCommand cmdAddUpdateFreight = new SqlCommand("IF NOT EXISTS(SELECT 1 from FreightDetails WHERE QuoteID='" + updateQuote.QuoteID + "')" +
                                                " INSERT INTO FreightDetails(QuoteID,FreightName,FreightDescription,FreightUnit,FreightPallets,FreightPrice,FreightDiscount,FreightTotal,ShipToAddress)" +
                                                " VALUES (@QuoteID,@FreightName,@FreightDescription,@FreightUnit,@FreightPallets,@FreightPrice,@FreightDiscount,@FreightTotal,@ShipToAddress) ELSE" +
                                                " UPDATE FreightDetails SET FreightName = @FreightName,FreightDescription = @FreightDescription,FreightUnit = @FreightUnit,FreightPallets=@FreightPallets,FreightPrice = @FreightPrice,FreightDiscount = @FreightDiscount,FreightTotal = @FreightTotal,ShipToAddress = @ShipToAddress WHERE QuoteID  = '" + updateQuote.QuoteID + "'", conn);

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {
                    cmdDeleteQuoteDetails.Transaction = trans;
                    deleteRes = Convert.ToInt16(cmdDeleteQuoteDetails.ExecuteNonQuery());

                    if (deleteRes > 0)
                    {
                        for (int i = 0; i < updateQuote.quoteDetails.Count; i++)
                        {
                            cmdInsertQuoteDetails.Transaction = trans;
                            cmdInsertQuoteDetails.Parameters.AddWithValue("@QuoteID", updateQuote.QuoteID);
                            cmdInsertQuoteDetails.Parameters.AddWithValue("@ProductID", updateQuote.quoteDetails[i].ProductID);
                            cmdInsertQuoteDetails.Parameters.AddWithValue("@ProductName", updateQuote.quoteDetails[i].ProductDescription);
                            cmdInsertQuoteDetails.Parameters.AddWithValue("@ProductCode", updateQuote.quoteDetails[i].ProductCode);
                            cmdInsertQuoteDetails.Parameters.AddWithValue("@ProductDescription", updateQuote.quoteDetails[i].ProductDescription);
                            cmdInsertQuoteDetails.Parameters.AddWithValue("@ProductUnit", updateQuote.quoteDetails[i].ProductUnit);
                            cmdInsertQuoteDetails.Parameters.AddWithValue("@ProductPrice", updateQuote.quoteDetails[i].ProductPrice);
                            cmdInsertQuoteDetails.Parameters.AddWithValue("@Quantity", updateQuote.quoteDetails[i].Quantity);
                            cmdInsertQuoteDetails.Parameters.AddWithValue("@Discount", updateQuote.quoteDetails[i].Discount);
                            cmdInsertQuoteDetails.Parameters.AddWithValue("@Total", updateQuote.quoteDetails[i].Total);
                            rowCount = cmdInsertQuoteDetails.ExecuteNonQuery();
                            cmdInsertQuoteDetails.Parameters.Clear();
                        }
                        if (rowCount > 0)
                        {
                            cmdUpdateQuotes.Transaction = trans;
                            cmdUpdateQuotes.Parameters.AddWithValue("@Prefix", updateQuote.Prefix);
                            cmdUpdateQuotes.Parameters.AddWithValue("@CustomerID", updateQuote.customer.CustomerId);
                            cmdUpdateQuotes.Parameters.AddWithValue("@CustomerName", updateQuote.customer.CompanyName);
                            cmdUpdateQuotes.Parameters.AddWithValue("@QuoteDate", updateQuote.QuoteDate);
                            cmdUpdateQuotes.Parameters.AddWithValue("@FreightTotal", updateQuote.FreightTotal);
                            cmdUpdateQuotes.Parameters.AddWithValue("@ListPriceTot", updateQuote.ListPriceTot);
                            cmdUpdateQuotes.Parameters.AddWithValue("@SubTotal", updateQuote.SubTotal);
                            cmdUpdateQuotes.Parameters.AddWithValue("@Tax", updateQuote.Tax);
                            cmdUpdateQuotes.Parameters.AddWithValue("@TotAmount", updateQuote.TotAmount);
                            cmdUpdateQuotes.Parameters.AddWithValue("@SalesPerson", updateQuote.SalesPerson);
                            cmdUpdateQuotes.Parameters.AddWithValue("@ProName", updateQuote.ProName);
                            cmdUpdateQuotes.Parameters.AddWithValue("@Instructions", updateQuote.Instructions);
                            cmdUpdateQuotes.Parameters.AddWithValue("@InternalComments", updateQuote.InternalComments);
                            rowCountUpdateQuote = cmdUpdateQuotes.ExecuteNonQuery();

                            if (rowCountUpdateQuote > 0)
                            {
                                cmdAddUpdateFreight.Transaction = trans;
                                cmdAddUpdateFreight.Parameters.AddWithValue("@QuoteID", updateQuote.QuoteID);
                                cmdAddUpdateFreight.Parameters.AddWithValue("@FreightName", updateQuote.freightDetails.FreightName);
                                cmdAddUpdateFreight.Parameters.AddWithValue("@FreightDescription", updateQuote.freightDetails.FreightDescription);
                                cmdAddUpdateFreight.Parameters.AddWithValue("@FreightUnit", updateQuote.freightDetails.FreightUnit);
                                cmdAddUpdateFreight.Parameters.AddWithValue("@FreightPallets", updateQuote.freightDetails.FreightPallets);
                                cmdAddUpdateFreight.Parameters.AddWithValue("@FreightPrice", updateQuote.freightDetails.FreightPrice);
                                cmdAddUpdateFreight.Parameters.AddWithValue("@FreightDiscount", updateQuote.freightDetails.FreightDiscount);
                                cmdAddUpdateFreight.Parameters.AddWithValue("@FreightTotal", updateQuote.freightDetails.FreightTotal);
                                cmdAddUpdateFreight.Parameters.AddWithValue("@ShipToAddress", updateQuote.freightDetails.ShipToAddress);
                                rowCountAddFreight = cmdAddUpdateFreight.ExecuteNonQuery();
                            }
                        }
                        trans.Commit();
                    }

                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("SQL UPDATE COMMAND ERROR OCCURED : " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            if (rowCount > 0 || rowCountUpdateQuote > 0 || rowCountAddFreight > 0)
            {
                result = 1;
            }

            return result;
        }

        public static List<UserPrivilages> GetUserPrivilages(int UserID)
        {
            List<UserPrivilages> uPrivList = new List<UserPrivilages>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT * FROM UserPrivilagesTest WHERE user_id=@UserID", conn))
                    {
                        cmdGetData.Parameters.AddWithValue("@UserID", UserID);
                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    UserPrivilages uPri = new UserPrivilages();

                                    uPri.ID = Convert.ToInt16(dr["id"]);
                                    uPri.UserID = Convert.ToInt16(dr["user_id"]);
                                    uPri.Area = dr["area"].ToString();
                                    uPri.Visibility = dr["visibility"].ToString();

                                    //uPri.ID = Convert.ToInt16(dr["ID"]);
                                    //uPri.UserID = Convert.ToInt16(dr["UserID"]);
                                    //uPri.Quoting = Convert.ToString(dr["Quoting"]);
                                    //uPri.AddQuote = Convert.ToString(dr["AddQuote"]);
                                    //uPri.UpdateQuote = Convert.ToString(dr["UpdateQuote"]);
                                    //uPri.Maintenance = Convert.ToString(dr["Maintenance"]);
                                    //uPri.Production = Convert.ToString(dr["Production"]);
                                    //uPri.Customers = Convert.ToString(dr["Customers"]);
                                    //uPri.AddCustomer = Convert.ToString(dr["AddCustomer"]);
                                    //uPri.UpdateCustomer = Convert.ToString(dr["UpdateCustomer"]);
                                    //uPri.Products = Convert.ToString(dr["Products"]);
                                    //uPri.Freight = Convert.ToString(dr["Freight"]);
                                    //uPri.Users = Convert.ToString(dr["Users"]);
                                    //uPri.Forklifts = Convert.ToString(dr["Forklifts"]);
                                    //uPri.Vehicles = Convert.ToString(dr["Vehicles"]);
                                    //uPri.ForkLiftWorkOrder = Convert.ToString(dr["ForkLiftWorkOrder"]);
                                    //uPri.AddForkLift = Convert.ToString(dr["AddForkLift"]);
                                    //uPri.UpdateForkLift = Convert.ToString(dr["UpdateForkLift"]);
                                    //uPri.AddVehicle = Convert.ToString(dr["AddVehicle"]);
                                    //uPri.VehicleWorkOrder = Convert.ToString(dr["VehicleWorkOrder"]);
                                    //uPri.AddDailyProduction = Convert.ToString(dr["AddDailyProduction"]);
                                    //uPri.ViewProduction = Convert.ToString(dr["ViewProduction"]);
                                    //uPri.AddProduct = Convert.ToString(dr["AddProduct"]);
                                    //uPri.UpdateProduct = Convert.ToString(dr["UpdateProduct"]);
                                    //uPri.Orders = Convert.ToString(dr["Orders"]);
                                    //uPri.MenuProduction = Convert.ToBoolean(dr["MenuProduction"]);
                                    //uPri.MenuGrading = Convert.ToBoolean(dr["MenuGrading"]);
                                    //uPri.MenuMixing = Convert.ToBoolean(dr["MenuMixing"]);
                                    //uPri.MenuSlitting = Convert.ToBoolean(dr["MenuSlitting"]);
                                    //uPri.MenuPeeling = Convert.ToBoolean(dr["MenuPeeling"]);

                                    uPrivList.Add(uPri);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading User Privilages: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return uPrivList;
        }

        public static User Login(string userName)
        {
            User user = new User();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdLogin = new SqlCommand("SELECT * FROM Users WHERE Username='" + userName + "'", conn))
                    {

                        using (SqlDataReader dr = cmdLogin.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {

                                    user.ID = Convert.ToInt16(dr["ID"]);
                                    user.Username = Convert.ToString(dr["Username"]);
                                    user.Password = (byte[])dr["Password"];
                                    user.FirstName = Convert.ToString(dr["FirstName"]);
                                    user.LastName = Convert.ToString(dr["LastName"]);
                                    user.State = Convert.ToString(dr["State"]);

                                    break;
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading Login: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return user;
        }

        public static bool CheckProjectName(string ProjectName)
        {
            bool res = false;
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmd = new SqlCommand("SELECT COUNT(*) from Quotes where ProName = '" + ProjectName + "'", conn))
                    {
                        cmd.Parameters.AddWithValue("@ProName", ProjectName);

                        int rowCount = (int)cmd.ExecuteScalar();

                        if (rowCount > 0)
                        {
                            res = true;
                        }
                        else
                        {
                            res = false;
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading Login: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return res;
        }

        public static bool CheckProjectNameWithoutCurrentQuote(string ProjectName, int ID)
        {
            bool res = false;
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmd = new SqlCommand("SELECT COUNT(*) from Quotes WHERE ProName = '" + ProjectName + "' AND ID != '" + ID + "'", conn))
                    {
                        cmd.Parameters.AddWithValue("@ProName", ProjectName);

                        int rowCount = (int)cmd.ExecuteScalar();

                        if (rowCount > 0)
                        {
                            res = true;
                        }
                        else
                        {
                            res = false;
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading Login: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return res;
        }

        public static ObservableCollection<ManufacturingProduct> GetAllMaufacturingProducts()
        {
            ObservableCollection<ManufacturingProduct> list = new ObservableCollection<ManufacturingProduct>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();
                    using (SqlCommand cmdGetId = new SqlCommand("SELECT * FROM TestProducts", conn))
                    {
                        using (SqlDataReader dr = cmdGetId.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    ManufacturingProduct mp = new ManufacturingProduct();

                                    mp.ProductID = Convert.ToInt32(dr["ManuProductID"]);
                                    mp.ProductName = dr["ProductName"].ToString();
                                    mp.ProductCode = dr["ProductCode"].ToString();
                                    mp.ProductDescription = dr["ProductDescription"].ToString();
                                    mp.ProductUnit = dr["ProductUnit"].ToString();
                                    mp.ProductPrice = Convert.ToDecimal(dr["ProductPrice"]);
                                    list.Add(mp);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading manufacturing product details: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }


            return list;
        }
        public static ObservableCollection<FormulaColourTableHeaders> GetFormulaColourTable(int ProductID)
        {
            ObservableCollection<FormulaColourTableHeaders> formulaColourTable = new ObservableCollection<FormulaColourTableHeaders>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    using (SqlCommand cmd = new SqlCommand("SELECT * FROM FormulaColourTableHeaders WHERE ManuProductID = '" + ProductID + "'", conn))
                    {
                        conn.Open();

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    FormulaColourTableHeaders fct = new FormulaColourTableHeaders();

                                    fct.FormulaColTableID = Convert.ToInt32(dr["FormulaColTableID"]);
                                    fct.ManuProductID = Convert.ToInt32(dr["ManuProductID"]);
                                    fct.HeaderName1 = dr["HeaderName1"].ToString();
                                    fct.HeaderName2 = dr["HeaderName2"].ToString();
                                    fct.HeaderName3 = dr["HeaderName3"].ToString();
                                    fct.HeaderName4 = dr["HeaderName4"].ToString();

                                    formulaColourTable.Add(fct);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL SEARCH FORMULA COLOUR TABLE ERROR OCCURED : " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return formulaColourTable;

        }

        public static ObservableCollection<RubberProduction> SearchProductFormula(int ProductID)
        {
            ObservableCollection<RubberProduction> quoteDetails = new ObservableCollection<RubberProduction>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    using (SqlCommand cmd = new SqlCommand("SELECT * FROM ProductFormulars WHERE ManuProductID = '" + ProductID + "'", conn))
                    {
                        conn.Open();

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    RubberProduction mp = new RubberProduction();

                                    mp.ProFormulaID = Convert.ToInt16(dr["ProFormulaID"]);
                                    mp.ManuProductID = Convert.ToInt16(dr["ManuProductID"]);
                                    mp.FormulaType = dr["FormulaType"].ToString();
                                    mp.HeaderName = dr["HeaderName"].ToString();
                                    mp.MouldType = dr["MouldType"].ToString();
                                    mp.NoOfBins = Convert.ToInt16(dr["NoOfBins"]);
                                    mp.GradingSize12 = Convert.ToInt16(dr["GradingSize12"]);
                                    mp.GradingSize16 = Convert.ToInt16(dr["GradingSize16"]);
                                    mp.GradingSize30 = Convert.ToInt16(dr["GradingSize30"]);
                                    mp.GradingSize3040 = Convert.ToInt16(dr["GradingSize3040"]);
                                    mp.GradingSize1620 = Convert.ToInt16(dr["GradingSize1620"]);
                                    mp.GradingSize12mg = Convert.ToInt16(dr["GradingSize12mg"]);
                                    mp.GradingSize4 = Convert.ToInt16(dr["GradingSize4"]);
                                    mp.GradingSizeRegrind = Convert.ToInt16(dr["GradingSizeRegrind"]);
                                    mp.Binder = Convert.ToInt32(dr["Binder"]);
                                    mp.BinderType = dr["BinderType"].ToString();
                                    mp.Minutes = Convert.ToInt32(dr["Minutes"]);
                                    mp.SpecialInstructions = dr["Instructions"].ToString();
                                    mp.ColourInstructions = dr["ColourInstructions"].ToString();
                                    mp.MethodPS = dr["MethodPS"].ToString();
                                    mp.HeaderColours = dr["HeaderColours"].ToString();
                                    mp.HeaderFontSize = Convert.ToDecimal(dr["HeaderFontSize"]);
                                    mp.TopicFontSize = Convert.ToDecimal(dr["TopicFontSize"]);
                                    mp.Enable = Convert.ToBoolean(dr["Enable"]);
                                    mp.SpecialInsHeight = Convert.ToDecimal(dr["SpecialInsHeight"]);
                                    mp.SpecialInsTextPosHeight = Convert.ToDecimal(dr["SpecialInsTextPosHeight"]);
                                    mp.Lift1 = dr["Lift1"].ToString();
                                    mp.Lift2 = dr["Lift2"].ToString();
                                    mp.MixingNotes = dr["MixingNotes"].ToString();
                                    quoteDetails.Add(mp);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL SEARCH RUBBER PRODUCTION DETAILS ERROR OCCURED : " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return quoteDetails;
        }


        public static BindingList<ProductColourDetails> GetFormulaColours(int ProductID)
        {
            BindingList<ProductColourDetails> productColours = new BindingList<ProductColourDetails>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    using (SqlCommand cmd = new SqlCommand("SELECT * FROM FormulaColours WHERE ProFormulaID = '" + ProductID + "'", conn))
                    {
                        conn.Open();

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    ProductColourDetails mp = new ProductColourDetails();

                                    //  mp.FormulaColID = Convert.ToInt32(dr["FormulaColID"]);
                                    //  mp.ProFormulaID = Convert.ToInt32(dr["ProFormulaID"]);
                                    mp.ColourName = dr["ColourName"].ToString();
                                    mp.BagSize1 = dr["BagSize1"].ToString();
                                    mp.BagSize2 = dr["BagSize2"].ToString();
                                    mp.Other = dr["Other"].ToString();
                                    mp.BagWeight = Convert.ToInt32(dr["BagWeight"]);
                                    productColours.Add(mp);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL ERROR HAS OCCURED IN COLOUR DETAILS : " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return productColours;
        }

        public static BindingList<ProductColours> GetAllProductColours()
        {
            BindingList<ProductColours> productColours = new BindingList<ProductColours>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    using (SqlCommand cmd = new SqlCommand("SELECT * FROM ProductColours", conn))
                    {
                        conn.Open();

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    ProductColours pc = new ProductColours();
                                    pc.ColourName = dr["ColourName"].ToString();
                                    productColours.Add(pc);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL ERROR HAS OCCURED IN PRODUCT COLOURS : " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return productColours;
        }


        public static List<FormulaItems> LoadFormulaTree()
        {
            List<FormulaItems> allItems = new List<FormulaItems>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    using (SqlCommand cmd = new SqlCommand("SELECT * FROM TestFormulaPath", conn))
                    {
                        conn.Open();

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    FormulaItems fi = new FormulaItems();

                                    fi.ID = Convert.ToInt16(dr["ID"]);
                                    fi.BID = Convert.ToInt16(dr["BID"]);
                                    fi.ParentID = Convert.ToInt16(dr["ParentID"]);
                                    fi.TreeLevel = Convert.ToInt16(dr["TreeLevel"]);
                                    fi.FormulaName = dr["FormulaName"].ToString();
                                    allItems.Add(fi);

                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL ERROR HAS OCCURED IN PRODUCT COLOURS : " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return allItems;
        }







        public static BindingList<OrderProgressDetails> GetOrderDetails(int OrderID)
        {

            BindingList<OrderProgressDetails> orderDetails = new BindingList<OrderProgressDetails>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    using (SqlCommand cmd = new SqlCommand("SELECT * FROM OrderDetails WHERE OrderID = '" + OrderID + "'", conn))
                    {
                        conn.Open();

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr != null)
                            {

                                while (dr.Read())
                                {
                                    OrderProgressDetails od = new OrderProgressDetails();

                                    od.OrderID = Convert.ToInt32(dr["OrderID"]);
                                    od.OrderDetailsID = Convert.ToInt32(dr["OrderDetailsID"]);
                                    od.ProductCode = dr["ProductCode"].ToString();
                                    od.ProductDescription = dr["ProductDescription"].ToString();
                                    od.ProductUnit = dr["ProductUnit"].ToString();
                                    od.ProductPrice = Convert.ToInt32(dr["ProductPrice"]);
                                    od.Qty = Convert.ToInt32(dr["Quantity"]);
                                    od.Discount = Convert.ToInt32(dr["Discount"]);
                                    od.Total = Convert.ToInt32(dr["Total"]);

                                    orderDetails.Add(od);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL SEARCH QUOTE DETAILS ERROR OCCURED : " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return orderDetails;
        }

        public static List<FreightDetails> GetQuoteDetailsByQuoteID(int QuoteID)
        {

            List<FreightDetails> freightDetails = new List<FreightDetails>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    using (SqlCommand cmd = new SqlCommand("SELECT * FROM FreightDetails WHERE QuoteID = '" + QuoteID + "'", conn))
                    {
                        conn.Open();

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr != null)
                            {

                                while (dr.Read())
                                {
                                    FreightDetails fd = new FreightDetails();

                                    fd.QuoteID = Convert.ToInt16(dr["QuoteID"]);
                                    fd.FreightName = dr["FreightName"].ToString();
                                    fd.FreightDescription = dr["FreightDescription"].ToString();
                                    fd.FreightUnit = dr["FreightUnit"].ToString();
                                    fd.FreightPallets = Convert.ToDecimal(dr["FreightPallets"]);
                                    fd.FreightPrice = Convert.ToDecimal(dr["FreightPrice"]);
                                    fd.FreightDiscount = Convert.ToDecimal(dr["FreightDiscount"]);
                                    fd.FreightTotal = Convert.ToDecimal(dr["FreightTotal"]);
                                    fd.ShipToAddress = dr["ShipToAddress"].ToString();

                                    freightDetails.Add(fd);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL SEARCH QUOTE DETAILS ERROR OCCURED : " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return freightDetails;
        }

        public static int DeclineProductionOrder(string ProductionDate, int OrderNo)
        {
            int rows = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {

                using (SqlCommand cmdDeclineOrder = new SqlCommand("UPDATE Orders SET date_to_display = @date_to_display WHERE OrderNo = '" + OrderNo + "'", conn))
                {
                    conn.Open();
                    try
                    {
                        cmdDeclineOrder.Parameters.AddWithValue("@date_to_display", ProductionDate);
                        rows = cmdDeclineOrder.ExecuteNonQuery();
                    }
                    catch (Exception e)
                    {
                        Debug.WriteLine("SQL UPDATE COMMAND ERROR OCCURED :  Updating Orders table" + e);
                    }
                    finally
                    {
                        conn.Close();
                    }
                }
            }
            return rows;
        }

        public static BindingList<OrderSchedule> GetOrderOrderProdDetByOrderID(int OrderID)
        {

            BindingList<OrderSchedule> orderProd = new BindingList<OrderSchedule>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    using (SqlCommand cmd = new SqlCommand("SELECT * FROM WorkOrder WHERE OrderID = '" + OrderID + "'", conn))
                    {
                        conn.Open();

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    OrderSchedule op = new OrderSchedule();

                                    op.ProductID = Convert.ToInt16(dr["ProductID"]);
                                    op.RawProductID = Convert.ToInt16(dr["RawProductID"]);
                                    op.ProductCode = dr["ProductCode"].ToString();
                                    op.ProductName = dr["ProductName"].ToString();
                                    op.ProductDescription = dr["ProductDescription"].ToString();
                                    op.OrderQty = Convert.ToInt16(dr["OrderQty"]);
                                    op.Unit = dr["Unit"].ToString();
                                    op.ProductionDate = dr["ProductionDate"].ToString();

                                    orderProd.Add(op);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL SEARCH QUOTE DETAILS ERROR OCCURED : " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return orderProd;
        }

        public static int UpdateOrderProductionQty(int OrderProductionID, int OrderQty, DateTime ProductionDate)
        {


            int rows = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {

                using (SqlCommand cmdDeclineOrder = new SqlCommand("UPDATE WorkOrder SET OrderQty = @OrderQty, ProductionDate = @ProductionDate  WHERE OrderID = '" + OrderProductionID + "'", conn))
                {
                    conn.Open();
                    try
                    {

                        cmdDeclineOrder.Parameters.AddWithValue("@OrderQty", OrderQty);
                        cmdDeclineOrder.Parameters.AddWithValue("@ProductionDate", ProductionDate.ToString("dd/MM/yyyy"));
                        rows = cmdDeclineOrder.ExecuteNonQuery();
                        //cmdDeclineOrder.Parameters.Clear();

                    }
                    catch (Exception e)
                    {
                        Debug.WriteLine("SQL UPDATE COMMAND ERROR OCCURED : " + e);
                    }
                    finally
                    {
                        conn.Close();
                    }
                }
            }
            return rows;
        }

        public static ObservableCollection<QuoteToOrder> GetQuoteDetails(string UserName, string State)
        {

            ObservableCollection<QuoteToOrder> quoteToSale = new ObservableCollection<QuoteToOrder>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    using (SqlCommand cmd = new SqlCommand("select Quotes.ID, Quotes.Prefix,Quotes.QuoteDate,Quotes.CustomerName,Quotes.ProName,Quotes.tax,Quotes.ListPriceTot,Quotes.FreightTotal,Quotes.SubTotal,Quotes.TotAmount,Quotes.SalesPerson,QuoteDetails.QuoteID, QuoteDetails.ProductCode, QuoteDetails.ProductDescription, QuoteDetails.ProductPrice, QuoteDetails.ProductUnit,QuoteDetails.Quantity,QuoteDetails.Discount,QuoteDetails.Total, FreightDetails.FreightTotal, FreightDetails.ShipToAddress FROM Quotes INNER JOIN QuoteDetails ON Quotes.ID = QuoteDetails.QuoteID INNER JOIN FreightDetails ON Quotes.ID = FreightDetails.QuoteID WHERE Quotes.QuoteApproved = '" + false + "' ORDER BY Quotes.ID DESC", conn))
                    {
                        conn.Open();

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    QuoteToOrder qs = new QuoteToOrder(UserName, State);
                                    QuoteDetails qd = new QuoteDetails();
                                    Quote q = new Quote();
                                    FreightDetails fd = new FreightDetails();

                                    qd.ID = Convert.ToInt16(dr["QuoteID"]);
                                    //qd.ProductID = Convert.ToInt16(dr["ProductID"]);
                                    qd.ProductCode = dr["ProductCode"].ToString();
                                    qd.ProductDescription = dr["ProductDescription"].ToString();
                                    qd.ProductPrice = Convert.ToDecimal(dr["ProductPrice"]);
                                    qd.ProductUnit = dr["ProductUnit"].ToString();
                                    qd.Quantity = Convert.ToDecimal(dr["Quantity"]);
                                    qd.Discount = Convert.ToDecimal(dr["Discount"]);
                                    qd.Total = Convert.ToDecimal(dr["Total"]);

                                    q.ID = Convert.ToInt16(dr["ID"]);
                                    q.Prefix = dr["Prefix"].ToString();
                                    q.QuoteDate = dr["QuoteDate"].ToString();
                                    q.CustomerName = dr["CustomerName"].ToString();
                                    q.ProName = dr["ProName"].ToString();
                                    q.Tax = Convert.ToDecimal(dr["tax"]);
                                    q.ListPriceTot = Convert.ToDecimal(dr["ListPriceTot"]);
                                    q.SubTotal = Convert.ToDecimal(dr["SubTotal"]);
                                    q.TotAmount = Convert.ToDecimal(dr["TotAmount"]);
                                    q.SalesPerson = dr["SalesPerson"].ToString();

                                    fd.FreightTotal = Convert.ToDecimal(dr["FreightTotal"]);
                                    fd.ShipToAddress = dr["ShipToAddress"].ToString();

                                    qs.quote = q;
                                    qs.quoteDetails = qd;
                                    qs.freightDetails = fd;
                                    quoteToSale.Add(qs);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL SEARCH QUOTE DETAILS ERROR OCCURED : " + e);
                }
                finally
                {
                    conn.Close();
                }
            }


            return quoteToSale;

        }

        public static ObservableCollection<FreightDetails> GetFreightDetailsQuoteToSale()
        {

            ObservableCollection<FreightDetails> freightDetails = new ObservableCollection<FreightDetails>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    using (SqlCommand cmd = new SqlCommand("SELECT * from FreightDetails INNER JOIN Quotes ON FreightDetails.QuoteID = Quotes.ID WHERE Quotes.QuoteApproved =  '" + false + "'", conn))
                    {
                        conn.Open();

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr != null)
                            {

                                while (dr.Read())
                                {
                                    FreightDetails fd = new FreightDetails();

                                    fd.QuoteID = Convert.ToInt16(dr["QuoteID"]);
                                    fd.FreightName = dr["FreightName"].ToString();
                                    fd.FreightDescription = dr["FreightDescription"].ToString();
                                    fd.FreightUnit = dr["FreightUnit"].ToString();
                                    fd.FreightPallets = Convert.ToDecimal(dr["FreightPallets"]);
                                    fd.FreightPrice = Convert.ToDecimal(dr["FreightPrice"]);
                                    fd.FreightDiscount = Convert.ToDecimal(dr["FreightDiscount"]);
                                    fd.FreightTotal = Convert.ToDecimal(dr["FreightTotal"]);
                                    fd.ShipToAddress = dr["ShipToAddress"].ToString();

                                    freightDetails.Add(fd);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL FREIGHT DETAILS ERROR OCCURED : " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return freightDetails;
        }

        public static ObservableCollection<FreightDetails> GetFreightDetailsOrderPending()
        {
            ObservableCollection<FreightDetails> freightDetails = new ObservableCollection<FreightDetails>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    using (SqlCommand cmd = new SqlCommand("SELECT * from FreightDetails INNER JOIN PendingOrder ON FreightDetails.QuoteID = PendingOrder.QuoteID WHERE PendingOrder.TempOrderApproved =  '" + false + "'", conn))
                    {
                        conn.Open();

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {

                                    FreightDetails fd = new FreightDetails();

                                    fd.QuoteID = Convert.ToInt16(dr["QuoteID"]);
                                    fd.FreightName = dr["FreightName"].ToString();
                                    fd.FreightDescription = dr["FreightDescription"].ToString();
                                    fd.FreightUnit = dr["FreightUnit"].ToString();
                                    fd.FreightPallets = Convert.ToDecimal(dr["FreightPallets"]);
                                    fd.FreightPrice = Convert.ToDecimal(dr["FreightPrice"]);
                                    fd.FreightDiscount = Convert.ToDecimal(dr["FreightDiscount"]);
                                    fd.FreightTotal = Convert.ToDecimal(dr["FreightTotal"]);
                                    fd.ShipToAddress = dr["ShipToAddress"].ToString();

                                    freightDetails.Add(fd);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL FREIGHT DETAILS ERROR OCCURED : " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return freightDetails;
        }


        public static int InsertTempOrder(int QuoteID, string OrderRequiredDate, string QuoteApprovedDate, bool TempOrderApproved)
        {
            int result = 0;
            int insRowCount = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {

                SqlCommand cmdInsertTemp = new SqlCommand("INSERT INTO PendingOrder(QuoteID, OrderRequiredDate, QuoteApprovedDate, TempOrderApproved) VALUES (@QuoteID,@OrderRequiredDate,@QuoteApprovedDate,@TempOrderApproved)", conn);
                SqlCommand cmdUpdateQuote = new SqlCommand("UPDATE Quotes SET QuoteApproved =@QuoteApproved WHERE ID  = '" + QuoteID + "'", conn);

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();

                try
                {

                    cmdInsertTemp.Transaction = trans;
                    cmdInsertTemp.Parameters.AddWithValue("@QuoteID", QuoteID);
                    cmdInsertTemp.Parameters.AddWithValue("@OrderRequiredDate", OrderRequiredDate);
                    cmdInsertTemp.Parameters.AddWithValue("@QuoteApprovedDate", QuoteApprovedDate);
                    cmdInsertTemp.Parameters.AddWithValue("@TempOrderApproved", TempOrderApproved);
                    insRowCount = cmdInsertTemp.ExecuteNonQuery();

                    cmdUpdateQuote.Transaction = trans;
                    cmdUpdateQuote.Parameters.AddWithValue("@QuoteApproved", true);
                    result = cmdUpdateQuote.ExecuteNonQuery();

                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return result;
        }

        public static List<User> GetUserByName(string FitstName, string LastName)
        {
            List<User> user = new List<User>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    using (SqlCommand cmd = new SqlCommand("Select * FROM Users WHERE FirstName = '" + FitstName + "' AND LastName = '" + LastName + "'", conn))
                    {
                        conn.Open();

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    User u = new User();

                                    u.ID = Convert.ToInt16(dr["ID"]);
                                    u.Username = dr["Username"].ToString();
                                    u.FirstName = dr["FirstName"].ToString();
                                    u.LastName = dr["LastName"].ToString();
                                    user.Add(u);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL ERROR OCCURED : " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return user;
        }

        //public static BindingList<PendingOrderDetails> GetOrderPendingDetails(string UserName, string State)
        //{

        //    BindingList<PendingOrderDetails> orderPendings = new BindingList<PendingOrderDetails>();

        //    using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
        //    {
        //        try
        //        {
        //            using (SqlCommand cmd = new SqlCommand("Select Quotes.ID, Quotes.Prefix, Quotes.CustomerName, Quotes.QuoteDate, Quotes.ListPriceTot, Quotes.SubTotal, Quotes.Tax, Quotes.TotAmount, Quotes.SalesPerson, Quotes.ProName, Quotes.Instructions,Quotes.InternalComments,PendingOrder.OrderRequiredDate, QuoteDetails.QuoteID, QuoteDetails.ProductCode, QuoteDetails.ProductDescription, QuoteDetails.Quantity, QuoteDetails.ProductUnit, QuoteDetails.ProductPrice, QuoteDetails.Discount, QuoteDetails.Total, FreightDetails.FreightName, FreightDetails.FreightDescription, FreightDetails.FreightPallets, FreightDetails.FreightUnit, FreightDetails.FreightPrice, FreightDetails.FreightDiscount, FreightDetails.FreightTotal, FreightDetails.ShipToAddress FROM Quotes INNER JOIN PendingOrder ON Quotes.ID = PendingOrder.QuoteID INNER JOIN QuoteDetails ON Quotes.ID = QuoteDetails.QuoteID INNER JOIN FreightDetails ON Quotes.ID = FreightDetails.QuoteID WHERE PendingOrder.TempOrderApproved = '" + false + "' ORDER BY PendingOrder.QuoteID DESC", conn))
        //            {
        //                conn.Open();

        //                using (SqlDataReader dr = cmd.ExecuteReader())
        //                {
        //                    if (dr != null)
        //                    {
        //                        while (dr.Read())
        //                        {
        //                            PendingOrderDetails op = new PendingOrderDetails(UserName, State);
        //                            QuoteDetails qd = new QuoteDetails();
        //                            Quote q = new Quote();
        //                            FreightDetails fd = new FreightDetails();


        //                            q.ID = Convert.ToInt16(dr["ID"]);
        //                            q.Prefix = dr["Prefix"].ToString();
        //                            q.QuoteDate = dr["QuoteDate"].ToString();
        //                            op.PendingOrder.OrderRequiredDate = dr["OrderRequiredDate"].ToString();
        //                            q.CustomerName = dr["CustomerName"].ToString();
        //                            q.ProName = dr["ProName"].ToString();
        //                            q.Tax = Convert.ToDecimal(dr["tax"]);
        //                            q.ListPriceTot = Convert.ToDecimal(dr["ListPriceTot"]);
        //                            q.SubTotal = Convert.ToDecimal(dr["SubTotal"]);
        //                            q.TotAmount = Convert.ToDecimal(dr["TotAmount"]);
        //                            q.SalesPerson = dr["SalesPerson"].ToString();

        //                            qd.ID = Convert.ToInt16(dr["QuoteID"]);
        //                            qd.Total = Convert.ToDecimal(dr["Total"]);
        //                            qd.ProductCode = dr["ProductCode"].ToString();
        //                            qd.ProductDescription = dr["ProductDescription"].ToString();
        //                            qd.ProductPrice = Convert.ToDecimal(dr["ProductPrice"]);
        //                            qd.ProductUnit = dr["ProductUnit"].ToString();
        //                            qd.Quantity = Convert.ToDecimal(dr["Quantity"]);
        //                            qd.Discount = Convert.ToDecimal(dr["Discount"]);

        //                            fd.FreightTotal = Convert.ToDecimal(dr["FreightTotal"]);
        //                            fd.ShipToAddress = dr["ShipToAddress"].ToString();

        //                            op.PendingOrder.OrderRequiredDate = dr["OrderRequiredDate"].ToString();
        //                            op.quote = q;
        //                            op.quoteDetails = qd;
        //                            op.freightDetails = fd;
        //                            orderPendings.Add(op);
        //                        }
        //                    }
        //                }
        //            }
        //        }
        //        catch (Exception e)
        //        {
        //            Debug.WriteLine("SQL ERROR OCCURED : " + e);
        //        }
        //        finally
        //        {
        //            conn.Close();
        //        }
        //    }


        //    return orderPendings;

        //}

        public static int InsertComment(int QuoteID, int UserID, string Comment, string DateTime)
        {
            int result = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmd = new SqlCommand("INSERT INTO Comments(QuoteID, UserID, Comment, Date) VALUES (@QuoteID,@UserID,@Comment,@Date)", conn))
                    {
                        cmd.Parameters.AddWithValue("@QuoteID", QuoteID);
                        cmd.Parameters.AddWithValue("@UserID", UserID);
                        cmd.Parameters.AddWithValue("@Comment", Comment);
                        cmd.Parameters.AddWithValue("@Date", DateTime);

                        result = cmd.ExecuteNonQuery();

                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error: " + e);
                    result = 3;
                }
                finally
                {
                    conn.Close();
                }
            }

            return result;
        }

        public static List<Comment> GetCommentsByQuoteNo(int QuoteNo)
        {
            List<Comment> comment = new List<Comment>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    using (SqlCommand cmd = new SqlCommand("select Comments.QuoteID, Comments.UserID, Comments.Comment, Comments.Date, Users.FirstName, Users.LastName FROM Comments INNER JOIN Users ON Comments.UserID = Users.ID WHERE QuoteID = '" + QuoteNo + "' Order By Date DESC", conn))
                    {
                        conn.Open();

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    Comment c = new Comment();

                                    c.QuoteID = Convert.ToInt16(dr["QuoteID"]);
                                    c.FirstName = dr["FirstName"].ToString();
                                    c.LastName = dr["LastName"].ToString();
                                    c.UserID = Convert.ToInt16(dr["UserID"]);
                                    c.UserComment = dr["Comment"].ToString();
                                    c.Date = dr["Date"].ToString();
                                    comment.Add(c);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL ERROR OCCURED : " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return comment;
        }



        //public static int InsertOrder(OrderDetails testOrder)
        //{
        //    int result = 0;
        //    int rowCount = 0;

        //    using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
        //    {


        //        SqlCommand cmdInsertOrder = new SqlCommand("INSERT INTO Orders(QuoteNo, OrderApprovedDate,OrderStatus) VALUES (@QuoteNo,@OrderApprovedDate,@OrderStatus)", conn);
        //        SqlCommand cmdUpdateTempOrder = new SqlCommand("UPDATE PendingOrder SET TempOrderApproved = @TempOrderApproved WHERE QuoteID = '" + testOrder.Quote.ID + "'", conn);

        //        SqlTransaction trans = null;
        //        conn.Open();
        //        trans = conn.BeginTransaction();
        //        try
        //        {
        //            cmdInsertOrder.Transaction = trans;
        //            cmdInsertOrder.Parameters.AddWithValue("@QuoteNo", testOrder.Quote.ID);
        //            cmdInsertOrder.Parameters.AddWithValue("@OrderApprovedDate", testOrder.OrderApprovedDate);
        //            cmdInsertOrder.Parameters.AddWithValue("@OrderStatus", testOrder.Order.orderStatus.ToString());
        //            rowCount = cmdInsertOrder.ExecuteNonQuery();

        //            cmdUpdateTempOrder.Transaction = trans;
        //            cmdUpdateTempOrder.Parameters.AddWithValue("@TempOrderApproved", true);
        //            rowCount = cmdUpdateTempOrder.ExecuteNonQuery();

        //            trans.Commit();

        //            if (rowCount > 0)
        //            {
        //                result = 1;
        //            }
        //            else
        //            {
        //                result = 2;
        //            }

        //        }
        //        catch (Exception e)
        //        {
        //            trans.Rollback();
        //            Debug.WriteLine("Error: " + e);
        //            result = 3;
        //        }
        //        finally
        //        {
        //            conn.Close();
        //        }
        //    }          

        //    return result;
        //}

        //public static ObservableCollection<OrderDetails> GetAllOrders()
        //{
        //    ObservableCollection<OrderDetails> testOrderList = new ObservableCollection<OrderDetails>();

        //    using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
        //    {
        //        try
        //        {
        //            using (SqlCommand cmd = new SqlCommand("SELECT Quotes.ID,QuoteDetails.ProductID, QuoteDetails.ProductCode, QuoteDetails.ProductDescription, QuoteDetails.Quantity, QuoteDetails.ProductUnit, " +
        //                                                   "Orders.OrderNo, Orders.QuoteNo, PendingOrder.OrderRequiredDate, " +
        //                                                   "Customers.CompanyName FROM Quotes " +
        //                                                   "INNER JOIN QuoteDetails ON Quotes.ID = QuoteDetails.QuoteID " +
        //                                                   "INNER JOIN Orders ON Quotes.ID = Orders.QuoteNo " +
        //                                                   "INNER JOIN PendingOrder ON Quotes.ID = PendingOrder.QuoteID " +
        //                                                   "INNER JOIN Customers ON Quotes.CustomerID = Customers.CustomerID", conn))
        //            {
        //                conn.Open();

        //                using (SqlDataReader dr = cmd.ExecuteReader())
        //                {
        //                    if (dr != null)
        //                    {
        //                        while (dr.Read())
        //                        {
        //                            OrderDetails to = new OrderDetails();

        //                            to.OrderNo = Convert.ToInt16(dr["OrderNo"]);
        //                            to.Quote = new Quote() { ID = Convert.ToInt16(dr["QuoteNo"]) };
        //                            to.QuoteDetails = new QuoteDetails() { ProductID = Convert.ToInt16(dr["ProductID"]), ProductCode = dr["ProductCode"].ToString(), ProductDescription = dr["ProductDescription"].ToString(), Quantity = Convert.ToDecimal(dr["Quantity"]), ProductUnit = dr["ProductUnit"].ToString() };
        //                            to.Customer = new Customer() { CompanyName = dr["CompanyName"].ToString() };
        //                            to.PendingOrder = new PendingOrder() { OrderRequiredDate = dr["OrderRequiredDate"].ToString() };

        //                            testOrderList.Add(to);
        //                        }
        //                    }
        //                }
        //            }
        //        }
        //        catch (Exception e)
        //        {
        //            Debug.WriteLine("SQL ERROR OCCURED : " + e);
        //        }
        //        finally
        //        {
        //            conn.Close();
        //        }
        //    }
        //    return testOrderList;
        //}

        //public static ObservableCollection<StockDetails> CheckStock(ObservableCollection<OrderDetails> orders)
        //{
        //    string strVals = string.Join(",", orders.Select(a => a.QuoteDetails.ProductID));
        //    ObservableCollection<StockDetails> stock = new ObservableCollection<StockDetails>();

        //    using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
        //    {
        //        try
        //        {
        //            using (SqlCommand cmd = new SqlCommand("Select Products.ProductID ,Products.ProductCode, Products.ProductDescription, Products.ProductUnit, Products.max_items_per, " +
        //                                                   "TestStock.product_location, TestStock.qty, TestStock.re_order_qty,  TestStock.stock_date, TestStock.comments, " +
        //                                                   "RawProducts.RawProductType, RawProducts.Description FROM dbo.Products " +
        //                                                   "INNER JOIN dbo.TestStock ON Products.ProductID = TestStock.product_id " +
        //                                                   "INNER JOIN dbo.RawProducts ON Products.RawProductID = RawProducts.RawProductID " +
        //                                                   "WHERE TestStock.product_id in (" + strVals + ")", conn))
        //            {
        //                conn.Open();

        //                using (SqlDataReader dr = cmd.ExecuteReader())
        //                {
        //                    if (dr != null)
        //                    {
        //                        while (dr.Read())
        //                        {
        //                            StockDetails st = new StockDetails();
        //                            Product pro = new Product();
        //                            RawProduct rPro = new RawProduct();
        //                            List<Product> p = new List<Product>();

        //                            pro.ProductID = Convert.ToInt16(dr["ProductID"]);
        //                            pro.ProductCode = dr["ProductCode"].ToString();
        //                            pro.ProductDescription = dr["ProductDescription"].ToString();
        //                            pro.ProductUnit = dr["ProductUnit"].ToString();
        //                            pro.MaxItemsPer = Convert.ToDecimal(dr["max_items_per"]);
        //                            st.Stock.ProductLocation = dr["product_location"].ToString();
        //                            st.Stock.StockInHand = Convert.ToDecimal(dr["qty"]);
        //                            st.Stock.ReOrderQty = Convert.ToDecimal(dr["re_order_qty"]);
        //                            st.Stock.StockedDate = dr["stock_date"].ToString();
        //                            st.Stock.Comments = dr["comments"].ToString();
        //                            rPro.RawProductType = dr["RawProductType"].ToString();
        //                            rPro.Description = dr["Description"].ToString();
        //                            p.Add(pro);                                   
        //                            st.product = pro;
        //                            st.RawProduct = rPro;
        //                            stock.Add(st);        


        //                        }
        //                    }
        //                }
        //            }
        //        }
        //        catch (Exception e)
        //        {
        //            Debug.WriteLine("SQL ERROR OCCURED : " + e);
        //        }
        //        finally
        //        {
        //            conn.Close();
        //        }
        //    }
        //    return stock;
        //}
        //Reschedule Orders which have not neen approved
        public static string RescheduleOrdersByDate(DateTime currDate)
        {
            string result = string.Empty;
            int rows = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {

                using (SqlCommand cmdDeclineOrder = new SqlCommand("UPDATE Orders SET date_to_display = @date_to_display WHERE date_to_display < '" + currDate + "'", conn))
                {
                    conn.Open();
                    try
                    {
                        cmdDeclineOrder.Parameters.AddWithValue("@date_to_display", currDate.ToString("dd/MM/yyyy"));
                        rows = cmdDeclineOrder.ExecuteNonQuery();
                        if (rows > 0)
                        {
                            result = "Order(s) Resheduled";
                        }
                    }
                    catch (Exception e)
                    {
                        Debug.WriteLine("SQL UPDATE COMMAND ERROR OCCURED :  Rescheduling in Orders table" + e);
                    }
                    finally
                    {
                        conn.Close();
                    }
                }
            }

            return result;
        }

        public static List<Shift> GetAllShifts()
        {
            List<Shift> list = new List<Shift>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetId = new SqlCommand("SELECT * FROM Shifts", conn))
                    {
                        using (SqlDataReader dr = cmdGetId.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    Shift shift = new Shift();

                                    shift.ID = Convert.ToInt16(dr["id"]);
                                    shift.ShiftID = Convert.ToInt16(dr["shift_id"]);
                                    shift.ShiftName = dr["shift_name"].ToString();
                                    shift.StartTime = (TimeSpan)dr["shift_start_time"];
                                    shift.EndTime = (TimeSpan)dr["shift_end_time"];

                                    list.Add(shift);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading shift details: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return list;
        }

        public static Order GetOrderByOrderNo(Int64 orderNo)
        {
            Order order = new Order();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetOrder = new SqlCommand("SELECT * FROM Orders WHERE order_id=@OrderNo", conn))
                    {
                        cmdGetOrder.Parameters.AddWithValue("@OrderNo", orderNo);
                        using (SqlDataReader dr = cmdGetOrder.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {

                                    order.OrderNo = Convert.ToInt32(dr["order_id"]);
                                    order.SalesNo = dr["sales_no"].ToString();
                                    order.Customer = new Customer() { CustomerId = Convert.ToInt16(dr["customer_id"]) };
                                    order.DeliveryDetails = new List<Delivery>() { new Delivery() { FreightID = Convert.ToInt16(dr["freight_id"]) } };
                                    order.RequiredDate = Convert.ToDateTime(dr["required_date"]);
                                    order.ListPriceTotal = Convert.ToDecimal(dr["list_price_total"]);
                                    order.GST = Convert.ToDecimal(dr["gst"]);
                                    order.TotalAmount = Convert.ToDecimal(dr["total"]);
                                    order.OrderType = Convert.ToInt16(dr["order_type"]);
                                    order.IsRequiredDateSelected = Convert.ToBoolean(dr["required_date_selected"]);
                                    order.Comments = dr["comments"].ToString();
                                    order.OrderCreatedDate = Convert.ToDateTime(dr["created_date"]);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading shift details: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return order;
        }

        public static int MoveOrderUrgent(ShiftProductionViewModel shiftProductionViewModel)
        {
            int res = 0;
            List<CurrentCapacity> ccList = new List<CurrentCapacity>();
            List<CurrentCapacity> ccDList = new List<CurrentCapacity>();

            List<FormulaDetails> fdList = new List<FormulaDetails>();
            fdList = GetGradingWeightDependency(shiftProductionViewModel.RawProductionDetails.RawProduct.RawProductID);


            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdSelectCCNew = new SqlCommand("SELECT * FROM CurrentCapacity " +
                                                           "WHERE prod_timetable_id = @prodTimeTableIdParam AND product_capacity_id = @ProdCapID AND raw_product_id = @rawProductIdParam AND sales_id = @salesIdParam AND shift = @shiftParam AND order_type = @OrderType", conn);


                SqlCommand cmdSelectCC = new SqlCommand("SELECT * FROM CurrentCapacity " +
                                                        "WHERE prod_timetable_id = @prodTimeTableIdParam AND raw_product_id = @rawProductIdParam AND sales_id = @salesIdParam AND shift = @shiftParam AND " +
                                                        "order_type = @OrderType", conn);
                //CurrentCapacity Destination
                SqlCommand cmdSelectCCD = new SqlCommand("SELECT * FROM CurrentCapacity " +
                                                        "WHERE prod_timetable_id = @prodTimeTableIdParam AND raw_product_id = @rawProductIdParam AND sales_id = @salesIdParam AND shift = @shiftParam AND " +
                                                        "order_type = @OrderType", conn);

                //SELECT FROM GradingScheduling New Date
                SqlCommand cmdSelectGSNew = new SqlCommand("SELECT * FROM GradingScheduling " +
                                                           "WHERE production_time_table_id = @prodTimeTableIdParam AND raw_product_id = @rawProductIdParam AND sales_id = @salesIdParam AND shift = @shiftParam AND order_type = @OrderType", conn);

                //UPDATE CurrentCapacity
                SqlCommand cmdUpCC = new SqlCommand("UPDATE CurrentCapacity SET order_type =@NewOrderType " +
                                                    "WHERE prod_timetable_id = @prodTimeTableIdParam AND product_capacity_id = @prodCap AND sales_id = @salesIdParam AND " +
                                                    "raw_product_id = @rawProductIdParam AND shift = @oldShift AND order_type=@OrderType", conn);

                //UPDATE Source CurrentCapacity
                SqlCommand cmdUpCCSource = new SqlCommand("UPDATE CurrentCapacity SET capacity_kg =@CapacityKg,blocks_logs =@BlocksLogs " +
                                                       "WHERE prod_timetable_id = @ProdTimeTableId AND product_capacity_id = @CapacityID AND sales_id = @SalesId AND " +
                                                       "raw_product_id = @RawproductId AND shift = @Shift AND order_type = @OrderType", conn);

                //INSTERT OR UPDATE CurrentCapacity
                SqlCommand cmdInsUpCCD = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM CurrentCapacity " +
                                                       "WHERE prod_timetable_id = @ProdTimeTableId AND product_capacity_id = @CapacityID AND sales_id = @SalesId AND raw_product_id = @RawproductId AND shift = @Shift AND order_type = @OrderType) " +
                                                       "INSERT INTO CurrentCapacity VALUES(@NewProdTimeTableId,@NewCapacityId,@NewSalesId,@NewRawproductId,@NewProductId,@NewShift,@NewCapacityKgParam,@NewBlockSLogs,@NewOrderType) " +
                                                       "ELSE " +
                                                       "UPDATE CurrentCapacity SET capacity_kg=@CapacityKg,blocks_logs=@BlockSLogs " +
                                                       "WHERE prod_timetable_id=@ProdTimeTableId2 AND product_capacity_id = @CapacityId2 AND sales_id = @SalesId2 AND raw_product_id =@RawproductId2 AND product_id = @ProductId2 AND shift=@Shift2 AND order_type=@Ordertype2", conn);



                //UPDATE Grading Scheduling
                SqlCommand cmdUpGS = new SqlCommand("UPDATE GradingScheduling SET order_type = @OrderType, blocklog_qty= @BlocksLogs " +
                                                    "WHERE production_time_table_id = @prodTimeTableIdParam AND raw_product_id = @rawProductIdParam AND sales_id = @salesIdParam AND shift = @oldShift AND status = @statusParam", conn);


                //UPDATE Grading Scheduling
                SqlCommand cmdUpGS1 = new SqlCommand("UPDATE GradingScheduling SET order_type = @OrderType, blocklog_qty=@BlockSLogs " +
                                                     "WHERE production_time_table_id = @ProdTimeTableId AND raw_product_id = @RawproductId AND sales_id = @SalesId AND shift = @Shift AND status = @StatusParam AND order_type=@Ordertype", conn);

                //INSTERT OR UPDATE INTO GradingScheduling
                SqlCommand cmdInsUpGS = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM GradingScheduling " +
                                                       "WHERE production_time_table_id=@ProdTimeTableId AND raw_product_id =@RawproductId AND shift=@Shift AND sales_id = @SalesId AND order_type=@Ordertype) " +
                                                       "INSERT INTO GradingScheduling VALUES(@NewProdTimeTableId,@NewRawproductId,@NewSalesId,@NewBlockSLogs,@NewShift,@NewStatusParam,@NewOrderType,@NewActive,@NewPrintCounter) " +
                                                       "ELSE " +
                                                       "UPDATE GradingScheduling SET blocklog_qty=@BlockSLogs " +
                                                       "WHERE production_time_table_id=@ProdTimeTableId AND raw_product_id =@RawproductId AND shift=@Shift AND sales_id = @SalesId AND order_type=@Ordertype", conn);

                SqlCommand cmdDeleteGS = new SqlCommand("DELETE FROM GradingScheduling " +
                                                        "WHERE production_time_table_id = @prodTimeTableIdParam AND raw_product_id = @rawProductIdParam AND sales_id = @salesIdParam AND shift = @oldShift AND status = @statusParam AND order_type = @Ordertype", conn);

                SqlCommand cmdDeleteCC = new SqlCommand("DELETE FROM CurrentCapacity " +
                                                        "WHERE prod_timetable_id = @prodTimeTableIdParam AND product_capacity_id = @prodCap AND sales_id = @salesIdParam AND " +
                                                        "raw_product_id = @rawProductIdParam AND shift = @oldShift AND order_type = @Ordertype", conn);


                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {

                    cmdSelectCC.Transaction = trans;
                    cmdSelectCC.Parameters.AddWithValue("@prodTimeTableIdParam", shiftProductionViewModel.RawProductionDetails.ProdTimeTableID);
                    cmdSelectCC.Parameters.AddWithValue("@salesIdParam", shiftProductionViewModel.RawProductionDetails.SalesOrderId);
                    cmdSelectCC.Parameters.AddWithValue("@rawProductIdParam", shiftProductionViewModel.RawProductionDetails.RawProduct.RawProductID);
                    cmdSelectCC.Parameters.AddWithValue("@shiftParam", shiftProductionViewModel.RawProductionDetails.Shift);
                    cmdSelectCC.Parameters.AddWithValue("@OrderType", shiftProductionViewModel.RawProductionDetails.OrderType);

                    //CurrentCapacity source select
                    using (SqlDataReader dr = cmdSelectCC.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    CurrentCapacity cc = new CurrentCapacity();
                                    cc.ProdTimeTableID = Convert.ToInt32(dr["prod_timetable_id"]);
                                    cc.ProductCapacityID = Convert.ToInt16(dr["product_capacity_id"]);
                                    cc.SalesID = Convert.ToInt32(dr["sales_id"]);
                                    cc.RawProductID = Convert.ToInt32(dr["raw_product_id"]);
                                    cc.Shift = Convert.ToInt16(dr["shift"]);
                                    cc.CapacityKG = Convert.ToDecimal(dr["capacity_kg"]);
                                    cc.BlocksLogs = Convert.ToDecimal(dr["blocks_logs"]);
                                    cc.OrderType = Convert.ToInt16(dr["order_type"]);
                                    ccList.Add(cc);
                                }
                            }
                        }
                    }

                    //CurrentCapacity destination select
                    cmdSelectCCD.Transaction = trans;
                    cmdSelectCCD.Parameters.AddWithValue("@prodTimeTableIdParam", shiftProductionViewModel.RawProductionDetails.ProdTimeTableID);
                    cmdSelectCCD.Parameters.AddWithValue("@salesIdParam", shiftProductionViewModel.RawProductionDetails.SalesOrderId);
                    cmdSelectCCD.Parameters.AddWithValue("@rawProductIdParam", shiftProductionViewModel.RawProductionDetails.RawProduct.RawProductID);
                    cmdSelectCCD.Parameters.AddWithValue("@shiftParam", shiftProductionViewModel.RawProductionDetails.Shift);
                    cmdSelectCCD.Parameters.AddWithValue("@OrderType", 1);

                    //CurrentCapacity destination select
                    using (SqlDataReader dr = cmdSelectCCD.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    CurrentCapacity cc = new CurrentCapacity();
                                    cc.ProdTimeTableID = Convert.ToInt32(dr["prod_timetable_id"]);
                                    cc.ProductCapacityID = Convert.ToInt16(dr["product_capacity_id"]);
                                    cc.SalesID = Convert.ToInt32(dr["sales_id"]);
                                    cc.RawProductID = Convert.ToInt32(dr["raw_product_id"]);
                                    cc.Shift = Convert.ToInt16(dr["shift"]);
                                    cc.CapacityKG = Convert.ToDecimal(dr["capacity_kg"]);
                                    cc.BlocksLogs = Convert.ToDecimal(dr["blocks_logs"]);
                                    cc.OrderType = Convert.ToInt16(dr["order_type"]);
                                    ccDList.Add(cc);
                                }
                            }
                        }
                    }

                    decimal bl = 0;
                    //Check if destination has any urgent orders
                    cmdSelectGSNew.Transaction = trans;
                    cmdSelectGSNew.Parameters.AddWithValue("@prodTimeTableIdParam", shiftProductionViewModel.CurrentProdTimeTableID);
                    cmdSelectGSNew.Parameters.AddWithValue("@salesIdParam", shiftProductionViewModel.RawProductionDetails.SalesOrderId);
                    cmdSelectGSNew.Parameters.AddWithValue("@rawProductIdParam", shiftProductionViewModel.RawProductionDetails.RawProduct.RawProductID);
                    cmdSelectGSNew.Parameters.AddWithValue("@shiftParam", shiftProductionViewModel.CurentShift);
                    cmdSelectGSNew.Parameters.AddWithValue("@OrderType", 1);

                    using (SqlDataReader dr = cmdSelectGSNew.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    bl += Convert.ToInt32(dr["blocklog_qty"]);
                                }
                            }
                        }
                    }


                    //Split Update
                    if (shiftProductionViewModel.Qty < shiftProductionViewModel.RawProductionDetails.BlockLogQty)
                    {

                        decimal x = shiftProductionViewModel.RawProductionDetails.BlockLogQty - shiftProductionViewModel.Qty;
                        decimal tot = 0;

                        //Source Update - GradingScheduling
                        cmdUpGS1.Transaction = trans;
                        cmdUpGS1.Parameters.AddWithValue("@ProdTimeTableId", shiftProductionViewModel.CurrentProdTimeTableID);
                        cmdUpGS1.Parameters.AddWithValue("@RawproductId", shiftProductionViewModel.RawProductionDetails.RawProduct.RawProductID);
                        cmdUpGS1.Parameters.AddWithValue("@SalesId", shiftProductionViewModel.RawProductionDetails.SalesOrderId);
                        cmdUpGS1.Parameters.AddWithValue("@Shift", shiftProductionViewModel.CurentShift);
                        cmdUpGS1.Parameters.AddWithValue("@BlockSLogs", x);
                        cmdUpGS1.Parameters.AddWithValue("@StatusParam", "Grading");
                        cmdUpGS1.Parameters.AddWithValue("@Ordertype", shiftProductionViewModel.RawProductionDetails.OrderType);
                        cmdUpGS1.ExecuteNonQuery();

                        tot = shiftProductionViewModel.Qty + bl;

                        //Destination Insert - GradingScheduling                       
                        cmdInsUpGS.Transaction = trans;
                        cmdInsUpGS.Parameters.AddWithValue("@NewProdTimeTableId", shiftProductionViewModel.CurrentProdTimeTableID);
                        cmdInsUpGS.Parameters.AddWithValue("@NewRawproductId", shiftProductionViewModel.RawProductionDetails.RawProduct.RawProductID);
                        cmdInsUpGS.Parameters.AddWithValue("@NewSalesId", shiftProductionViewModel.RawProductionDetails.SalesOrderId);
                        cmdInsUpGS.Parameters.AddWithValue("@NewShift", shiftProductionViewModel.CurentShift);
                        cmdInsUpGS.Parameters.AddWithValue("@NewBlockSLogs", tot);
                        cmdInsUpGS.Parameters.AddWithValue("@NewStatusParam", "Grading");
                        cmdInsUpGS.Parameters.AddWithValue("@NewOrderType", 1);
                        cmdInsUpGS.Parameters.AddWithValue("@NewActive", false);
                        cmdInsUpGS.Parameters.AddWithValue("@NewPrintCounter", 0);
                        //Destination Update - GradingScheduling                        
                        cmdInsUpGS.Parameters.AddWithValue("@ProdTimeTableId", shiftProductionViewModel.CurrentProdTimeTableID);
                        cmdInsUpGS.Parameters.AddWithValue("@RawproductId", shiftProductionViewModel.RawProductionDetails.RawProduct.RawProductID);
                        cmdInsUpGS.Parameters.AddWithValue("@SalesId", shiftProductionViewModel.RawProductionDetails.SalesOrderId);
                        cmdInsUpGS.Parameters.AddWithValue("@Shift", shiftProductionViewModel.CurentShift);
                        cmdInsUpGS.Parameters.AddWithValue("@BlockSLogs", tot);
                        cmdInsUpGS.Parameters.AddWithValue("@StatusParam", "Grading");
                        cmdInsUpGS.Parameters.AddWithValue("@OrderType", 1);
                        cmdInsUpGS.ExecuteNonQuery();

                        /**************************CURRENT CAPACITY*******************/


                        foreach (var item in ccList)
                        {
                            foreach (var itemF in fdList)
                            {

                                if (itemF.CapacityID == item.ProductCapacityID)
                                {
                                    decimal kg = 0;
                                    decimal blklogs = 0;

                                    blklogs = shiftProductionViewModel.RawProductionDetails.BlockLogQty - shiftProductionViewModel.Qty;

                                    //CurrentCapacity Source Update
                                    cmdUpCCSource.Transaction = trans;
                                    cmdUpCCSource.Parameters.AddWithValue("@ProdTimeTableId", shiftProductionViewModel.CurrentProdTimeTableID);
                                    cmdUpCCSource.Parameters.AddWithValue("@CapacityID", item.ProductCapacityID);
                                    cmdUpCCSource.Parameters.AddWithValue("@SalesId", shiftProductionViewModel.RawProductionDetails.SalesOrderId);
                                    cmdUpCCSource.Parameters.AddWithValue("@RawproductId", shiftProductionViewModel.RawProductionDetails.RawProduct.RawProductID);
                                    cmdUpCCSource.Parameters.AddWithValue("@Shift", shiftProductionViewModel.CurentShift);
                                    cmdUpCCSource.Parameters.AddWithValue("@Ordertype", shiftProductionViewModel.RawProductionDetails.OrderType);
                                    cmdUpCCSource.Parameters.AddWithValue("@BlocksLogs", blklogs);
                                    cmdUpCCSource.Parameters.AddWithValue("@CapacityKg", blklogs * itemF.GradingWeight);
                                    cmdUpCCSource.ExecuteNonQuery();
                                    cmdUpCCSource.Parameters.Clear();

                                    //CurrentCapacity Destination Insert/Update
                                    decimal b = 0;
                                    decimal k = 0;
                                    foreach (var itemCCD in ccDList)
                                    {
                                        if (itemCCD.ProductCapacityID == item.ProductCapacityID && itemCCD.RawProductID == item.RawProductID)
                                        {
                                            b = itemCCD.BlocksLogs;
                                            k = itemCCD.CapacityKG;
                                        }
                                    }
                                    //WHERE
                                    cmdInsUpCCD.Transaction = trans;
                                    cmdInsUpCCD.Parameters.AddWithValue("@ProdTimeTableId", shiftProductionViewModel.CurrentProdTimeTableID);
                                    cmdInsUpCCD.Parameters.AddWithValue("@CapacityID", item.ProductCapacityID);
                                    cmdInsUpCCD.Parameters.AddWithValue("@SalesId", shiftProductionViewModel.RawProductionDetails.SalesOrderId);
                                    cmdInsUpCCD.Parameters.AddWithValue("@RawproductId", shiftProductionViewModel.RawProductionDetails.RawProduct.RawProductID);
                                    cmdInsUpCCD.Parameters.AddWithValue("@Shift", shiftProductionViewModel.CurentShift);
                                    cmdInsUpCCD.Parameters.AddWithValue("@OrderType", 1);
                                    //INSERT
                                    cmdInsUpCCD.Parameters.AddWithValue("@NewProdTimeTableId", shiftProductionViewModel.CurrentProdTimeTableID);
                                    cmdInsUpCCD.Parameters.AddWithValue("@NewCapacityId", item.ProductCapacityID);
                                    cmdInsUpCCD.Parameters.AddWithValue("@NewSalesId", shiftProductionViewModel.RawProductionDetails.SalesOrderId);
                                    cmdInsUpCCD.Parameters.AddWithValue("@NewRawproductId", shiftProductionViewModel.RawProductionDetails.RawProduct.RawProductID);
                                    cmdInsUpCCD.Parameters.AddWithValue("@NewProductId", 0);
                                    cmdInsUpCCD.Parameters.AddWithValue("@NewShift", shiftProductionViewModel.CurentShift);
                                    cmdInsUpCCD.Parameters.AddWithValue("@NewCapacityKgParam", shiftProductionViewModel.Qty * itemF.GradingWeight);
                                    cmdInsUpCCD.Parameters.AddWithValue("@NewBlockSLogs", shiftProductionViewModel.Qty);
                                    cmdInsUpCCD.Parameters.AddWithValue("@NewOrderType", 1);
                                    //UPDATE
                                    cmdInsUpCCD.Parameters.AddWithValue("@ProdTimeTableId2", shiftProductionViewModel.CurrentProdTimeTableID);
                                    cmdInsUpCCD.Parameters.AddWithValue("@CapacityId2", item.ProductCapacityID);
                                    cmdInsUpCCD.Parameters.AddWithValue("@SalesId2", shiftProductionViewModel.RawProductionDetails.SalesOrderId);
                                    cmdInsUpCCD.Parameters.AddWithValue("@RawproductId2", shiftProductionViewModel.RawProductionDetails.RawProduct.RawProductID);
                                    cmdInsUpCCD.Parameters.AddWithValue("@ProductId2", 0);
                                    cmdInsUpCCD.Parameters.AddWithValue("@Shift2", shiftProductionViewModel.CurentShift);
                                    cmdInsUpCCD.Parameters.AddWithValue("@CapacityKg", (shiftProductionViewModel.Qty + b) * itemF.GradingWeight);
                                    cmdInsUpCCD.Parameters.AddWithValue("@BlockSLogs", shiftProductionViewModel.Qty + b);
                                    cmdInsUpCCD.Parameters.AddWithValue("@Ordertype2", 1);

                                    cmdInsUpCCD.ExecuteNonQuery();
                                    cmdInsUpCCD.Parameters.Clear();
                                }
                            }
                        }




                    }
                    else if (shiftProductionViewModel.Qty == shiftProductionViewModel.RawProductionDetails.BlockLogQty)
                    {
                        decimal tot = 0;

                        if (bl > 0)
                        {


                            tot = bl + shiftProductionViewModel.Qty;
                            //Delete GradingScheduling
                            cmdDeleteGS.Transaction = trans;
                            cmdDeleteGS.Parameters.AddWithValue("@prodTimeTableIdParam", shiftProductionViewModel.CurrentProdTimeTableID);
                            cmdDeleteGS.Parameters.AddWithValue("@salesIdParam", shiftProductionViewModel.RawProductionDetails.SalesOrderId);
                            cmdDeleteGS.Parameters.AddWithValue("@rawProductIdParam", shiftProductionViewModel.RawProductionDetails.RawProduct.RawProductID);
                            cmdDeleteGS.Parameters.AddWithValue("@statusParam", "Grading");
                            cmdDeleteGS.Parameters.AddWithValue("@Ordertype", shiftProductionViewModel.RawProductionDetails.OrderType);
                            cmdDeleteGS.Parameters.AddWithValue("@oldShift", shiftProductionViewModel.CurentShift);
                            cmdDeleteGS.ExecuteNonQuery();




                        }
                        else
                        {
                            tot = shiftProductionViewModel.Qty;
                        }

                        //Destination Grading Scheduling Update
                        cmdUpGS.Transaction = trans;
                        cmdUpGS.Parameters.AddWithValue("@prodTimeTableIdParam", shiftProductionViewModel.CurrentProdTimeTableID);
                        cmdUpGS.Parameters.AddWithValue("@salesIdParam", shiftProductionViewModel.RawProductionDetails.SalesOrderId);
                        cmdUpGS.Parameters.AddWithValue("@rawProductIdParam", shiftProductionViewModel.RawProductionDetails.RawProduct.RawProductID);
                        cmdUpGS.Parameters.AddWithValue("@oldShift", shiftProductionViewModel.CurentShift);
                        cmdUpGS.Parameters.AddWithValue("@BlocksLogs", tot);
                        cmdUpGS.Parameters.AddWithValue("@statusParam", "Grading");
                        cmdUpGS.Parameters.AddWithValue("@Ordertype", 1);
                        cmdUpGS.ExecuteNonQuery();



                        decimal b = 0;
                        decimal k = 0;

                        //Destination CurrentCapacity Insert/Update
                        foreach (var itemF in fdList)
                        {
                            foreach (var itemCCD in ccDList)
                            {
                                if (itemCCD.ProductCapacityID == itemF.CapacityID)
                                {
                                    b = itemCCD.BlocksLogs;
                                    k = itemCCD.CapacityKG;
                                }
                            }
                            //If there is value in destination
                            if (b > 0 && k > 0)
                            {

                                //WHERE
                                cmdInsUpCCD.Transaction = trans;
                                cmdInsUpCCD.Parameters.AddWithValue("@ProdTimeTableId", shiftProductionViewModel.CurrentProdTimeTableID);
                                cmdInsUpCCD.Parameters.AddWithValue("@CapacityID", itemF.CapacityID);
                                cmdInsUpCCD.Parameters.AddWithValue("@SalesId", shiftProductionViewModel.RawProductionDetails.SalesOrderId);
                                cmdInsUpCCD.Parameters.AddWithValue("@RawproductId", shiftProductionViewModel.RawProductionDetails.RawProduct.RawProductID);
                                cmdInsUpCCD.Parameters.AddWithValue("@Shift", shiftProductionViewModel.CurentShift);
                                cmdInsUpCCD.Parameters.AddWithValue("@OrderType", 1);
                                //INSERT
                                cmdInsUpCCD.Parameters.AddWithValue("@NewProdTimeTableId", shiftProductionViewModel.CurrentProdTimeTableID);
                                cmdInsUpCCD.Parameters.AddWithValue("@NewCapacityId", itemF.CapacityID);
                                cmdInsUpCCD.Parameters.AddWithValue("@NewSalesId", shiftProductionViewModel.RawProductionDetails.SalesOrderId);
                                cmdInsUpCCD.Parameters.AddWithValue("@NewRawproductId", shiftProductionViewModel.RawProductionDetails.RawProduct.RawProductID);
                                cmdInsUpCCD.Parameters.AddWithValue("@NewProductId", 0);
                                cmdInsUpCCD.Parameters.AddWithValue("@NewShift", shiftProductionViewModel.CurentShift);
                                cmdInsUpCCD.Parameters.AddWithValue("@NewCapacityKgParam", shiftProductionViewModel.Qty * itemF.GradingWeight);
                                cmdInsUpCCD.Parameters.AddWithValue("@NewBlockSLogs", shiftProductionViewModel.Qty);
                                cmdInsUpCCD.Parameters.AddWithValue("@NewOrderType", 1);
                                //UPDATE
                                cmdInsUpCCD.Parameters.AddWithValue("@ProdTimeTableId2", shiftProductionViewModel.CurrentProdTimeTableID);
                                cmdInsUpCCD.Parameters.AddWithValue("@CapacityId2", itemF.CapacityID);
                                cmdInsUpCCD.Parameters.AddWithValue("@SalesId2", shiftProductionViewModel.RawProductionDetails.SalesOrderId);
                                cmdInsUpCCD.Parameters.AddWithValue("@RawproductId2", shiftProductionViewModel.RawProductionDetails.RawProduct.RawProductID);
                                cmdInsUpCCD.Parameters.AddWithValue("@ProductId2", 0);
                                cmdInsUpCCD.Parameters.AddWithValue("@Shift2", shiftProductionViewModel.CurentShift);
                                cmdInsUpCCD.Parameters.AddWithValue("@CapacityKg", (shiftProductionViewModel.Qty + b) * itemF.GradingWeight);
                                cmdInsUpCCD.Parameters.AddWithValue("@BlockSLogs", shiftProductionViewModel.Qty + b);
                                cmdInsUpCCD.Parameters.AddWithValue("@Ordertype2", 1);

                                cmdInsUpCCD.ExecuteNonQuery();
                                cmdInsUpCCD.Parameters.Clear();

                                //Delete Source CurrentCapacity           
                                cmdDeleteCC.Transaction = trans;
                                cmdDeleteCC.Parameters.AddWithValue("@prodTimeTableIdParam", shiftProductionViewModel.CurrentProdTimeTableID);
                                cmdDeleteCC.Parameters.AddWithValue("@prodCap", itemF.CapacityID);
                                cmdDeleteCC.Parameters.AddWithValue("@salesIdParam", shiftProductionViewModel.RawProductionDetails.SalesOrderId);
                                cmdDeleteCC.Parameters.AddWithValue("@rawProductIdParam", shiftProductionViewModel.RawProductionDetails.RawProduct.RawProductID);
                                cmdDeleteCC.Parameters.AddWithValue("@oldShift", shiftProductionViewModel.CurentShift);
                                cmdDeleteCC.Parameters.AddWithValue("@Ordertype", shiftProductionViewModel.RawProductionDetails.OrderType);
                                cmdDeleteCC.ExecuteNonQuery();
                                cmdDeleteCC.Parameters.Clear();


                            }
                            else
                            {
                                cmdUpCC.Transaction = trans;
                                cmdUpCC.Parameters.AddWithValue("@prodTimeTableIdParam", shiftProductionViewModel.CurrentProdTimeTableID);
                                cmdUpCC.Parameters.AddWithValue("@prodCap", itemF.CapacityID);
                                cmdUpCC.Parameters.AddWithValue("@salesIdParam", shiftProductionViewModel.RawProductionDetails.SalesOrderId);
                                cmdUpCC.Parameters.AddWithValue("@rawProductIdParam", shiftProductionViewModel.RawProductionDetails.RawProduct.RawProductID);
                                cmdUpCC.Parameters.AddWithValue("@oldShift", shiftProductionViewModel.CurentShift);
                                cmdUpCC.Parameters.AddWithValue("@OrderType", shiftProductionViewModel.RawProductionDetails.OrderType);
                                cmdUpCC.Parameters.AddWithValue("@NewOrderType", 1);
                                cmdUpCC.ExecuteNonQuery();
                                cmdUpCC.Parameters.Clear();
                            }
                        }
                    }

                    trans.Commit();
                    res = 1;
                }
                catch (Exception e)
                {
                    res = 0;
                    trans.Rollback();
                    Debug.WriteLine("SQL UPDATE COMMAND ERROR OCCURED :  Updating Orders table" + e);
                }
                finally
                {
                    conn.Close();
                }

            }
            return res;
        }

        public static int MoveGradingOrder(ShiftProductionViewModel shiftProductionViewModel, ref int newGradingSchedulingID, DateTime mixingDate, string mixingShift)
        {
            List<CurrentCapacity> ccList = new List<CurrentCapacity>();
            int res = 0;
            int upOrder = 0;
            int rows = 0;
            decimal blockTot = 0;
            decimal gsBLdeduct = 0;
            decimal capNew = 0;
            decimal blNew = 0;
            int printCounter = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdSelectCC = new SqlCommand("SELECT * FROM CurrentCapacity " +
                                                        "WHERE prod_timetable_id = @prodTimeTableIdParam AND raw_product_id = @rawProductIdParam AND sales_id = @salesIdParam AND shift = @shiftParam AND order_type = @OrderType", conn);

                //UPDATE FROM CurrentCapacity
                SqlCommand cmdUpCC = new SqlCommand("UPDATE CurrentCapacity SET capacity_kg =@capacityKg,blocks_logs = @blockTot " +
                                                    "WHERE prod_timetable_id = @prodTimeTableIdParam AND product_capacity_id = @prodCap AND sales_id = @salesIdParam AND raw_product_id = @rawProductIdParam AND shift = @oldShift AND order_type = @Ordertype", conn);

                //UPDATE FROM Grading Scheduling
                SqlCommand cmdInsUp1 = new SqlCommand("UPDATE GradingScheduling SET blocklog_qty = @blockTot " +
                                                      "WHERE production_time_table_id = @prodTimeTableIdParam AND raw_product_id = @rawProductIdParam AND sales_id = @salesIdParam AND shift = @oldShift AND status = @statusParam AND order_type = @Ordertype", conn);

                //SELECT FROM CurrentCapacity New Date
                SqlCommand cmdSelectCCNew = new SqlCommand("SELECT * FROM CurrentCapacity " +
                                                           "WHERE prod_timetable_id = @prodTimeTableIdParam AND product_capacity_id = @ProdCapID AND raw_product_id = @rawProductIdParam AND sales_id = @salesIdParam AND shift = @shiftParam AND order_type = @OrderType", conn);

                //SELECT FROM GradingScheduling New Date
                SqlCommand cmdSelectGSNew = new SqlCommand("SELECT print_counter FROM GradingScheduling " +
                                                           "WHERE production_time_table_id = @prodTimeTableIdParam AND raw_product_id = @rawProductIdParam AND sales_id = @salesIdParam AND shift = @shiftParam AND order_type = @OrderType", conn);

                //INSTERT OR UPDATE INTO CurrentCapacity
                SqlCommand cmdInsUpCC = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM CurrentCapacity " +
                                                       "WHERE prod_timetable_id=@ProdTimeTableId AND product_capacity_id = @ProdCapacityId AND raw_product_id =@RawproductId AND shift=@Shift AND sales_id = @SalesId AND order_type=@OrderType) " +
                                                       "INSERT INTO CurrentCapacity VALUES(@ProdTimeTableId,@ProdCapacityId,@SalesId,@RawproductId,@productId,@Shift,@CapacityKg,@BlockSLogs,@OrderType) " +
                                                       "ELSE " +
                                                       "UPDATE CurrentCapacity SET capacity_kg=@CapacityKg, blocks_logs=@BlockSLogs WHERE prod_timetable_id = @ProdTimeTableId AND product_capacity_id = @ProdCapacityId AND sales_id=@SalesId AND raw_product_id=@RawproductId AND shift=@Shift AND order_type = @Ordertype", conn);

                //INSTERT OR UPDATE INTO GradingScheduling
                SqlCommand cmdInsUpGS = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM GradingScheduling WHERE " +
                                                       "production_time_table_id=@ProdTimeTableId AND raw_product_id =@RawproductId AND shift=@Shift AND sales_id = @SalesId AND order_type=@Ordertype) " +
                                                       "INSERT INTO GradingScheduling OUTPUT INSERTED.id VALUES(@ProdTimeTableId,@RawproductId,@SalesId,@BlockSLogs,@Shift,@StatusParam,@OrderType,@Active,@PrintCounter) " +
                                                       "ELSE " +
                                                       "UPDATE GradingScheduling SET blocklog_qty=@BlockSLogs, print_counter=@PrintCounter, active_order=@ActiveOrderParam, status=@StatusParam  OUTPUT 0 WHERE production_time_table_id=@ProdTimeTableId AND raw_product_id =@RawproductId AND shift=@Shift AND sales_id = @SalesId AND order_type=@Ordertype", conn);


                SqlCommand cmdDeleteGS = new SqlCommand("DELETE FROM GradingScheduling " +
                                                        "WHERE production_time_table_id = @prodTimeTableIdParam AND raw_product_id = @rawProductIdParam AND sales_id = @salesIdParam AND shift = @oldShift AND status = @statusParam AND order_type = @Ordertype", conn);

                SqlCommand cmdDeleteCC = new SqlCommand("DELETE FROM CurrentCapacity " +
                                                        "WHERE prod_timetable_id = @prodTimeTableIdParam AND product_capacity_id = @prodCap AND sales_id = @salesIdParam AND raw_product_id = @rawProductIdParam AND shift = @oldShift AND order_type = @Ordertype", conn);

                //Update mixing date and shift
                //UPDATE FROM Grading Scheduling
                SqlCommand cmdUpdateOrder = new SqlCommand("UPDATE Orders SET required_date=@RequiredDate, mixing_date = @MixingDate, mixing_shift=@MixingShift " +
                                                           "WHERE order_id = @OrderNo AND (required_date <> @RequiredDate OR mixing_date <> @MixingDate OR mixing_shift<>@MixingShift)", conn);


                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {
                    if (shiftProductionViewModel.SelectedShift != 0)
                    {
                        cmdSelectCC.Transaction = trans;
                        cmdSelectCC.Parameters.AddWithValue("@prodTimeTableIdParam", shiftProductionViewModel.RawProductionDetails.ProdTimeTableID);
                        cmdSelectCC.Parameters.AddWithValue("@salesIdParam", shiftProductionViewModel.RawProductionDetails.SalesOrderId);
                        cmdSelectCC.Parameters.AddWithValue("@rawProductIdParam", shiftProductionViewModel.RawProductionDetails.RawProduct.RawProductID);
                        cmdSelectCC.Parameters.AddWithValue("@shiftParam", shiftProductionViewModel.RawProductionDetails.Shift);
                        cmdSelectCC.Parameters.AddWithValue("@OrderType", shiftProductionViewModel.RawProductionDetails.OrderType);

                        using (SqlDataReader dr = cmdSelectCC.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                if (dr.HasRows)
                                {
                                    while (dr.Read())
                                    {
                                        CurrentCapacity cc = new CurrentCapacity();
                                        cc.ProdTimeTableID = Convert.ToInt32(dr["prod_timetable_id"]);
                                        cc.ProductCapacityID = Convert.ToInt16(dr["product_capacity_id"]);
                                        cc.SalesID = Convert.ToInt32(dr["sales_id"]);
                                        cc.RawProductID = Convert.ToInt32(dr["raw_product_id"]);
                                        cc.Shift = Convert.ToInt16(dr["shift"]);
                                        cc.CapacityKG = Convert.ToDecimal(dr["capacity_kg"]);
                                        cc.BlocksLogs = Convert.ToDecimal(dr["blocks_logs"]);
                                        cc.OrderType = Convert.ToInt16(dr["order_type"]);
                                        ccList.Add(cc);
                                    }
                                }
                            }
                        }

                        gsBLdeduct = shiftProductionViewModel.RawProductionDetails.BlockLogQty - shiftProductionViewModel.Qty;

                        if (gsBLdeduct >= 0)
                        {
                            if (gsBLdeduct <= 0)
                            {
                                //Delete if the remaining is 0
                                cmdDeleteGS.Transaction = trans;
                                cmdDeleteGS.Parameters.AddWithValue("@prodTimeTableIdParam", shiftProductionViewModel.RawProductionDetails.ProdTimeTableID);
                                cmdDeleteGS.Parameters.AddWithValue("@salesIdParam", shiftProductionViewModel.RawProductionDetails.SalesOrderId);
                                cmdDeleteGS.Parameters.AddWithValue("@rawProductIdParam", shiftProductionViewModel.RawProductionDetails.RawProduct.RawProductID);
                                cmdDeleteGS.Parameters.AddWithValue("@statusParam", "Grading");
                                cmdDeleteGS.Parameters.AddWithValue("@Ordertype", shiftProductionViewModel.RawProductionDetails.OrderType);
                                cmdDeleteGS.Parameters.AddWithValue("@oldShift", shiftProductionViewModel.RawProductionDetails.Shift);
                                cmdDeleteGS.ExecuteNonQuery();
                            }
                            else
                            {
                                //Update remaining in GradingScheduling
                                cmdInsUp1.Transaction = trans;
                                cmdInsUp1.Parameters.AddWithValue("@prodTimeTableIdParam", shiftProductionViewModel.RawProductionDetails.ProdTimeTableID);
                                cmdInsUp1.Parameters.AddWithValue("@salesIdParam", shiftProductionViewModel.RawProductionDetails.SalesOrderId);
                                cmdInsUp1.Parameters.AddWithValue("@rawProductIdParam", shiftProductionViewModel.RawProductionDetails.RawProduct.RawProductID);
                                cmdInsUp1.Parameters.AddWithValue("@blockTot", gsBLdeduct);
                                cmdInsUp1.Parameters.AddWithValue("@oldShift", shiftProductionViewModel.RawProductionDetails.Shift);
                                cmdInsUp1.Parameters.AddWithValue("@statusParam", "Grading");
                                cmdInsUp1.Parameters.AddWithValue("@Ordertype", shiftProductionViewModel.RawProductionDetails.OrderType);
                                rows = cmdInsUp1.ExecuteNonQuery();
                            }

                            List<FormulaDetails> fdList = new List<FormulaDetails>();
                            if (ccList.Count != 0)
                            {
                                foreach (var item in ccList)
                                {
                                    fdList = GetGradingWeightDependency(item.RawProductID);
                                    break;
                                }
                            }

                            foreach (var item in ccList)
                            {
                                foreach (var itemFDL in fdList)
                                {
                                    if (item.ProductCapacityID == itemFDL.CapacityID)
                                    {
                                        decimal capLeft = 0;
                                        decimal capToIns = 0;
                                        capLeft = itemFDL.GradingWeight * gsBLdeduct;
                                        if (shiftProductionViewModel.RawProductionDetails.RawProduct.RawProductType == "Kg")
                                        {
                                            capLeft = gsBLdeduct;
                                            capToIns = shiftProductionViewModel.Qty;
                                        }
                                        else
                                        {
                                            capLeft = itemFDL.GradingWeight * gsBLdeduct;
                                            capToIns = itemFDL.GradingWeight * shiftProductionViewModel.Qty;
                                        }

                                        if (gsBLdeduct <= 0)
                                        {
                                            cmdDeleteCC.Transaction = trans;
                                            cmdDeleteCC.Parameters.AddWithValue("@prodTimeTableIdParam", item.ProdTimeTableID);
                                            cmdDeleteCC.Parameters.AddWithValue("@prodCap", item.ProductCapacityID);
                                            cmdDeleteCC.Parameters.AddWithValue("@salesIdParam", item.SalesID);
                                            cmdDeleteCC.Parameters.AddWithValue("@rawProductIdParam", item.RawProductID);
                                            cmdDeleteCC.Parameters.AddWithValue("@oldShift", item.Shift);
                                            cmdDeleteCC.Parameters.AddWithValue("@Ordertype", item.OrderType);
                                            cmdDeleteCC.ExecuteNonQuery();
                                            cmdDeleteCC.Parameters.Clear();
                                        }
                                        else
                                        {
                                            //Update remaining in CurrentCapacity
                                            cmdUpCC.Transaction = trans;
                                            cmdUpCC.Parameters.AddWithValue("@prodTimeTableIdParam", item.ProdTimeTableID);
                                            cmdUpCC.Parameters.AddWithValue("@prodCap", item.ProductCapacityID);
                                            cmdUpCC.Parameters.AddWithValue("@salesIdParam", item.SalesID);
                                            cmdUpCC.Parameters.AddWithValue("@rawProductIdParam", item.RawProductID);
                                            cmdUpCC.Parameters.AddWithValue("@oldShift", item.Shift);
                                            cmdUpCC.Parameters.AddWithValue("@capacityKg", capLeft);
                                            cmdUpCC.Parameters.AddWithValue("@blockTot", gsBLdeduct);
                                            cmdUpCC.Parameters.AddWithValue("@Ordertype", item.OrderType);
                                            rows = cmdUpCC.ExecuteNonQuery();
                                            cmdUpCC.Parameters.Clear();
                                        }
                                        //Selecting records from Current Capacity
                                        cmdSelectCCNew.Transaction = trans;
                                        cmdSelectCCNew.Parameters.AddWithValue("@prodTimeTableIdParam", shiftProductionViewModel.NewProdTimeTableID);
                                        cmdSelectCCNew.Parameters.AddWithValue("@ProdCapID", item.ProductCapacityID);
                                        cmdSelectCCNew.Parameters.AddWithValue("@salesIdParam", item.SalesID);
                                        cmdSelectCCNew.Parameters.AddWithValue("@rawProductIdParam", item.RawProductID);
                                        cmdSelectCCNew.Parameters.AddWithValue("@shiftParam", shiftProductionViewModel.SelectedShift);
                                        cmdSelectCCNew.Parameters.AddWithValue("@OrderType", item.OrderType);

                                        capNew = 0;
                                        blNew = 0;
                                        using (SqlDataReader dr = cmdSelectCCNew.ExecuteReader())
                                        {
                                            if (dr != null)
                                            {
                                                if (dr.HasRows)
                                                {
                                                    while (dr.Read())
                                                    {
                                                        capNew += Convert.ToDecimal(dr["capacity_kg"]);
                                                        blNew += Convert.ToDecimal(dr["blocks_logs"]);
                                                    }
                                                }
                                            }
                                            capToIns += capNew;
                                            blNew += shiftProductionViewModel.Qty;
                                        }
                                        cmdSelectCCNew.Parameters.Clear();

                                        //Insert new qty into in CurrentCapacity
                                        cmdInsUpCC.Transaction = trans;
                                        cmdInsUpCC.Parameters.AddWithValue("@ProdTimeTableId", shiftProductionViewModel.NewProdTimeTableID);
                                        cmdInsUpCC.Parameters.AddWithValue("@ProdCapacityId", item.ProductCapacityID);
                                        cmdInsUpCC.Parameters.AddWithValue("@SalesId", item.SalesID);
                                        cmdInsUpCC.Parameters.AddWithValue("@RawproductId", item.RawProductID);
                                        cmdInsUpCC.Parameters.AddWithValue("@productId", item.ProductID);
                                        cmdInsUpCC.Parameters.AddWithValue("@Shift", shiftProductionViewModel.SelectedShift);
                                        cmdInsUpCC.Parameters.AddWithValue("@CapacityKg", capToIns);
                                        cmdInsUpCC.Parameters.AddWithValue("@BlockSLogs", blNew);
                                        cmdInsUpCC.Parameters.AddWithValue("@OrderType", item.OrderType);
                                        cmdInsUpCC.ExecuteNonQuery();
                                        cmdInsUpCC.Parameters.Clear();

                                        break;
                                    }
                                }
                            }
                            //Selecting records from GradingScheduling
                            cmdSelectGSNew.Transaction = trans;
                            cmdSelectGSNew.Parameters.AddWithValue("@prodTimeTableIdParam", shiftProductionViewModel.NewProdTimeTableID);
                            cmdSelectGSNew.Parameters.AddWithValue("@salesIdParam", shiftProductionViewModel.RawProductionDetails.SalesOrderId);
                            cmdSelectGSNew.Parameters.AddWithValue("@rawProductIdParam", shiftProductionViewModel.RawProductionDetails.RawProduct.RawProductID);
                            cmdSelectGSNew.Parameters.AddWithValue("@shiftParam", shiftProductionViewModel.SelectedShift);
                            cmdSelectGSNew.Parameters.AddWithValue("@OrderType", shiftProductionViewModel.RawProductionDetails.OrderType);

                            using (SqlDataReader dr = cmdSelectGSNew.ExecuteReader())
                            {
                                if (dr != null)
                                {
                                    if (dr.HasRows)
                                    {
                                        while (dr.Read())
                                        {
                                            printCounter += Convert.ToInt32(dr["print_counter"]);
                                        }
                                    }
                                }
                            }
                            cmdSelectGSNew.Parameters.Clear();

                            //Inserting records into GradingScheduling
                            cmdInsUpGS.Transaction = trans;
                            cmdInsUpGS.Parameters.AddWithValue("@ProdTimeTableId", shiftProductionViewModel.NewProdTimeTableID);
                            cmdInsUpGS.Parameters.AddWithValue("@RawproductId", shiftProductionViewModel.RawProductionDetails.RawProduct.RawProductID);
                            cmdInsUpGS.Parameters.AddWithValue("@SalesId", shiftProductionViewModel.RawProductionDetails.SalesOrderId);
                            cmdInsUpGS.Parameters.AddWithValue("@Shift", shiftProductionViewModel.SelectedShift);
                            cmdInsUpGS.Parameters.AddWithValue("@BlockSLogs", blNew);
                            cmdInsUpGS.Parameters.AddWithValue("@StatusParam", "Grading");
                            cmdInsUpGS.Parameters.AddWithValue("@OrderType", shiftProductionViewModel.RawProductionDetails.OrderType);
                            if (shiftProductionViewModel.Qty == shiftProductionViewModel.RawProductionDetails.BlockLogQty)
                            {
                                cmdInsUpGS.Parameters.AddWithValue("@PrintCounter", printCounter + shiftProductionViewModel.RawProductionDetails.PrintCounter);
                                cmdInsUpGS.Parameters.AddWithValue("@Active", shiftProductionViewModel.RawProductionDetails.ActiveOrder);
                            }
                            else
                            {
                                cmdInsUpGS.Parameters.AddWithValue("@PrintCounter", printCounter);
                                cmdInsUpGS.Parameters.AddWithValue("@Active", false);
                            }
                            cmdInsUpGS.Parameters.AddWithValue("@ActiveOrderParam", shiftProductionViewModel.RawProductionDetails.ActiveOrder);
                            newGradingSchedulingID = (Int32)cmdInsUpGS.ExecuteScalar();
                        }
                    }
                        cmdUpdateOrder.Transaction = trans;
                        cmdUpdateOrder.Parameters.AddWithValue("@OrderNo", shiftProductionViewModel.RawProductionDetails.SalesOrderId);
                        cmdUpdateOrder.Parameters.AddWithValue("@RequiredDate", shiftProductionViewModel.SelectedDate.Date);
                        cmdUpdateOrder.Parameters.AddWithValue("@MixingDate", mixingDate.Date);
                        cmdUpdateOrder.Parameters.AddWithValue("@MixingShift", mixingShift);
                        upOrder = cmdUpdateOrder.ExecuteNonQuery();



                        if (blNew > 0 || upOrder > 0)
                    {
                        res = 1;
                        trans.Commit();
                    }
                    else
                    {
                        trans.Rollback();
                        res = -1;
                    }
                }
                catch (Exception e)
                {
                    res = 0;
                    trans.Rollback();
                    Debug.WriteLine("SQL UPDATE COMMAND ERROR OCCURED :  Updating Orders table" + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return res;
        }

        private static List<FormulaDetails> GetGradingWeightDependency(int id)
        {

            List<FormulaDetails> depList = new List<FormulaDetails>();

            List<Formulas> fList = DBAccess.GetFormulaDetailsByRawProdID(id);
            foreach (var item in fList)
            {
                if (item.ProductCapacity1 != 0 && item.GradingWeight1 != 0)
                {
                    depList.Add(new FormulaDetails() { CapacityID = item.ProductCapacity1, GradingWeight = item.GradingWeight1 });
                }

                if (item.ProductCapacity2 != 0 && item.GradingWeight2 != 0)
                {
                    depList.Add(new FormulaDetails() { CapacityID = item.ProductCapacity2, GradingWeight = item.GradingWeight2 });
                }
            }
            return depList;
        }


        //public static List<string> MoveRowProduction(ShiftProductionViewModel shiftProductionViewModel, OrderStatus prderStatus)
        //{
        //    List<string> resultList = null;
        //    int rows = 0;
        //    decimal blockTot = 0;
        //    int oDate = shiftProductionViewModel.OldProductionTimeTableID;
        //    int nDate = shiftProductionViewModel.ProductionTimeTableID;


        //    using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
        //    {

        //        SqlCommand cmdSelect = new SqlCommand("SELECT blocklog_qty FROM GradingScheduling " +
        //                                              "WHERE production_time_table_id = @prodTimeTableIdParam AND  raw_product_id = @rawProductIdParam AND sales_id = @salesIdParam AND shift = @shiftParam AND status = @statusParam", conn);
        //        //If exists
        //        SqlCommand cmdInsUp1 = new SqlCommand("UPDATE GradingScheduling SET blocklog_qty = @blockTot, production_time_table_id = @newDateParam, shift = @newShift " +
        //                                              "WHERE raw_product_id = @rawProductIdParam AND sales_id = @salesIdParam AND shift = @newShift AND production_time_table_id = @newDateParam AND status = @statusParam", conn);
        //        //If does not exist
        //        SqlCommand cmdInsUp2 = new SqlCommand("UPDATE GradingScheduling SET blocklog_qty = @blockTot, production_time_table_id = @newDateParam, shift = @newShift " +
        //                                              "WHERE raw_product_id = @rawProductIdParam AND sales_id = @salesIdParam AND shift = @oldShift AND production_time_table_id = @oldDateParam AND status = @statusParam", conn);

        //        SqlCommand cmdDelete = new SqlCommand("DELETE FROM GradingScheduling WHERE production_time_table_id = @oldProdTimeTableId AND sales_id = @salesIdParam AND shift = @oldShift", conn);

        //        conn.Open();
        //        try
        //        {                  
        //            cmdSelect.Parameters.AddWithValue("@salesIdParam", shiftProductionViewModel.RawProductionDetails.RawProduct.SalesID);
        //            cmdSelect.Parameters.AddWithValue("@rawProductIdParam", shiftProductionViewModel.RawProductionDetails.RawProduct.RawProductID);
        //            cmdSelect.Parameters.AddWithValue("@prodTimeTableIdParam", nDate);
        //            cmdSelect.Parameters.AddWithValue("@shiftParam", shiftProductionViewModel.SelectedShift);
        //            cmdSelect.Parameters.AddWithValue("@statusParam", prderStatus.ToString());

        //            using (SqlDataReader dr = cmdSelect.ExecuteReader())
        //            {
        //                if (dr != null)
        //                {
        //                    if (dr.HasRows)
        //                    {
        //                        while (dr.Read())
        //                        {                                 
        //                           blockTot = shiftProductionViewModel.RawProductionDetails.BlockLogQty + Convert.ToDecimal(dr["blocklog_qty"]);     
        //                        }
        //                    }
        //                    else
        //                    {
        //                        blockTot = 0;
        //                    }
        //                }
        //            }

        //            if (blockTot != 0)
        //            {
        //                cmdInsUp1.Parameters.AddWithValue("@salesIdParam", shiftProductionViewModel.RawProductionDetails.RawProduct.SalesID);
        //                cmdInsUp1.Parameters.AddWithValue("@rawProductIdParam", shiftProductionViewModel.RawProductionDetails.RawProduct.RawProductID);
        //                cmdInsUp1.Parameters.AddWithValue("@blockTot", blockTot);
        //                cmdInsUp1.Parameters.AddWithValue("@newDateParam", nDate);
        //                cmdInsUp1.Parameters.AddWithValue("@newShift", shiftProductionViewModel.SelectedShift);
        //                cmdInsUp1.Parameters.AddWithValue("@statusParam", prderStatus.ToString());
        //                rows = cmdInsUp1.ExecuteNonQuery();

        //                cmdDelete.Parameters.AddWithValue("@salesIdParam", shiftProductionViewModel.RawProductionDetails.RawProduct.SalesID);
        //                cmdDelete.Parameters.AddWithValue("@oldShift", shiftProductionViewModel.RawProductionDetails.Shift);
        //                cmdDelete.Parameters.AddWithValue("@oldProdTimeTableId", oDate);
        //                int rows2 = cmdDelete.ExecuteNonQuery();
        //                if (rows2 > 0)
        //                {
        //                    resultList = new List<string>();
        //                    resultList.Add(shiftProductionViewModel.RawProductionDetails.RawProduct.Description);
        //                    resultList.Add(shiftProductionViewModel.SelectedShift.ToString());
        //                    resultList.Add("NewDate");
        //                    resultList.Add(shiftProductionViewModel.Qty.ToString());
        //                    resultList.Add(shiftProductionViewModel.RawProductionDetails.RawProduct.RawProductType);
        //                }
        //                else
        //                {
        //                    resultList = null;
        //                }
        //            }
        //            else
        //            {
        //                cmdInsUp2.Parameters.AddWithValue("@salesIdParam", shiftProductionViewModel.RawProductionDetails.RawProduct.SalesID);
        //                cmdInsUp2.Parameters.AddWithValue("@rawProductIdParam", shiftProductionViewModel.RawProductionDetails.RawProduct.RawProductID);
        //                cmdInsUp2.Parameters.AddWithValue("@blockTot", shiftProductionViewModel.RawProductionDetails.BlockLogQty);
        //                cmdInsUp2.Parameters.AddWithValue("@newDateParam", nDate);
        //                cmdInsUp2.Parameters.AddWithValue("@oldDateParam", oDate);
        //                cmdInsUp2.Parameters.AddWithValue("@newShift", shiftProductionViewModel.SelectedShift);
        //                cmdInsUp2.Parameters.AddWithValue("@oldShift", shiftProductionViewModel.RawProductionDetails.Shift);
        //                cmdInsUp2.Parameters.AddWithValue("@statusParam", prderStatus.ToString());
        //                rows = cmdInsUp2.ExecuteNonQuery();

        //                if (rows != 0)
        //                {
        //                    resultList = new List<string>();
        //                    resultList.Add(shiftProductionViewModel.RawProductionDetails.RawProduct.Description);
        //                    resultList.Add(shiftProductionViewModel.SelectedShift.ToString());
        //                    resultList.Add("NewDate");
        //                    resultList.Add(shiftProductionViewModel.Qty.ToString());
        //                    resultList.Add(shiftProductionViewModel.RawProductionDetails.RawProduct.RawProductType);
        //                }
        //                else
        //                {
        //                    resultList = null;
        //                }

        //            }
        //        }
        //        catch (Exception e)
        //        {
        //            Debug.WriteLine("SQL UPDATE COMMAND ERROR OCCURED :  Updating Orders table" + e);
        //        }
        //        finally
        //        {
        //            conn.Close();
        //        }

        //    }

        //    return resultList;
        //}



        //public static List<string> MoveRowProduction(ShiftProductionViewModel shiftProductionViewModel)
        //{
        //    List<string> resultList = null;
        //    int rows = 0;
        //    decimal blockTot = 0;
        //    decimal tileTot=0;
        //    decimal thickness = 0;
        //    DateTime oDate = Convert.ToDateTime(shiftProductionViewModel.RawProductionDetails.ProductionDate);
        //    DateTime nDate = Convert.ToDateTime(shiftProductionViewModel.CurrentDate);
        //    string oldDate = oDate.ToString("yyyy-MM-dd");
        //    string newDate = nDate.ToString("yyyy-MM-dd");


        //    using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
        //    {

        //        SqlCommand cmdSelect = new SqlCommand("SELECT qty,blocklog_qty,thickness FROM RawProductionDetails " +
        //                                              "WHERE raw_product_id = @rawProdIdParam AND thickness = @thickness AND shift = @newShift AND production_date=@newDateParam", conn);

        //        SqlCommand cmdInsUp1 = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM RawProductionDetails WHERE raw_product_id = @rawProdIdParam AND thickness = @thickness AND shift = @newShift AND production_date=@newDateParam) " +
        //                                              "Insert INTO RawProductionDetails VALUES(@rawProdIdParam,@tileTot,@blockTot,@thickness,@newDateParam,@newShift) " +
        //                                              "ELSE " +
        //                                              "UPDATE RawProductionDetails SET qty = @tileTot,blocklog_qty=@blockTot,thickness=@thickness, production_date = @newDateParam, shift = @newShift " +
        //                                              "WHERE raw_product_id = @rawProdIdParam AND thickness = @thickness AND shift = @newShift AND production_date=@newDateParam", conn);
        //        SqlCommand cmdDelete = new SqlCommand("DELETE FROM RawProductionDetails WHERE raw_product_id = @rawProdIdParam AND thickness = @thickness AND shift = @oldShift AND production_date = @oldDateParam", conn);

        //            conn.Open();
        //            try
        //            {
        //                cmdSelect.Parameters.AddWithValue("@rawProdIdParam", shiftProductionViewModel.RawProductionDetails.RawProduct.RawProductID);
        //                cmdSelect.Parameters.AddWithValue("@oldBlock", shiftProductionViewModel.RawProductionDetails.BlockLogQty);
        //                cmdSelect.Parameters.AddWithValue("@newShift", shiftProductionViewModel.SelectedShift);
        //                cmdSelect.Parameters.AddWithValue("@thickness", shiftProductionViewModel.RawProductionDetails.Thickness);
        //                cmdSelect.Parameters.AddWithValue("@newDateParam", newDate);

        //                using (SqlDataReader dr = cmdSelect.ExecuteReader())
        //                {
        //                    if (dr != null)
        //                    {
        //                        if (dr.HasRows)
        //                        {
        //                            while (dr.Read())
        //                            {                                      

        //                                thickness = Convert.ToDecimal(dr["thickness"]);
        //                                blockTot = shiftProductionViewModel.RawProductionDetails.BlockLogQty + Convert.ToDecimal(dr["blocklog_qty"]);
        //                                tileTot = shiftProductionViewModel.RawProductionDetails.Qty + Convert.ToDecimal(dr["qty"]);                                       
        //                            }                                 
        //                        }
        //                        else
        //                        {
        //                            blockTot = 0;
        //                            tileTot = 0;
        //                        }                               
        //                    }
        //                }

        //                if (blockTot != 0 && tileTot != 0)
        //                {
        //                    cmdInsUp1.Parameters.AddWithValue("@rawProdIdParam", shiftProductionViewModel.RawProductionDetails.RawProduct.RawProductID);
        //                    cmdInsUp1.Parameters.AddWithValue("@blockTot", blockTot);
        //                    cmdInsUp1.Parameters.AddWithValue("@tileTot", tileTot);
        //                    cmdInsUp1.Parameters.AddWithValue("@thickness", shiftProductionViewModel.RawProductionDetails.Thickness);
        //                    cmdInsUp1.Parameters.AddWithValue("@newDateParam", newDate);
        //                    cmdInsUp1.Parameters.AddWithValue("@newShift", shiftProductionViewModel.SelectedShift);
        //                }
        //                else
        //                {
        //                    cmdInsUp1.Parameters.AddWithValue("@rawProdIdParam", shiftProductionViewModel.RawProductionDetails.RawProduct.RawProductID);
        //                    cmdInsUp1.Parameters.AddWithValue("@blockTot", shiftProductionViewModel.RawProductionDetails.BlockLogQty);
        //                    cmdInsUp1.Parameters.AddWithValue("@tileTot", shiftProductionViewModel.RawProductionDetails.Qty);
        //                    cmdInsUp1.Parameters.AddWithValue("@newShift", shiftProductionViewModel.SelectedShift);
        //                    cmdInsUp1.Parameters.AddWithValue("@thickness", shiftProductionViewModel.RawProductionDetails.Thickness);
        //                    cmdInsUp1.Parameters.AddWithValue("@newDateParam", newDate);
        //                }
        //                rows = cmdInsUp1.ExecuteNonQuery();
        //                if (rows > 0)
        //                {
        //                    cmdDelete.Parameters.AddWithValue("@rawProdIdParam", shiftProductionViewModel.RawProductionDetails.RawProduct.RawProductID);
        //                    cmdDelete.Parameters.AddWithValue("@oldShift", shiftProductionViewModel.RawProductionDetails.Shift);
        //                    cmdDelete.Parameters.AddWithValue("@thickness", shiftProductionViewModel.RawProductionDetails.Thickness);
        //                    cmdDelete.Parameters.AddWithValue("@oldDateParam", oldDate);
        //                    int rows2 = cmdDelete.ExecuteNonQuery();
        //                    if (rows2 > 0)
        //                    {
        //                        Console.WriteLine("Rows deleted");
        //                    }
        //                }



        //            }
        //            catch (Exception e)
        //            {
        //                Debug.WriteLine("SQL UPDATE COMMAND ERROR OCCURED :  Updating Orders table" + e);
        //            }
        //            finally
        //            {
        //                conn.Close();
        //            }

        //    }

        //    return resultList;
        //}

        public static int UpdateRowProduction(List<CurrentCapacity> newCurrCap, int newTimeTableId, int newShift, int oldTimeTableId, int oldShift)
        {
            int result = 0;
            int oUpdate = 0;
            decimal capacityKg1 = 0;
            decimal blocklog1 = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdSelect1 = new SqlCommand("SELECT capacity_kg, blocks_logs FROM CurrentCapacity " +
                                                       "WHERE prod_timetable_id = @prodTimeTableIdParam AND product_capacity_id=@prodCapIdparam AND sales_id = @salesIdParam AND raw_product_id = @rawProductIdParam AND shift = @shiftParam", conn);

                SqlCommand cmdSelect2 = new SqlCommand("SELECT capacity_kg, blocks_logs FROM CurrentCapacity " +
                                                       "WHERE prod_timetable_id = @OldprodTimeTableIdParam AND product_capacity_id=@prodCapIdparam AND sales_id = @salesIdParam AND raw_product_id = @rawProductIdParam AND shift = @OldshiftParam", conn);


                SqlCommand cmdInsUp1 = new SqlCommand("UPDATE CurrentCapacity SET capacity_kg=@CapacityKg, blocks_logs=@BlockSLogs " +
                                                      "WHERE prod_timetable_id = @ProdTimeTableId AND product_capacity_id = @ProdCapacityId AND sales_id=@SalesId AND raw_product_id=@RawproductId AND shift=@Shift", conn);

                SqlCommand cmdInsUp2 = new SqlCommand("UPDATE CurrentCapacity SET capacity_kg=@CapacityKg, blocks_logs=@BlockSLogs " +
                                                      "WHERE prod_timetable_id = @OldProdTimeTableId AND product_capacity_id = @ProdCapacityId AND sales_id = @SalesId AND raw_product_id=@RawproductId AND shift=@OldShift", conn);


                SqlCommand cmdInsert = new SqlCommand("INSERT INTO CurrentCapacity(prod_timetable_id, product_capacity_id, sales_id, raw_product_id, product_id,shift,capacity_kg,blocks_logs) " +
                                                      "VALUES (@prodTimeTableIdParam,@prodCapIdparam,@salesIdParam,@RawProdIdParam,@ProductIdParam,@ShiftParam,@CapacityKgParam,@BlockLogsParam)", conn);

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {
                    foreach (var item in newCurrCap)
                    {
                        decimal oldCap = 0;
                        decimal oldBlksLogs = 0;
                        capacityKg1 = 0;
                        blocklog1 = 0;
                        cmdSelect1.Transaction = trans;
                        cmdSelect1.Parameters.AddWithValue("@prodTimeTableIdParam", newTimeTableId);
                        cmdSelect1.Parameters.AddWithValue("@prodCapIdparam", item.ProductCapacityID);
                        cmdSelect1.Parameters.AddWithValue("@salesIdParam", item.SalesID);
                        cmdSelect1.Parameters.AddWithValue("@rawProductIdParam", item.RawProductID);
                        cmdSelect1.Parameters.AddWithValue("@shiftParam", newShift);

                        using (SqlDataReader dr = cmdSelect1.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                if (dr.HasRows)
                                {
                                    while (dr.Read())
                                    {
                                        capacityKg1 = item.CapacityKG + Convert.ToDecimal(dr["capacity_kg"]);
                                        blocklog1 = item.BlocksLogs + Convert.ToDecimal(dr["blocks_logs"]);
                                    }
                                }
                                else
                                {
                                    capacityKg1 = 0;
                                    blocklog1 = 0;
                                }
                            }
                        }

                        cmdSelect1.Parameters.Clear();

                        if (capacityKg1 != 0)
                        {
                            //New
                            cmdInsUp1.Transaction = trans;
                            cmdInsUp1.Parameters.AddWithValue("@ProdTimeTableId", item.ProdTimeTableID);
                            cmdInsUp1.Parameters.AddWithValue("@ProdCapacityId", item.ProductCapacityID);
                            cmdInsUp1.Parameters.AddWithValue("@SalesId", item.SalesID);
                            cmdInsUp1.Parameters.AddWithValue("@RawproductId", item.RawProductID);
                            cmdInsUp1.Parameters.AddWithValue("@productId", item.ProductID);
                            cmdInsUp1.Parameters.AddWithValue("@Shift", item.Shift);
                            cmdInsUp1.Parameters.AddWithValue("@CapacityKg", capacityKg1);
                            cmdInsUp1.Parameters.AddWithValue("@BlockSLogs", blocklog1);
                            result = cmdInsUp1.ExecuteNonQuery();
                            cmdInsUp1.Parameters.Clear();
                        }
                        else
                        {
                            cmdInsert.Transaction = trans;
                            cmdInsert.Parameters.AddWithValue("@prodTimeTableIdParam", item.ProdTimeTableID);
                            cmdInsert.Parameters.AddWithValue("@prodCapIdparam", item.ProductCapacityID);
                            cmdInsert.Parameters.AddWithValue("@salesIdParam", item.SalesID);
                            cmdInsert.Parameters.AddWithValue("@RawProdIdParam", item.RawProductID);
                            cmdInsert.Parameters.AddWithValue("@ProductIdParam", item.ProductID);
                            cmdInsert.Parameters.AddWithValue("@ShiftParam", item.Shift);
                            cmdInsert.Parameters.AddWithValue("@CapacityKgParam", item.CapacityKG);
                            cmdInsert.Parameters.AddWithValue("@BlockLogsParam", item.BlocksLogs);
                            result = cmdInsert.ExecuteNonQuery();
                            cmdInsert.Parameters.Clear();
                        }

                        if (result != 0)
                        {
                            cmdSelect2.Transaction = trans;
                            cmdSelect2.Parameters.AddWithValue("@OldprodTimeTableIdParam", oldTimeTableId);
                            cmdSelect2.Parameters.AddWithValue("@prodCapIdparam", item.ProductCapacityID);
                            cmdSelect2.Parameters.AddWithValue("@salesIdParam", item.SalesID);
                            cmdSelect2.Parameters.AddWithValue("@rawProductIdParam", item.RawProductID);
                            cmdSelect2.Parameters.AddWithValue("@OldshiftParam", oldShift);

                            using (SqlDataReader dr = cmdSelect2.ExecuteReader())
                            {
                                if (dr != null)
                                {
                                    if (dr.HasRows)
                                    {
                                        while (dr.Read())
                                        {
                                            oldCap = Convert.ToDecimal(dr["capacity_kg"]);
                                            oldBlksLogs = Convert.ToDecimal(dr["blocks_logs"]);
                                        }
                                    }
                                }
                            }

                            cmdSelect2.Parameters.Clear();
                            //Old
                            cmdInsUp2.Transaction = trans;
                            cmdInsUp2.Parameters.AddWithValue("@OldProdTimeTableId", oldTimeTableId);
                            cmdInsUp2.Parameters.AddWithValue("@ProdCapacityId", item.ProductCapacityID);
                            cmdInsUp2.Parameters.AddWithValue("@SalesId", item.SalesID);
                            cmdInsUp2.Parameters.AddWithValue("@RawproductId", item.RawProductID);
                            cmdInsUp2.Parameters.AddWithValue("@productId", item.ProductID);
                            cmdInsUp2.Parameters.AddWithValue("@OldShift", oldShift);
                            cmdInsUp2.Parameters.AddWithValue("@CapacityKg", oldCap - item.CapacityKG);
                            cmdInsUp2.Parameters.AddWithValue("@BlockSLogs", oldBlksLogs - item.BlocksLogs);

                            oUpdate = cmdInsUp2.ExecuteNonQuery();
                            cmdInsUp2.Parameters.Clear();
                        }
                    }
                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("SQL UPDATE COMMAND ERROR OCCURED :  Updating Orders table" + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return oUpdate;
        }


        public static List<string> InsertRowProduction(ShiftProductionViewModel shiftProductionViewModel, OrderStatus orderStatus)
        {
            List<string> resultList = null;
            int rows = 0;
            decimal blockTot = 0;

            int oldDate = shiftProductionViewModel.OldProductionTimeTableID;
            int newDate = shiftProductionViewModel.NewProdTimeTableID;

            decimal origBlks = shiftProductionViewModel.RawProductionDetails.BlockLogQty;
            decimal newBlks = shiftProductionViewModel.Qty;
            decimal leftOvertBlks = origBlks - newBlks;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdSelect = new SqlCommand("SELECT blocklog_qty FROM GradingScheduling " +
                                                      "WHERE production_time_table_id = @newProdTimeTableIdParam AND raw_product_id = @rawProductIdParam AND sales_id = @salesIdParam AND shift = @newShift AND status =@statusParam", conn);

                //If exists
                SqlCommand cmdInsUp1 = new SqlCommand("UPDATE GradingScheduling SET blocklog_qty = @blockTot, production_time_table_id = @newProdTimeTableIdParam, shift = @newShift " +
                                                      "WHERE production_time_table_id = @newProdTimeTableIdParam AND raw_product_id = @rawProductIdParam AND sales_id = @salesIdParam AND shift = @newShift AND status =@statusParam", conn);
                //If does not exist
                SqlCommand cmdInsUp2 = new SqlCommand("UPDATE GradingScheduling SET blocklog_qty = @blockTot " +
                                                      "WHERE production_time_table_id = @oldProdTimeTableIdParam AND raw_product_id = @rawProductIdParam AND sales_id = @salesIdParam AND shift = @oldShift AND status =@statusParam", conn);

                SqlCommand cmdInsert = new SqlCommand("INSERT INTO GradingScheduling(production_time_table_id,raw_product_id,sales_id,blocklog_qty,shift,status,active_order) VALUES " +
                                                      "(@newProdTimeTableIdParam,@rawProductIdParam,@salesIdParam,@newBlock,@newShift,@statusParam,@Active)", conn);
                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {

                    cmdSelect.Transaction = trans;
                    cmdSelect.Parameters.AddWithValue("@salesIdParam", shiftProductionViewModel.RawProductionDetails.RawProduct.SalesID);
                    cmdSelect.Parameters.AddWithValue("@rawProductIdParam", shiftProductionViewModel.RawProductionDetails.RawProduct.RawProductID);
                    cmdSelect.Parameters.AddWithValue("@oldBlock", shiftProductionViewModel.RawProductionDetails.BlockLogQty);
                    cmdSelect.Parameters.AddWithValue("@newShift", shiftProductionViewModel.SelectedShift);
                    cmdSelect.Parameters.AddWithValue("@newProdTimeTableIdParam", newDate);
                    cmdSelect.Parameters.AddWithValue("@statusParam", orderStatus.ToString());

                    using (SqlDataReader dr = cmdSelect.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    blockTot = newBlks + Convert.ToDecimal(dr["blocklog_qty"]);
                                }
                            }
                            else
                            {
                                blockTot = 0;
                            }
                        }
                    }

                    if (blockTot != 0)
                    {
                        cmdInsUp1.Transaction = trans;
                        cmdInsUp1.Parameters.AddWithValue("@salesIdParam", shiftProductionViewModel.RawProductionDetails.RawProduct.SalesID);
                        cmdInsUp1.Parameters.AddWithValue("@rawProductIdParam", shiftProductionViewModel.RawProductionDetails.RawProduct.RawProductID);
                        cmdInsUp1.Parameters.AddWithValue("@blockTot", blockTot);
                        cmdInsUp1.Parameters.AddWithValue("@newProdTimeTableIdParam", newDate);
                        cmdInsUp1.Parameters.AddWithValue("@newShift", shiftProductionViewModel.SelectedShift);
                        cmdInsUp1.Parameters.AddWithValue("@statusParam", orderStatus.ToString());

                        rows = cmdInsUp1.ExecuteNonQuery();
                        if (rows > 0)
                        {
                            cmdInsUp2.Transaction = trans;
                            cmdInsUp2.Parameters.AddWithValue("@salesIdParam", shiftProductionViewModel.RawProductionDetails.RawProduct.SalesID);
                            cmdInsUp2.Parameters.AddWithValue("@rawProductIdParam", shiftProductionViewModel.RawProductionDetails.RawProduct.RawProductID);
                            cmdInsUp2.Parameters.AddWithValue("@blockTot", leftOvertBlks);
                            cmdInsUp2.Parameters.AddWithValue("@oldProdTimeTableIdParam", oldDate);
                            cmdInsUp2.Parameters.AddWithValue("@oldShift", shiftProductionViewModel.RawProductionDetails.Shift);
                            cmdInsUp2.Parameters.AddWithValue("@statusParam", orderStatus.ToString());
                            int rows2 = cmdInsUp2.ExecuteNonQuery();
                            if (rows2 != 0)
                            {
                                resultList = new List<string>();
                                resultList.Add(shiftProductionViewModel.RawProductionDetails.RawProduct.Description);
                                resultList.Add(shiftProductionViewModel.SelectedShift.ToString());
                                resultList.Add("New Date");
                                resultList.Add(shiftProductionViewModel.Qty.ToString());
                                resultList.Add(shiftProductionViewModel.RawProductionDetails.RawProduct.RawProductType);
                            }
                            else
                            {
                                resultList = null;
                            }
                        }
                    }
                    else
                    {
                        cmdInsert.Transaction = trans;
                        cmdInsert.Parameters.AddWithValue("@salesIdParam", shiftProductionViewModel.RawProductionDetails.RawProduct.SalesID);
                        cmdInsert.Parameters.AddWithValue("@rawProductIdParam", shiftProductionViewModel.RawProductionDetails.RawProduct.RawProductID);
                        cmdInsert.Parameters.AddWithValue("@newTile", shiftProductionViewModel.Qty);
                        cmdInsert.Parameters.AddWithValue("@newBlock", shiftProductionViewModel.Qty);
                        cmdInsert.Parameters.AddWithValue("@newProdTimeTableIdParam", newDate);
                        cmdInsert.Parameters.AddWithValue("@newShift", shiftProductionViewModel.SelectedShift);
                        cmdInsert.Parameters.AddWithValue("@statusParam", orderStatus.ToString());
                        cmdInsert.Parameters.AddWithValue("@Active", false);
                        int rows2 = cmdInsert.ExecuteNonQuery();

                        cmdInsUp2.Transaction = trans;
                        cmdInsUp2.Parameters.AddWithValue("@salesIdParam", shiftProductionViewModel.RawProductionDetails.RawProduct.SalesID);
                        cmdInsUp2.Parameters.AddWithValue("@rawProductIdParam", shiftProductionViewModel.RawProductionDetails.RawProduct.RawProductID);
                        cmdInsUp2.Parameters.AddWithValue("@blockTot", leftOvertBlks);
                        cmdInsUp2.Parameters.AddWithValue("@oldProdTimeTableIdParam", oldDate);
                        cmdInsUp2.Parameters.AddWithValue("@oldShift", shiftProductionViewModel.RawProductionDetails.Shift);
                        cmdInsUp2.Parameters.AddWithValue("@statusParam", orderStatus.ToString());
                        int rows3 = cmdInsUp2.ExecuteNonQuery();

                        if (rows3 > 0)
                        {
                            resultList = new List<string>();
                            resultList.Add(shiftProductionViewModel.RawProductionDetails.RawProduct.Description);
                            resultList.Add(shiftProductionViewModel.SelectedShift.ToString());
                            resultList.Add("New Date");
                            resultList.Add(shiftProductionViewModel.Qty.ToString());
                            resultList.Add(shiftProductionViewModel.RawProductionDetails.RawProduct.RawProductType);
                        }
                        else
                        {
                            resultList = null;
                        }

                    }

                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("SQL UPDATE COMMAND ERROR OCCURED :  Updating Orders table" + e);
                }
                finally
                {
                    conn.Close();
                }

            }

            return resultList;


        }

        /********************ORDER PRODUCTION********************/

        public static int AddProductionOrder(ObservableCollection<ProductionDetails> productionDetails)
        {
            int result = 0;

            int rowCount = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                Int32 newProdID = 0;
                SqlCommand cmdInsertOrderProd = new SqlCommand("INSERT INTO OrderProduction(customer_id, required_date, order_created_date) OUTPUT INSERTED.id VALUES (@customer_id,@required_date,@order_created_date)", conn);
                SqlCommand cmdInsertOrderProdDetails = new SqlCommand("INSERT INTO OrderProductionDetails(order_production_id, product_id, qty) VALUES (@order_production_id,@product_id,@qty)", conn);
                SqlCommand cmdInsertRawProduction = new SqlCommand("INSERT INTO RawProduction(order_production_id, product_id, raw_qty,shift) VALUES (@order_production_id,@product_id,@raw_qty,@shift)", conn);


                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {
                    foreach (var item in productionDetails)
                    {
                        cmdInsertOrderProd.Transaction = trans;
                        cmdInsertOrderProd.Parameters.AddWithValue("@customer_id", item.Customer.CustomerId);
                        cmdInsertOrderProd.Parameters.AddWithValue("@required_date", item.RequiredDate);
                        cmdInsertOrderProd.Parameters.AddWithValue("@order_created_date", item.OrderCreatedDate);
                        newProdID = (Int32)cmdInsertOrderProd.ExecuteScalar();
                        cmdInsertOrderProd.Parameters.Clear();

                        for (int i = 0; i < item.ProductDetails.Count; i++)
                        {
                            cmdInsertOrderProdDetails.Transaction = trans;
                            cmdInsertOrderProdDetails.Parameters.AddWithValue("@order_production_id", newProdID);
                            cmdInsertOrderProdDetails.Parameters.AddWithValue("@product_id", item.ProductDetails[i].Product.ProductID);
                            cmdInsertOrderProdDetails.Parameters.AddWithValue("@qty", item.ProductDetails[i].Quantity);
                            rowCount = cmdInsertOrderProdDetails.ExecuteNonQuery();
                            cmdInsertOrderProdDetails.Parameters.Clear();
                        }
                    }

                    if (rowCount > 0)
                    {
                        result = 1;
                    }
                    else
                    {
                        result = 2;
                    }
                    trans.Commit();

                }
                catch (Exception e)
                {
                    result = 3;
                    trans.Rollback();
                    Debug.WriteLine("Error: " + e);

                }
                finally
                {
                    conn.Close();
                }
            }

            return result;
        }
        /*****************END OFORDER PRODUCTION*****************/

        /*****************GET ORDER PRODUCTION*******************/

        //////public static ObservableCollection<OrderProductionDetails> GetAllProductionOrders()
        //////{

        //////    ObservableCollection<OrderProductionDetails> orderProdDetails = new ObservableCollection<OrderProductionDetails>();

        //////    using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
        //////    {
        //////        try
        //////        {
        //////            using (SqlCommand cmd = new SqlCommand("SELECT DISTINCT OrderProductionDetails.order_production_id, OrderProductionDetails.product_id,OrderProductionDetails.qty " +
        //////                                                   "FROM OrderProductionDetails " +
        //////                                                   "INNER JOIN RawProduction ON OrderProductionDetails.order_production_id <> RawProduction.order_production_id ", conn))
        //////            {
        //////                conn.Open();

        //////                using (SqlDataReader dr = cmd.ExecuteReader())
        //////                {
        //////                    if (dr != null)
        //////                    {
        //////                        while (dr.Read())
        //////                        {
        //////                            OrderProductionDetails opd = new OrderProductionDetails();


        //////                            opd.OrderProdId = Convert.ToInt16(dr["order_production_id"]);
        //////                            opd.Product = new Product()
        //////                            {
        //////                                ProductID = Convert.ToInt16(dr["product_id"])
        //////                            };
        //////                            opd.Qty = Convert.ToDecimal(dr["qty"]);

        //////                            orderProdDetails.Add(opd);


        //////                        }
        //////                    }
        //////                }
        //////            }
        //////        }
        //////        catch (Exception e)
        //////        {
        //////            Debug.WriteLine("SQL ERROR OCCURED : " + e);
        //////        }
        //////        finally
        //////        {
        //////            conn.Close();
        //////        }
        //////    }
        //////    return orderProdDetails;
        //////}


        /*****************END OF ORDER PRODUCTION*****************/
        //public static ObservableCollection<Product> GetProductsByCode(string prodCode)
        //{

        //    ObservableCollection<Product> prodColl = new ObservableCollection<Product>();

        //    using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
        //    {
        //        try
        //        {
        //            conn.Open();

        //            using (SqlCommand cmdGetData = new SqlCommand("Select Products.ProductCode, Products.ProductDescription, Products.ProductUnit, Products.max_items_per " +
        //                                                          "FROM Products WHERE Products.ProductCode = @prodCodeParm " +
        //                                                          "UNION " +
        //                                                          "SELECT RawProducts.RawProductCode,RawProducts.Description, RawProducts.RawProductType,RawProducts.Cost FROM RawProducts " +
        //                                                          "WHERE RawProducts.RawProductCode = @prodCodeParm", conn))
        //            {

        //                cmdGetData.Parameters.AddWithValue("@prodCodeParm", prodCode);

        //                using (SqlDataReader dr = cmdGetData.ExecuteReader())
        //                {
        //                    if (dr != null)
        //                    {
        //                        while (dr.Read())
        //                        {
        //                            Product prod = new Product();

        //                            //prod.RawProductID = Convert.ToInt16(dr["RawProductID"]);
        //                            prod.ProductCode = dr["ProductCode"].ToString();
        //                            prod.ProductDescription = dr["ProductDescription"].ToString();
        //                            prod.ProductUnit = dr["ProductUnit"].ToString();
        //                            prod.MaxItemsPer = Convert.ToDecimal(dr["max_items_per"]);
        //                            prodColl.Add(prod);
        //                        }
        //                    }
        //                }
        //            }
        //        }
        //        catch (Exception e)
        //        {
        //            Debug.WriteLine("Error reading production line: " + e);
        //        }
        //        finally
        //        {
        //            conn.Close();
        //        }
        //    }
        //    return prodColl;
        //}

        public static ObservableCollection<RawProduct> GetRawProductsByCode(string rawProCode)
        {

            ObservableCollection<RawProduct> rawProdColl = new ObservableCollection<RawProduct>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT * FROM RawProducts WHERE RawProductCode='" + rawProCode + "'", conn))
                    {

                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    RawProduct rawProd = new RawProduct();

                                    rawProd.RawProductID = Convert.ToInt16(dr["RawProductID"]);
                                    rawProd.RawProductCode = dr["RawProductCode"].ToString();
                                    rawProd.Description = dr["Description"].ToString();
                                    rawProd.RawProductType = dr["RawProductType"].ToString();
                                    rawProdColl.Add(rawProd);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading production line: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return rawProdColl;
        }

        public static ObservableCollection<RawProduct> GetRawProductsByID(int rawProID)
        {

            ObservableCollection<RawProduct> rawProdColl = new ObservableCollection<RawProduct>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT * FROM RawProducts WHERE RawProductID=@RawProdIDParam", conn))
                    {
                        cmdGetData.Parameters.AddWithValue("@RawProdIDParam", rawProID);

                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    RawProduct rawProd = new RawProduct();

                                    rawProd.RawProductID = Convert.ToInt16(dr["RawProductID"]);
                                    rawProd.RawProductCode = dr["RawProductCode"].ToString();
                                    rawProd.Description = dr["Description"].ToString();
                                    rawProd.RawProductType = dr["RawProductType"].ToString();
                                    rawProdColl.Add(rawProd);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading production line: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return rawProdColl;
        }



        /*********************** ADD RAW ORDER ***********************/



        //public static int AddRawProductionOrder(BindingList<OrderDetails> rawMaterialDetails, List<MixingOnly> mixingOnlyList,int customerId, string salesOrderNo, OrderStatus orderStatus, DateTime requiredDate,
        //    int freightId, DateTime freightArrivDate, DateTime freightArrivTime, bool freightDateAvailable, bool freightTimeAvailable, DateTime productionDate)
        //{
        //    int result = 0;
        //    int rowCount = 0;
        //    decimal blockTot = 0;
        //    decimal mixBlockTot = 0;
        //    ShiftType shiftType = ShiftType.Day;

        //    using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
        //    {

        //        SqlCommand cmdSelect = new SqlCommand("SELECT raw_product_id,blocklog_qty FROM RawProductionDetails " +
        //                                              "WHERE sales_id = @salesId AND raw_product_id = @rawProductIdParam AND shift = @shiftParam AND production_date=@productDateParam AND status=@statusParam", conn);

        //        //GRADING
        //        SqlCommand cmdInsertOrderProd = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM RawProductionDetails WHERE sales_id = @SalesID AND raw_product_id=@RawProdID AND production_date=@ProdDateParam AND shift=@shiftParam)" +
        //                                                     " Insert INTO RawProductionDetails VALUES(@SalesID,@RawProdID,@blockLogQtyParam,@ProdDateParam,@shiftParam,@statusParam)" +
        //                                                     " else" +
        //                                                     " UPDATE RawProductionDetails SET sales_id = @SalesID, raw_product_id=@RawProdID,blocklog_qty=@blockLogQtyParam,production_date=@ProdDateParam,shift=@shiftParam,status=@statusParam " +
        //                                                     "WHERE sales_id=@SalesID AND raw_product_id=@RawProdID AND production_date=@ProdDateParam AND shift=@shiftParam", conn);
        //        //SLIT PEEL TABLE
        //        SqlCommand cmdSelectSlitPeel = new SqlCommand("SELECT sp_qty_make FROM Slitpeel " +
        //                                                      "WHERE product_id = @productIdParam AND sp_shift = @shiftParam AND sp_production_date=@productDateParam", conn);

        //        //SALES ORDER
        //        SqlCommand cmdInsertSalesOrder = new SqlCommand("INSERT INTO SalesOrder(customer_id,freight_id,sales_order_no, order_status, required_date, freight_arr_date,freight_arr_time,freight_time_available,freight_date_available) " +
        //                                                        "OUTPUT INSERTED.id VALUES (@customerIDParam,@freightIDParam,@salesOrderNoParam,@statusParam,@reqDateParam,@freightDateParam,@freightTimeParam,@freightTimeEnabledParam,@freightDateEnabledParam)", conn);

        //        SqlCommand cmdInsertSlitPeel = new SqlCommand("INSERT INTO SlitPeel(sales_order_id,product_id,raw_product_id, sp_qty_make, sp_production_date,sp_shift) " +
        //                                                      "OUTPUT INSERTED.id VALUES (@salesOrderIdParam,@productIdParam,@rawProdIdParam,@qtyToMakeParam,@prodDateParam,@shiftParam)", conn);

        //        SqlCommand cmdInsertSlitPeelProd = new SqlCommand("INSERT INTO SlitPeelProduction(sp_slit_peel_id,sp_qty_cut,sp_prod_production_date, sp_prod_shift,sp_prod_status) " +
        //                                                          "VALUES (@slitPeelID,@qtyToCut,@prodDate,@shift,@status)", conn);

        //        //CHECK MIXING EXISTS
        //        SqlCommand cmdSelectMixing = new SqlCommand("SELECT blocklog_qty FROM MixingProductionDetails " +
        //                                                    "WHERE raw_product_id = @rawIdParam AND production_date=@productDateParam AND shift = @shiftParam", conn);
        //        //MIXING
        //        SqlCommand cmdInsertMixing = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM MixingProductionDetails where raw_product_id=@rawProductIdParam AND " +
        //                                                    "shift = @shiftParam AND production_date=@productDateParam) " +
        //                                                    "INSERT INTO MixingProductionDetails VALUES(@rawProductIdParam,@QtyMade,@productDateParam,@shiftParam,@Status) " +
        //                                                    "ELSE " +
        //                                                    "UPDATE MixingProductionDetails SET blocklog_qty=@QtyMade,status=@Status WHERE " + 
        //                                                    "raw_product_id = @rawProductIdParam AND shift = @shiftParam AND production_date=@productDateParam", conn);

        //        SqlTransaction trans = null;
        //        conn.Open();
        //        trans = conn.BeginTransaction();
        //        try
        //        {
        //            //SALES ORDER
        //            cmdInsertSalesOrder.Transaction = trans;
        //            cmdInsertSalesOrder.Parameters.AddWithValue("@customerIDParam", customerId);
        //            cmdInsertSalesOrder.Parameters.AddWithValue("@freightIDParam", freightId);
        //            cmdInsertSalesOrder.Parameters.AddWithValue("@salesOrderNoParam", salesOrderNo ?? (object)DBNull.Value);
        //            cmdInsertSalesOrder.Parameters.AddWithValue("@statusParam", orderStatus.ToString());
        //            cmdInsertSalesOrder.Parameters.AddWithValue("@reqDateParam", requiredDate);
        //            cmdInsertSalesOrder.Parameters.AddWithValue("@freightDateParam", freightArrivDate);
        //            cmdInsertSalesOrder.Parameters.AddWithValue("@freightTimeParam", freightArrivTime.ToString("HH:mm:ss"));
        //            cmdInsertSalesOrder.Parameters.AddWithValue("@freightTimeEnabledParam", freightTimeAvailable);
        //            cmdInsertSalesOrder.Parameters.AddWithValue("@freightDateEnabledParam", freightDateAvailable);
        //            Int32 newId = (Int32)cmdInsertSalesOrder.ExecuteScalar();

        //            foreach (var item in rawMaterialDetails)
        //            {

        //                //GRADING ONLY
        //                if (!mixingOnlyList.Select(x=>x.ProductID).Contains(item.Product.ProductID))
        //                {
        //                    cmdSelect.Transaction = trans;
        //                    cmdSelect.Parameters.AddWithValue("@salesId", newId);
        //                    cmdSelect.Parameters.AddWithValue("@rawProductIdParam", item.Product.RawProductID);
        //                    cmdSelect.Parameters.AddWithValue("@shiftParam", shiftType);
        //                    cmdSelect.Parameters.AddWithValue("@productDateParam", productionDate);
        //                    cmdSelect.Parameters.AddWithValue("@statusParam", orderStatus.ToString());

        //                    using (SqlDataReader dr = cmdSelect.ExecuteReader())
        //                    {
        //                        if (dr != null)
        //                        {
        //                            if (dr.HasRows)
        //                            {
        //                                while (dr.Read())
        //                                {
        //                                   // if (item.Product.RawProductID == Convert.ToInt16(dr["raw_product_id"]))
        //                                   // {
        //                                        blockTot = item.BlockLogQty + Convert.ToDecimal(dr["blocklog_qty"]);
        //                                    //}
        //                                    //else
        //                                    //{
        //                                    //    blockTot = item.BlockLogQty;
        //                                    //}
        //                                }
        //                            }
        //                            else
        //                            {
        //                                blockTot = item.BlockLogQty;
        //                                //blockTot += item.BlockLogQty;
        //                            }
        //                        }
        //                    }

        //                    cmdSelect.Parameters.Clear();

        //                    cmdInsertOrderProd.Transaction = trans;
        //                    cmdInsertOrderProd.Parameters.AddWithValue("@SalesID", newId);
        //                    cmdInsertOrderProd.Parameters.AddWithValue("@RawProdID", item.Product.RawProductID);
        //                    cmdInsertOrderProd.Parameters.AddWithValue("@blockLogQtyParam", blockTot);
        //                    cmdInsertOrderProd.Parameters.AddWithValue("@ProdDateParam", productionDate);
        //                    cmdInsertOrderProd.Parameters.AddWithValue("@shiftParam", shiftType);
        //                    cmdInsertOrderProd.Parameters.AddWithValue("@statusParam", orderStatus.ToString());
        //                    rowCount = cmdInsertOrderProd.ExecuteNonQuery();
        //                    cmdInsertOrderProd.Parameters.Clear();  

        //                }
        //                else
        //                {
        //                    //MIXING ONLY
        //                    cmdSelectMixing.Transaction = trans;
        //                    cmdSelectMixing.Parameters.AddWithValue("@rawIdParam", item.Product.RawProductID);
        //                    cmdSelectMixing.Parameters.AddWithValue("@shiftParam", shiftType);
        //                    cmdSelectMixing.Parameters.AddWithValue("@productDateParam", productionDate);

        //                    using (SqlDataReader dr = cmdSelectMixing.ExecuteReader())
        //                    {
        //                        if (dr != null)
        //                        {
        //                            if (dr.HasRows)
        //                            {
        //                                while (dr.Read())
        //                                {
        //                                    mixBlockTot = item.BlockLogQty + Convert.ToDecimal(dr["m_prod_blocklog_qty"]);
        //                                }
        //                            }
        //                            else
        //                            {
        //                                mixBlockTot = item.BlockLogQty;
        //                            }
        //                        }
        //                    }

        //                    cmdSelectMixing.Parameters.Clear();

        //                    cmdInsertMixing.Transaction = trans;
        //                    cmdInsertMixing.Parameters.AddWithValue("@rawProductIdParam", item.Product.RawProductID);
        //                    cmdInsertMixing.Parameters.AddWithValue("@QtyMade", mixBlockTot);
        //                    cmdInsertMixing.Parameters.AddWithValue("@shiftParam", shiftType);
        //                    cmdInsertMixing.Parameters.AddWithValue("@productDateParam", productionDate);
        //                    cmdInsertMixing.Parameters.AddWithValue("@Status", "Mixing");
        //                    cmdInsertMixing.ExecuteNonQuery();
        //                    cmdInsertMixing.Parameters.Clear();
        //                }

        //                if (item.Product.ProductUnit == "M2" || item.Product.ProductUnit == "ROLL" || item.Product.ProductUnit == "TILE")
        //                {
        //                    cmdInsertSlitPeel.Transaction = trans;
        //                    cmdInsertSlitPeel.Parameters.AddWithValue("@salesOrderIdParam", newId);
        //                    cmdInsertSlitPeel.Parameters.AddWithValue("@productIdParam", item.Product.ProductID);
        //                    cmdInsertSlitPeel.Parameters.AddWithValue("@rawProdIdParam", item.Product.RawProductID);
        //                    cmdInsertSlitPeel.Parameters.AddWithValue("@qtyToMakeParam", item.Quantity);//Tiles
        //                    cmdInsertSlitPeel.Parameters.AddWithValue("@prodDateParam", productionDate);
        //                    cmdInsertSlitPeel.Parameters.AddWithValue("@shiftParam", shiftType);
        //                    Int32 newSPId = (Int32)cmdInsertSlitPeel.ExecuteScalar();
        //                    cmdInsertSlitPeel.Parameters.Clear();

        //                    cmdInsertSlitPeelProd.Transaction = trans;
        //                    cmdInsertSlitPeelProd.Parameters.AddWithValue("@slitPeelID", newSPId);
        //                    cmdInsertSlitPeelProd.Parameters.AddWithValue("@qtyToCut", item.Quantity);
        //                    cmdInsertSlitPeelProd.Parameters.AddWithValue("@prodDate", productionDate);
        //                    cmdInsertSlitPeelProd.Parameters.AddWithValue("@shift", shiftType);
        //                    cmdInsertSlitPeelProd.Parameters.AddWithValue("@status", "Slit/Peel");
        //                    rowCount = cmdInsertSlitPeelProd.ExecuteNonQuery();
        //                    cmdInsertSlitPeelProd.Parameters.Clear();
        //                }

        //            }

        //            trans.Commit();

        //            if (rowCount > 0)
        //            {
        //                result = 1;
        //            }
        //            else
        //            {
        //                result = 2;
        //            }
        //        }
        //        catch (Exception e)
        //        {
        //            result = 3;
        //            trans.Rollback();
        //            Debug.WriteLine("Error: " + e);
        //        }
        //        finally
        //        {
        //            conn.Close();
        //        }
        //    }
        //    return result;
        //}

        public static int UpdateRawProductionDate(DateTime ProductionDate)
        {
            int rows = 0;

            DateTime TestDate = Convert.ToDateTime("2015-09-03");

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {

                using (SqlCommand cmdDeclineOrder = new SqlCommand("UPDATE RawProductionDetails SET production_date = @production_date WHERE production_date < '" + TestDate + "'", conn))
                {
                    conn.Open();
                    try
                    {
                        cmdDeclineOrder.Parameters.AddWithValue("@production_date", TestDate);
                        rows = cmdDeclineOrder.ExecuteNonQuery();
                    }
                    catch (Exception e)
                    {
                        Debug.WriteLine("SQL UPDATE COMMAND ERROR OCCURED :  Updating Orders table" + e);
                    }
                    finally
                    {
                        conn.Close();
                    }
                }
            }
            return rows;
        }

        /*****************END OFORDER PRODUCTION*****************/
        /*******************GRADING PRODUCTION*******************/

        public static void UpdateRawProdStatus(RawProductionDetails rawProductionDetails, OrderStatus orderStatus)
        {
            int rows = 0;
            decimal totBlockLog = 0;
            DateTime prodDate = Convert.ToDateTime(rawProductionDetails.ProductionDate);
            string nDate = prodDate.ToString("yyyy-MM-dd");
            var builder = new SqlCommandBuilder();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdSelect = new SqlCommand("SELECT g_blocklog_qty FROM Grading " +
                                                      "WHERE g_raw_product_id = @rawProductIdParam AND g_shift = @shiftParam AND g_production_date=@productDateParam", conn);

                SqlCommand cmdUpdateStatus = new SqlCommand("UPDATE RawProductionDetails " +
                                                            "SET status = @statusParam WHERE raw_product_id = @rawProductIdParam AND sales_id = @salesIdParam AND production_date = @prodDateParam AND shift = @shiftParam", conn);

                SqlCommand cmdInsertGrading = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM Grading WHERE " +
                                                             "g_raw_product_id=@rawProductIdParam AND g_shift = @shiftParam AND g_production_date=@productDateParam) " +
                                                             "INSERT INTO Grading VALUES(@rawProductIdParam,@QtyMade,@productDateParam,@shiftParam,@Status) " +
                                                             "ELSE " +
                                                             "UPDATE Grading SET g_blocklog_qty=@QtyMade, g_shift=@shiftParam WHERE g_raw_product_id = @rawProductIdParam AND g_shift = @shiftParam AND g_production_date=@productDateParam", conn);

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {
                    cmdSelect.Transaction = trans;
                    cmdSelect.Parameters.AddWithValue("@rawProductIdParam", rawProductionDetails.RawProduct.RawProductID);
                    cmdSelect.Parameters.AddWithValue("@productDateParam", nDate);
                    cmdSelect.Parameters.AddWithValue("@shiftParam", rawProductionDetails.Shift);

                    using (SqlDataReader dr = cmdSelect.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    totBlockLog = rawProductionDetails.BlockLogQty + Convert.ToDecimal(dr["g_blocklog_qty"]);
                                }
                            }
                            else
                            {
                                totBlockLog = rawProductionDetails.BlockLogQty;
                            }
                        }
                    }
                    cmdUpdateStatus.Transaction = trans;
                    cmdUpdateStatus.Parameters.AddWithValue("@rawProductIdParam", rawProductionDetails.RawProduct.RawProductID);
                    cmdUpdateStatus.Parameters.AddWithValue("@salesIdParam", rawProductionDetails.RawProduct.SalesID);
                    cmdUpdateStatus.Parameters.AddWithValue("@statusParam", orderStatus.ToString());
                    cmdUpdateStatus.Parameters.AddWithValue("@prodDateParam", nDate);
                    cmdUpdateStatus.Parameters.AddWithValue("@shiftParam", rawProductionDetails.Shift);
                    cmdUpdateStatus.ExecuteNonQuery();

                    cmdInsertGrading.Transaction = trans;
                    cmdInsertGrading.Parameters.AddWithValue("@rawProductIdParam", rawProductionDetails.RawProduct.RawProductID);
                    cmdInsertGrading.Parameters.AddWithValue("@QtyMade", totBlockLog);
                    cmdInsertGrading.Parameters.AddWithValue("@shiftParam", rawProductionDetails.Shift);
                    cmdInsertGrading.Parameters.AddWithValue("@productDateParam", nDate);
                    cmdInsertGrading.Parameters.AddWithValue("@Status", orderStatus.ToString());
                    rows = cmdInsertGrading.ExecuteNonQuery();

                    trans.Commit();

                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("Error: " + e);
                }
                finally
                {
                    conn.Close();
                }

            }

        }



        /***********************GET ALL THE ORDERS WHICH HAVE SAME RAW ID*****************/
        public static ObservableCollection<RawProductionDetails> GetAllRawProductsByID(RawProductionDetails rawProductionDetails, OrderStatus orderStatus)
        {

            ObservableCollection<RawProductionDetails> rawProdColl = new ObservableCollection<RawProductionDetails>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT * FROM GradingScheduling " +
                                                                  "WHERE production_time_table_id=@ProdTimeTableID AND raw_product_id = @rawProdIdParam AND sales_id =@SalesID " +
                                                                  "AND shift = @shiftParam AND status = @statusParam AND order_type = @OrderType", conn))
                    {
                        cmdGetData.Parameters.AddWithValue("ProdTimeTableID", rawProductionDetails.RawProDetailsID);
                        cmdGetData.Parameters.AddWithValue("SalesID", rawProductionDetails.SalesOrderId);
                        cmdGetData.Parameters.AddWithValue("rawProdIdParam", rawProductionDetails.RawProduct.RawProductID);
                        cmdGetData.Parameters.AddWithValue("shiftParam", rawProductionDetails.Shift);
                        cmdGetData.Parameters.AddWithValue("statusParam", orderStatus.ToString());
                        cmdGetData.Parameters.AddWithValue("OrderType", rawProductionDetails.OrderType);

                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    RawProductionDetails rawProduct = new RawProductionDetails();

                                    rawProduct.RawProduct = new RawProduct()
                                    {
                                        RawProductID = Convert.ToInt16(dr["raw_product_id"])
                                    };

                                    rawProduct.OrderType = Convert.ToInt16(dr["order_type"]);
                                    rawProduct.BlockLogQty = Convert.ToDecimal(dr["blocklog_qty"]);
                                    rawProduct.Shift = Convert.ToInt16(dr["shift"]);
                                    rawProduct.OrderType = Convert.ToInt16(dr["order_type"]);
                                    rawProdColl.Add(rawProduct);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading production line: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return rawProdColl;

        }
        /***********************GET ALL THE ORDERS WHICH HAVE SAME RAW ID*****************/
        public static ObservableCollection<RawProductionDetails> GetAllmixingRawProductsByID(MixingProductionDetails mixingProductionDetails)
        {
            ObservableCollection<RawProductionDetails> rawProdColl = new ObservableCollection<RawProductionDetails>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT * FROM MixingCurrentCapacity WHERE mixing_time_table_id = @MixingTimeTableID AND raw_product_id = @rawProdIdParam AND sales_id = @salesIDParam AND status = @Status", conn))
                    {
                        cmdGetData.Parameters.AddWithValue("MixingTimeTableID", mixingProductionDetails.MixingTimeTableID);
                        cmdGetData.Parameters.AddWithValue("rawProdIdParam", mixingProductionDetails.RawProduct.RawProductID);
                        cmdGetData.Parameters.AddWithValue("salesIDParam", mixingProductionDetails.SalesOrderId);
                        cmdGetData.Parameters.AddWithValue("Status", "Mixing");

                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    RawProductionDetails rawProduct = new RawProductionDetails();

                                    rawProduct.RawProduct = new RawProduct()
                                    {
                                        RawProductID = Convert.ToInt16(dr["raw_product_id"])
                                    };
                                    rawProduct.BlockLogQty = Convert.ToDecimal(dr["blockLog_qty"]);
                                    rawProduct.SalesOrderId = Convert.ToInt16(dr["sales_id"]);
                                    rawProdColl.Add(rawProduct);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading production line: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return rawProdColl;

        }

        public static int UpdateGradingCounter(GradingProductionDetails gradingProductionDetails)
        {
            int res = 0;
            int pCounter = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdSelectGS = new SqlCommand("SELECT print_counter FROM GradingScheduling WHERE id=@ID", conn);

                //Update Grading Scheduling
                SqlCommand cmdUpdateStatus = new SqlCommand("UPDATE GradingScheduling SET print_counter=@PrintCounter WHERE id=@ID", conn);


                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {
                    cmdSelectGS.Transaction = trans;
                    cmdSelectGS.Parameters.AddWithValue("@ID", gradingProductionDetails.GradingSchedulingID);

                    using (SqlDataReader dr = cmdSelectGS.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    pCounter = Convert.ToInt16(dr["print_counter"]);
                                }
                            }
                        }
                    }

                    cmdUpdateStatus.Transaction = trans;
                    cmdUpdateStatus.Parameters.AddWithValue("@ID", gradingProductionDetails.GradingSchedulingID);
                    cmdUpdateStatus.Parameters.AddWithValue("@PrintCounter", pCounter + 1);
                    cmdUpdateStatus.ExecuteNonQuery();

                    trans.Commit();
                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL UPDATE COMMAND ERROR OCCURED :  Updating Orders table" + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return res;
        }


        /******************UPDATE GRADING PRODUCTION*************/
        public static int UpdateRawProdQty(GradingProductionDetails gradingProductionDetails, int orderType, int currentShift, int currentProdTimeTable, List<GradingCompleted> ggList, string pcName, Int32 realProdTimeTableID, DateTime realDateTime)
        {
            decimal totBlockLogGS = 0;            
            decimal kgTot = 0;
            int tmpShiftId = 0;
            int rows1 = 0, gsUp=0, gc, result = 0;
            OrderStatus orderStatus = OrderStatus.Grading;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdSelectGS = new SqlCommand("SELECT blocklog_qty FROM GradingScheduling " +
                                                        "WHERE production_time_table_id=@ProdTimeTableID AND raw_product_id = @rawProdId AND sales_id=@SalesID AND shift = @shiftParam " +
                                                        "AND status = @statusParam AND order_type=@OrderType", conn);
                //Update Grading Scheduling
                SqlCommand cmdUpdateStatus = new SqlCommand("UPDATE GradingScheduling SET blocklog_qty = @logBlockParam " +
                                                            "WHERE production_time_table_id=@ProdTimeTableID AND raw_product_id = @rawProdId AND sales_id=@SalesID AND shift = @shiftParam " +
                                                            "AND status = @statusParam AND order_type=@OrderType", conn);
                //Update Current Capacity
                SqlCommand cmdUpdateCC = new SqlCommand("UPDATE CurrentCapacity SET capacity_kg=capacity_kg-@CapacityKg,blocks_logs = blocks_logs+@BlockSLogs " +
                                                        "WHERE prod_timetable_id=@ProdTimeTableID AND product_capacity_id=@ProdCapacityId AND sales_id=@SalesId  AND raw_product_id = @RawproductId AND shift = @Shift  AND order_type=@OrderType", conn);

                //GradingCompleted
                SqlCommand cmdGradingCompleted = new SqlCommand("INSERT INTO GradingCompleted VALUES(@ProdTimeTableID,@SalesID,@RawProductID,@Qty,@Shift,@OrderType,@CompletedBy,@CreatedDateTime,@CreatedTime,@Status)", conn);

                //GradingGradesCompleted
                SqlCommand cmdGGCompletedSel = new SqlCommand("SELECT kg_completed FROM GradingGradesCompleted " +
                                                              "WHERE prod_time_table_id=@ProdTimeTableID AND grading_id=@GradingID AND shift=@Shift AND order_type=@OrderType", conn);

                SqlCommand cmdGGCompleted = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM GradingGradesCompleted WHERE prod_time_table_id=@ProdTimeTableID AND grading_id=@GradingID AND shift=@Shift AND order_type=@OrderType) " +
                                                           "INSERT INTO GradingGradesCompleted VALUES(@ProdTimeTableID,@GradingID,@KgCompleted,@Shift,@CreatedDate,@OrderType) " +
                                                           "ELSE " +
                                                           "UPDATE GradingGradesCompleted SET kg_completed = @KgCompleted WHERE prod_time_table_id=@ProdTimeTableID AND grading_id=@GradingID AND shift=@Shift AND order_type=@OrderType", conn);
                //Update GradingScheduling Active to false
                SqlCommand cmdUpdateGradingSchedulingActvie = new SqlCommand("UPDATE GradingScheduling SET active_order = @Active " +
                                                                             "WHERE production_time_table_id=@ProdTimeTableID AND raw_product_id = @rawProdId AND sales_id=@SalesID AND shift = @shiftParam " +
                                                                             "AND status = @statusParam AND order_type=@OrderType AND active_order=@ActiveCurrent", conn);
                
                SqlCommand cmdDeleteGradSched = new SqlCommand("DELETE FROM GradingScheduling WHERE id = @GradingSchedulingID AND blocklog_qty <= 0.0000", conn);

                SqlCommand cmdDeleteCurrCap = new SqlCommand("DELETE FROM CurrentCapacity " +
                                                             "WHERE blocks_logs <= 0.0000 AND prod_timetable_id=@ProdTimeTableID AND product_capacity_id=@ProdCapacityId AND sales_id=@SalesId AND " +
                                                             "raw_product_id = @RawproductId AND shift = @Shift AND order_type=@OrderType", conn);

                SqlCommand cmdTransaction = new SqlCommand("INSERT INTO Transactions(transaction_datetime, transaction_type, sales_order_id, raw_product_id,qty,created_by) " +
                                                           "VALUES (@TDateTime,@TType,@SalesOrderID,@RawProductID,@Qty,@CreatedBy)", conn);   

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {                  

                    cmdSelectGS.Transaction = trans;
                    cmdSelectGS.Parameters.AddWithValue("@ProdTimeTableID", gradingProductionDetails.RawProDetailsID);
                    cmdSelectGS.Parameters.AddWithValue("@SalesID", gradingProductionDetails.SalesOrderId);
                    cmdSelectGS.Parameters.AddWithValue("@rawProdId", gradingProductionDetails.RawProduct.RawProductID);
                    cmdSelectGS.Parameters.AddWithValue("@shiftParam", gradingProductionDetails.Shift);
                    cmdSelectGS.Parameters.AddWithValue("@statusParam", orderStatus.ToString());
                    cmdSelectGS.Parameters.AddWithValue("@OrderType", orderType);

                    using (SqlDataReader dr = cmdSelectGS.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    totBlockLogGS = Convert.ToDecimal(dr["blocklog_qty"]);
                                }
                            }
                        }
                    }

                    cmdUpdateStatus.Transaction = trans;
                    cmdUpdateStatus.Parameters.AddWithValue("@ProdTimeTableID", gradingProductionDetails.RawProDetailsID);
                    cmdUpdateStatus.Parameters.AddWithValue("@SalesID", gradingProductionDetails.SalesOrderId);
                    cmdUpdateStatus.Parameters.AddWithValue("@rawProdId", gradingProductionDetails.RawProduct.RawProductID);
                    cmdUpdateStatus.Parameters.AddWithValue("@logBlockParam", totBlockLogGS - 1);
                    cmdUpdateStatus.Parameters.AddWithValue("@shiftParam", gradingProductionDetails.Shift);
                    cmdUpdateStatus.Parameters.AddWithValue("@statusParam", orderStatus.ToString());
                    cmdUpdateStatus.Parameters.AddWithValue("@OrderType", orderType);
                    gsUp=cmdUpdateStatus.ExecuteNonQuery();

                    //Update GradingSchedulingActive to false
                    cmdUpdateGradingSchedulingActvie.Transaction = trans;
                    cmdUpdateGradingSchedulingActvie.Parameters.AddWithValue("@ProdTimeTableID", gradingProductionDetails.RawProDetailsID);
                    cmdUpdateGradingSchedulingActvie.Parameters.AddWithValue("@SalesID", gradingProductionDetails.SalesOrderId);
                    cmdUpdateGradingSchedulingActvie.Parameters.AddWithValue("@rawProdId", gradingProductionDetails.RawProduct.RawProductID);
                    cmdUpdateGradingSchedulingActvie.Parameters.AddWithValue("@shiftParam", gradingProductionDetails.Shift);
                    cmdUpdateGradingSchedulingActvie.Parameters.AddWithValue("@statusParam", "Grading");
                    cmdUpdateGradingSchedulingActvie.Parameters.AddWithValue("@OrderType", orderType);
                    cmdUpdateGradingSchedulingActvie.Parameters.AddWithValue("@ActiveCurrent", gradingProductionDetails.GradingActive);
                    cmdUpdateGradingSchedulingActvie.Parameters.AddWithValue("@Active", false);
                    cmdUpdateGradingSchedulingActvie.ExecuteNonQuery();

                    List<Formulas> fList = GetFormulaDetailsByRawProdID(gradingProductionDetails.RawProduct.RawProductID);
                    if (fList.Count > 0)
                    {
                        if (fList[0].ProductCapacity1 > 0)
                        {
                            cmdUpdateCC.Transaction = trans;
                            cmdUpdateCC.Parameters.AddWithValue("@ProdTimeTableID", gradingProductionDetails.RawProDetailsID);
                            cmdUpdateCC.Parameters.AddWithValue("@ProdCapacityId", fList[0].ProductCapacity1);
                            cmdUpdateCC.Parameters.AddWithValue("@SalesId", gradingProductionDetails.SalesOrderId);
                            cmdUpdateCC.Parameters.AddWithValue("@RawproductId", gradingProductionDetails.RawProduct.RawProductID);
                            cmdUpdateCC.Parameters.AddWithValue("@productId", 0);
                            cmdUpdateCC.Parameters.AddWithValue("@Shift", gradingProductionDetails.Shift);
                            cmdUpdateCC.Parameters.AddWithValue("@CapacityKg", fList[0].GradingWeight1);
                            cmdUpdateCC.Parameters.AddWithValue("@BlockSLogs", -1);
                            cmdUpdateCC.Parameters.AddWithValue("@OrderType", orderType);
                            rows1 = cmdUpdateCC.ExecuteNonQuery();
                        }

                        if (fList[0].ProductCapacity2 > 0)
                        {
                            cmdUpdateCC.Parameters.Clear();

                            cmdUpdateCC.Transaction = trans;
                            cmdUpdateCC.Parameters.AddWithValue("@ProdTimeTableID", gradingProductionDetails.RawProDetailsID);
                            cmdUpdateCC.Parameters.AddWithValue("@ProdCapacityId", fList[0].ProductCapacity2);
                            cmdUpdateCC.Parameters.AddWithValue("@SalesId", gradingProductionDetails.SalesOrderId);
                            cmdUpdateCC.Parameters.AddWithValue("@RawproductId", gradingProductionDetails.RawProduct.RawProductID);
                            cmdUpdateCC.Parameters.AddWithValue("@productId", 0);
                            cmdUpdateCC.Parameters.AddWithValue("@Shift", gradingProductionDetails.Shift);
                            cmdUpdateCC.Parameters.AddWithValue("@CapacityKg", fList[0].GradingWeight2);
                            cmdUpdateCC.Parameters.AddWithValue("@BlockSLogs", -1);
                            cmdUpdateCC.Parameters.AddWithValue("@OrderType", orderType);
                            rows1 = cmdUpdateCC.ExecuteNonQuery();
                        }
                    }                  

                    if ((DateTime.Now.TimeOfDay >= new TimeSpan(5, 30, 0)) && (DateTime.Now.TimeOfDay <= new TimeSpan(11, 29, 58)))
                    {
                        tmpShiftId = 1;
                    }
                    else if ((DateTime.Now.TimeOfDay >= new TimeSpan(11, 30, 0)) && (DateTime.Now.TimeOfDay <= new TimeSpan(17, 14, 58)))
                    {
                        tmpShiftId = 2;
                    }
                    else
                    {
                        tmpShiftId = 3;
                    }

                    //GradingCompleted                  
                    cmdGradingCompleted.Transaction = trans;
                    cmdGradingCompleted.Parameters.AddWithValue("@ProdTimeTableID", realProdTimeTableID);
                    cmdGradingCompleted.Parameters.AddWithValue("@SalesID", gradingProductionDetails.SalesOrderId);
                    cmdGradingCompleted.Parameters.AddWithValue("@RawProductID", gradingProductionDetails.RawProduct.RawProductID);
                    cmdGradingCompleted.Parameters.AddWithValue("@Qty", 1);
                    if (DateTime.Now.DayOfWeek == DayOfWeek.Friday)
                    {
                        cmdGradingCompleted.Parameters.AddWithValue("@Shift", tmpShiftId);
                    }
                    else
                    {
                        cmdGradingCompleted.Parameters.AddWithValue("@Shift", currentShift);
                    }
                    cmdGradingCompleted.Parameters.AddWithValue("@OrderType", orderType);
                    cmdGradingCompleted.Parameters.AddWithValue("@CompletedBy", pcName);
                    cmdGradingCompleted.Parameters.AddWithValue("@CreatedDateTime", realDateTime);
                    cmdGradingCompleted.Parameters.AddWithValue("@CreatedTime", DateTime.Now.TimeOfDay);
                    cmdGradingCompleted.Parameters.AddWithValue("@Status", "Completed");
                    gc = cmdGradingCompleted.ExecuteNonQuery();

                    //GradingGradesCompleted     
                    foreach (var item in ggList)
                    {
                        kgTot = 0;
                        cmdGGCompletedSel.Transaction = trans;
                        cmdGGCompletedSel.Parameters.AddWithValue("@ProdTimeTableID", item.ProdTimeTableID);
                        cmdGGCompletedSel.Parameters.AddWithValue("@GradingID", item.GradingID);
                        if (DateTime.Now.DayOfWeek == DayOfWeek.Friday)
                        {
                            cmdGGCompletedSel.Parameters.AddWithValue("@Shift", tmpShiftId);
                        }
                        else
                        {
                            cmdGGCompletedSel.Parameters.AddWithValue("@Shift", item.Shift);
                        }
                        cmdGGCompletedSel.Parameters.AddWithValue("@OrderType", orderType);
                        using (SqlDataReader dr = cmdGGCompletedSel.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                if (dr.HasRows)
                                {
                                    while (dr.Read())
                                    {
                                        kgTot = Convert.ToDecimal(dr["kg_completed"]);
                                    }
                                }
                            }
                        }
                        cmdGGCompletedSel.Parameters.Clear();

                        cmdGGCompleted.Transaction = trans;
                        cmdGGCompleted.Parameters.AddWithValue("@ProdTimeTableID", item.ProdTimeTableID);
                        cmdGGCompleted.Parameters.AddWithValue("@GradingID", item.GradingID);
                        cmdGGCompleted.Parameters.AddWithValue("@KgCompleted", item.KGCompleted + kgTot);
                        if (DateTime.Now.DayOfWeek == DayOfWeek.Friday)
                        {
                            cmdGGCompleted.Parameters.AddWithValue("@Shift", tmpShiftId);
                        }
                        else
                        {
                            cmdGGCompleted.Parameters.AddWithValue("@Shift", item.Shift);
                        }
                        cmdGGCompleted.Parameters.AddWithValue("@CreatedDate", item.CreatedDate);
                        cmdGGCompleted.Parameters.AddWithValue("@OrderType", orderType);
                        rows1 = cmdGGCompleted.ExecuteNonQuery();
                        cmdGGCompleted.Parameters.Clear();
                    }
                  

                    cmdDeleteGradSched.Transaction = trans;
                    cmdDeleteGradSched.Parameters.AddWithValue("@GradingSchedulingID", gradingProductionDetails.GradingSchedulingID);
                    int a = cmdDeleteGradSched.ExecuteNonQuery();
                    if(a > 0)
                    {
                        if (fList[0].ProductCapacity1 > 0)
                        {
                            cmdDeleteCurrCap.Transaction = trans;
                            cmdDeleteCurrCap.Parameters.AddWithValue("@ProdTimeTableID", gradingProductionDetails.RawProDetailsID);
                            cmdDeleteCurrCap.Parameters.AddWithValue("@ProdCapacityId", fList[0].ProductCapacity1);
                            cmdDeleteCurrCap.Parameters.AddWithValue("@SalesId", gradingProductionDetails.SalesOrderId);
                            cmdDeleteCurrCap.Parameters.AddWithValue("@RawproductId", gradingProductionDetails.RawProduct.RawProductID);
                            cmdDeleteCurrCap.Parameters.AddWithValue("@Shift", gradingProductionDetails.Shift);
                            cmdDeleteCurrCap.Parameters.AddWithValue("@CapacityKg", fList[0].GradingWeight1);
                            cmdDeleteCurrCap.Parameters.AddWithValue("@OrderType", orderType);
                            int b = cmdDeleteCurrCap.ExecuteNonQuery();
                            cmdDeleteCurrCap.Parameters.Clear();
                        }

                        if (fList[0].ProductCapacity2 > 0)
                        {
                            cmdDeleteCurrCap.Transaction = trans;
                            cmdDeleteCurrCap.Parameters.AddWithValue("@ProdTimeTableID", gradingProductionDetails.RawProDetailsID);
                            cmdDeleteCurrCap.Parameters.AddWithValue("@ProdCapacityId", fList[0].ProductCapacity2);
                            cmdDeleteCurrCap.Parameters.AddWithValue("@SalesId", gradingProductionDetails.SalesOrderId);
                            cmdDeleteCurrCap.Parameters.AddWithValue("@RawproductId", gradingProductionDetails.RawProduct.RawProductID);
                            cmdDeleteCurrCap.Parameters.AddWithValue("@Shift", gradingProductionDetails.Shift);
                            cmdDeleteCurrCap.Parameters.AddWithValue("@CapacityKg", fList[0].GradingWeight1);
                            cmdDeleteCurrCap.Parameters.AddWithValue("@OrderType", orderType);
                            int c = cmdDeleteCurrCap.ExecuteNonQuery();
                        }
                    }

                    if (gsUp > 0 && gc > 0)
                    {
                        cmdTransaction.Transaction = trans;
                        cmdTransaction.Parameters.AddWithValue("@TDateTime", DateTime.Now);
                        cmdTransaction.Parameters.AddWithValue("@TType", "Completed (Grading)");
                        cmdTransaction.Parameters.AddWithValue("@SalesOrderID", gradingProductionDetails.SalesOrderId);
                        cmdTransaction.Parameters.AddWithValue("@RawProductID", gradingProductionDetails.RawProduct.RawProductID);
                        cmdTransaction.Parameters.AddWithValue("@Qty", 1);
                        cmdTransaction.Parameters.AddWithValue("@CreatedBy", pcName);
                        cmdTransaction.ExecuteNonQuery();

                        trans.Commit();
                        result = 1;
                    }
                    else
                    {
                        trans.Rollback();
                    }
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("SQL UPDATE COMMAND ERROR OCCURED :  Updating Orders table" + e);
                }
                finally
                {
                    conn.Close();
                }

            }
            return result;
        }


        /******************UPDATE MIXING PRODUCTION*************/

        public static decimal UpdateMixingRawProdQty(MixingProductionDetails mixingProductionDetails, string machineName, int curShift, int curtMixTimeTableId, List<GradingCompleted> ggList, 
            Curing pendingCuring,string curDes)
        {
            int id = 0;
            decimal blockLogs = 0;
            decimal kgTot = 0;
            int tmpShiftId = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdSelectMixingCurrCap = new SqlCommand("SELECT id, blockLog_qty FROM MixingCurrentCapacity " +
                                                                   "WHERE mixing_time_table_id =@MixingTimeTableID AND sales_id = @salesIdParam AND raw_product_id = @rawProductIdParam AND status =@Status AND order_type=@OrderType AND rank=@Rank ", conn);

                SqlCommand cmdUpdateMixingCurrCap = new SqlCommand("UPDATE MixingCurrentCapacity " +
                                                                   "SET blockLog_qty = blockLog_qty - @blockLogQtyParam " +
                                                                   "WHERE id = @MixingCurrCapID AND status =@Status AND order_type=@OrderType AND rank=@Rank", conn);

                SqlCommand cmdInsertMixComp = new SqlCommand("INSERT INTO MixingCompleted(mixing_time_table_id, sales_id, raw_product_id,qty,shift,order_type,completed_by,created_date,created_time,status) " +
                                                             "VALUES (@MixingTimeTableID,@SaleID,@RawProductID,@Qty,@Shift,@OrderType,@CompletedBy,@CreatedDate,@CreatedTime,@Status)", conn);
                
                SqlCommand cmdGGCompleted = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM MixingGradesCompleted WHERE mixing_time_table_id=@MixingTimeTableID AND grading_id=@GradingID AND shift=@Shift AND order_type=@OrderType) " +
                                                           "INSERT INTO MixingGradesCompleted VALUES(@MixingTimeTableID,@GradingID,@KgCompleted,@Shift,@CreatedDate,@OrderType) " +
                                                           "ELSE " +
                                                           "UPDATE MixingGradesCompleted SET kg_completed += @KgCompleted WHERE mixing_time_table_id=@MixingTimeTableID AND grading_id=@GradingID AND shift=@Shift AND order_type=@OrderType", conn);

                SqlCommand cmdDeleteStatus = new SqlCommand("DELETE FROM MixingCurrentCapacity WHERE id=@ID", conn);

                SqlCommand cmdUpdateBlockLogCuring = new SqlCommand("UPDATE BlockLogCuring SET blc_start_time=@StartTime, blc_end_time=@EndTime,is_enabled=@IsEnabled " +
                                                                      "WHERE id = @ID", conn);

                SqlCommand cmdSelectMixingStatus = new SqlCommand("SELECT kg_completed FROM MixingGradesCompleted " +
                                                                 "WHERE mixing_time_table_id=@MixingTimeTableID AND grading_id=@GradingID AND shift=@Shift AND order_type=@OrderType", conn);
                                
                SqlCommand cmdInsertCuring = new SqlCommand("INSERT INTO BlockLogCuring(blc_raw_product_id,product_id,order_id, blc_blocklog_qty, blc_start_time,blc_end_time,is_cured,is_enabled) " +
                                                            "VALUES (@RawProductID,@ProductID,@OrderID,@BlockLog,@StartTime,@EndTime,@IsCured,@IsEnabled)", conn);

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {

                    cmdUpdateMixingCurrCap.Transaction = trans;
                    cmdUpdateMixingCurrCap.Parameters.AddWithValue("@MixingCurrCapID", mixingProductionDetails.MixingCurrentCapacityID);
                    cmdUpdateMixingCurrCap.Parameters.AddWithValue("@MixingTimeTableID", mixingProductionDetails.MixingTimeTableID);
                    cmdUpdateMixingCurrCap.Parameters.AddWithValue("@blockLogQtyParam", 1);
                    cmdUpdateMixingCurrCap.Parameters.AddWithValue("@SalesIdParam", mixingProductionDetails.SalesOrderId);
                    cmdUpdateMixingCurrCap.Parameters.AddWithValue("@RawProductIdParam", mixingProductionDetails.RawProduct.RawProductID);
                    cmdUpdateMixingCurrCap.Parameters.AddWithValue("@Status", "Mixing");
                    cmdUpdateMixingCurrCap.Parameters.AddWithValue("@OrderType", mixingProductionDetails.OrderType);
                    cmdUpdateMixingCurrCap.Parameters.AddWithValue("@Rank", mixingProductionDetails.Rank);

                    int rows = cmdUpdateMixingCurrCap.ExecuteNonQuery();
                    if (rows != 0)
                    {
                        if (curDes == "Up")
                        {
                            //Update curing
                            cmdUpdateBlockLogCuring.Transaction = trans;
                            cmdUpdateBlockLogCuring.Parameters.AddWithValue("@ID", pendingCuring.id);
                            cmdUpdateBlockLogCuring.Parameters.AddWithValue("@StartTime", pendingCuring.StartTime);
                            cmdUpdateBlockLogCuring.Parameters.AddWithValue("@EndTime", pendingCuring.EndTime);
                            cmdUpdateBlockLogCuring.Parameters.AddWithValue("@IsEnabled", pendingCuring.IsEnabled);
                            cmdUpdateBlockLogCuring.ExecuteNonQuery();
                        }
                        else
                        {
                            //AddToCuring(mixingProductionDetails);
                            //Insert curing
                            cmdInsertCuring.Transaction = trans;
                            cmdInsertCuring.Parameters.AddWithValue("@RawProductID", pendingCuring.Product.RawProduct.RawProductID);
                            cmdInsertCuring.Parameters.AddWithValue("@ProductID", pendingCuring.Product.ProductID);
                            cmdInsertCuring.Parameters.AddWithValue("@OrderID", pendingCuring.OrderNo);
                            cmdInsertCuring.Parameters.AddWithValue("@BlockLog", pendingCuring.Qty);
                            cmdInsertCuring.Parameters.AddWithValue("@StartTime", pendingCuring.StartTime);
                            cmdInsertCuring.Parameters.AddWithValue("@EndTime", pendingCuring.EndTime);
                            cmdInsertCuring.Parameters.AddWithValue("@IsCured", pendingCuring.IsCured);
                            cmdInsertCuring.Parameters.AddWithValue("@IsEnabled", pendingCuring.IsEnabled);
                            cmdInsertCuring.ExecuteNonQuery();
                        }
                    }

                    cmdSelectMixingCurrCap.Transaction = trans;
                    cmdSelectMixingCurrCap.Parameters.AddWithValue("@MixingTimeTableID", mixingProductionDetails.MixingTimeTableID);
                    cmdSelectMixingCurrCap.Parameters.AddWithValue("@salesIdParam", mixingProductionDetails.SalesOrderId);
                    cmdSelectMixingCurrCap.Parameters.AddWithValue("@rawProductIdParam", mixingProductionDetails.RawProduct.RawProductID);
                    cmdSelectMixingCurrCap.Parameters.AddWithValue("@Status", "Mixing");
                    cmdSelectMixingCurrCap.Parameters.AddWithValue("@OrderType", mixingProductionDetails.OrderType);
                    cmdSelectMixingCurrCap.Parameters.AddWithValue("@Rank", mixingProductionDetails.Rank);

                    using (SqlDataReader dr = cmdSelectMixingCurrCap.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    id = Convert.ToInt32(dr["id"]);
                                    blockLogs = Convert.ToDecimal(dr["blockLog_qty"]);

                                }
                            }
                        }
                    }

                    //DBAccess.InsertErrorLog("After updating: sales_id: " + mixingProductionDetails.SalesOrderId.ToString() + " raw_product_id: " + mixingProductionDetails.RawProduct.RawProductID.ToString() + " blocklog_qty: " + blockLogs.ToString() + " status: " + mixingProductionDetails.MixingStatus + " order_type: " + mixingProductionDetails.OrderType);
                    if (blockLogs == 0)
                    {
                        cmdDeleteStatus.Transaction = trans;
                        cmdDeleteStatus.Parameters.AddWithValue("@ID", id);
                        cmdDeleteStatus.ExecuteNonQuery();
                    }

                    if ((DateTime.Now.TimeOfDay >= new TimeSpan(5, 30, 0)) && (DateTime.Now.TimeOfDay <= new TimeSpan(11, 29, 58)))
                    {
                        tmpShiftId = 1;
                    }
                    else if ((DateTime.Now.TimeOfDay >= new TimeSpan(11, 30, 0)) && (DateTime.Now.TimeOfDay <= new TimeSpan(17, 14, 58)))
                    {
                        tmpShiftId = 2;
                    }
                    else
                    {
                        tmpShiftId = 3;
                    }

                    //Mixing Completed
                    cmdInsertMixComp.Transaction = trans;
                    cmdInsertMixComp.Parameters.AddWithValue("@MixingTimeTableID", curtMixTimeTableId);
                    cmdInsertMixComp.Parameters.AddWithValue("@SaleID", mixingProductionDetails.SalesOrderId);
                    cmdInsertMixComp.Parameters.AddWithValue("@RawProductID", mixingProductionDetails.RawProduct.RawProductID);
                    cmdInsertMixComp.Parameters.AddWithValue("@Qty", 1);
                    if (DateTime.Now.DayOfWeek == DayOfWeek.Friday)
                    {
                        cmdInsertMixComp.Parameters.AddWithValue("@Shift", tmpShiftId);
                    }
                    else
                    {
                        cmdInsertMixComp.Parameters.AddWithValue("@Shift", curShift);
                    }
                    cmdInsertMixComp.Parameters.AddWithValue("@OrderType", mixingProductionDetails.OrderType);
                    cmdInsertMixComp.Parameters.AddWithValue("@CompletedBy", machineName);
                    cmdInsertMixComp.Parameters.AddWithValue("@CreatedDate", DateTime.Now);
                    cmdInsertMixComp.Parameters.AddWithValue("@CreatedTime", DateTime.Now.TimeOfDay);
                    cmdInsertMixComp.Parameters.AddWithValue("@Status", "Completed");
                    cmdInsertMixComp.ExecuteNonQuery();

                    //GradingCompleted     
                    foreach (var item in ggList)
                    {
                        //cmdGGCompletedSel.Transaction = trans;
                        //cmdGGCompletedSel.Parameters.AddWithValue("@MixingTimeTableID", item.ProdTimeTableID);
                        //cmdGGCompletedSel.Parameters.AddWithValue("@GradingID", item.GradingID);
                        //if (DateTime.Now.DayOfWeek == DayOfWeek.Friday)
                        //{
                        //    cmdGGCompletedSel.Parameters.AddWithValue("@Shift", tmpShiftId);
                        //}
                        //else
                        //{
                        //    cmdGGCompletedSel.Parameters.AddWithValue("@Shift", item.Shift);
                        //}
                        //cmdGGCompletedSel.Parameters.AddWithValue("@OrderType", mixingProductionDetails.OrderType);
                        //using (SqlDataReader dr = cmdGGCompletedSel.ExecuteReader())
                        //{
                        //    if (dr != null)
                        //    {
                        //        if (dr.HasRows)
                        //        {
                        //            while (dr.Read())
                        //            {
                        //                kgTot = Convert.ToDecimal(dr["kg_completed"]);
                        //            }
                        //        }
                        //    }
                        //}
                        //cmdGGCompletedSel.Parameters.Clear();

                        cmdGGCompleted.Transaction = trans;
                        cmdGGCompleted.Parameters.AddWithValue("@MixingTimeTableID", item.ProdTimeTableID);
                        cmdGGCompleted.Parameters.AddWithValue("@GradingID", item.GradingID);
                        cmdGGCompleted.Parameters.AddWithValue("@KgCompleted", item.KGCompleted);
                        if (DateTime.Now.DayOfWeek == DayOfWeek.Friday)
                        {
                            cmdGGCompleted.Parameters.AddWithValue("@Shift", tmpShiftId);
                        }
                        else
                        {
                            cmdGGCompleted.Parameters.AddWithValue("@Shift", item.Shift);
                        }
                        cmdGGCompleted.Parameters.AddWithValue("@CreatedDate", item.CreatedDate);
                        cmdGGCompleted.Parameters.AddWithValue("@OrderType", mixingProductionDetails.OrderType);
                        cmdGGCompleted.ExecuteNonQuery();
                        cmdGGCompleted.Parameters.Clear();
                    }

                    ////Mixing Status
                    //cmdUpdateMixingStatus.Transaction = trans;
                    //cmdUpdateMixingStatus.Parameters.AddWithValue("@OrderNo", mixingProductionDetails.SalesOrderId);
                    //cmdUpdateMixingStatus.Parameters.AddWithValue("@RawProductID", mixingProductionDetails.RawProduct.RawProductID);
                    //cmdUpdateMixingStatus.Parameters.AddWithValue("@Pending", 1);
                    //cmdUpdateMixingStatus.Parameters.AddWithValue("@Completed", 1);
                    //cmdUpdateMixingStatus.ExecuteNonQuery();

                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("SQL UPDATE COMMAND ERROR OCCURED :  Updating Orders table" + e);
                    InsertErrorLog(DateTime.Now.ToString("dd/MM/yyyy hh:mm:ss") + " Error on function UpdateMixingRawProdQty: " + e.Message);
                }
                finally
                {
                    conn.Close();
                }
            }
            return blockLogs;
        }

        /******************UPDATE MIXING PRODUCTION FOR UNFINISHED ORDERS*************/

        public static decimal UpdateUnfinishedOrders(ProductionHistory ph, List<GradingCompleted> ggList, Curing pendingCuring, string curDes)
        {
            decimal blockLogs = 0;
            int tmpShiftId = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdUpdateUnfinished = new SqlCommand("UPDATE MixingCompleted " +
                                                                "SET status = @Status, created_date = @CreatedDate, created_time = @CreatedTime " +
                                                                "WHERE id = @ID", conn);

                SqlCommand cmdGGCompleted = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM MixingGradesCompleted WHERE mixing_time_table_id=@MixingTimeTableID AND grading_id=@GradingID AND shift=@Shift AND order_type=@OrderType) " +
                                                           "INSERT INTO MixingGradesCompleted VALUES(@MixingTimeTableID,@GradingID,@KgCompleted,@Shift,@CreatedDate,@OrderType) " +
                                                           "ELSE " +
                                                           "UPDATE MixingGradesCompleted SET kg_completed += @KgCompleted WHERE mixing_time_table_id=@MixingTimeTableID AND grading_id=@GradingID AND shift=@Shift AND order_type=@OrderType", conn);

                SqlCommand cmdUpdateBlockLogCuring = new SqlCommand("UPDATE BlockLogCuring SET blc_start_time=@StartTime, blc_end_time=@EndTime,is_enabled=@IsEnabled " +
                                                                      "WHERE id = @ID", conn);

                SqlCommand cmdInsertCuring = new SqlCommand("INSERT INTO BlockLogCuring(blc_raw_product_id,product_id,order_id, blc_blocklog_qty, blc_start_time,blc_end_time,is_cured,is_enabled) " +
                                                            "VALUES (@RawProductID,@ProductID,@OrderID,@BlockLog,@StartTime,@EndTime,@IsCured,@IsEnabled)", conn);
                                                
                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {
                    cmdUpdateUnfinished.Transaction = trans;
                    cmdUpdateUnfinished.Parameters.AddWithValue("@ID", ph.ID);
                    cmdUpdateUnfinished.Parameters.AddWithValue("@Status", "Completed");
                    cmdUpdateUnfinished.Parameters.AddWithValue("@CreatedDate", DateTime.Now.Date);
                    cmdUpdateUnfinished.Parameters.AddWithValue("@CreatedTime", DateTime.Now.TimeOfDay);
                    int rows = cmdUpdateUnfinished.ExecuteNonQuery();

                    if (rows > 0)
                    {
                        if (curDes == "Up")
                        {
                            //Update curing
                            cmdUpdateBlockLogCuring.Transaction = trans;
                            cmdUpdateBlockLogCuring.Parameters.AddWithValue("@ID", pendingCuring.id);
                            cmdUpdateBlockLogCuring.Parameters.AddWithValue("@StartTime", pendingCuring.StartTime);
                            cmdUpdateBlockLogCuring.Parameters.AddWithValue("@EndTime", pendingCuring.EndTime);
                            cmdUpdateBlockLogCuring.Parameters.AddWithValue("@IsEnabled", pendingCuring.IsEnabled);
                            cmdUpdateBlockLogCuring.ExecuteNonQuery();
                        }
                        else
                        {
                            //Insert curing
                            cmdInsertCuring.Transaction = trans;
                            cmdInsertCuring.Parameters.AddWithValue("@RawProductID", pendingCuring.Product.RawProduct.RawProductID);
                            cmdInsertCuring.Parameters.AddWithValue("@ProductID", pendingCuring.Product.ProductID);
                            cmdInsertCuring.Parameters.AddWithValue("@OrderID", pendingCuring.OrderNo);
                            cmdInsertCuring.Parameters.AddWithValue("@BlockLog", pendingCuring.Qty);
                            cmdInsertCuring.Parameters.AddWithValue("@StartTime", pendingCuring.StartTime);
                            cmdInsertCuring.Parameters.AddWithValue("@EndTime", pendingCuring.EndTime);
                            cmdInsertCuring.Parameters.AddWithValue("@IsCured", pendingCuring.IsCured);
                            cmdInsertCuring.Parameters.AddWithValue("@IsEnabled", pendingCuring.IsEnabled);
                            cmdInsertCuring.ExecuteNonQuery();
                        }

                        //GradingCompleted     
                        foreach (var item in ggList)
                        {
                            cmdGGCompleted.Transaction = trans;
                            cmdGGCompleted.Parameters.AddWithValue("@MixingTimeTableID", item.ProdTimeTableID);
                            cmdGGCompleted.Parameters.AddWithValue("@GradingID", item.GradingID);
                            cmdGGCompleted.Parameters.AddWithValue("@KgCompleted", item.KGCompleted);
                            if (DateTime.Now.DayOfWeek == DayOfWeek.Friday)
                            {
                                cmdGGCompleted.Parameters.AddWithValue("@Shift", tmpShiftId);
                            }
                            else
                            {
                                cmdGGCompleted.Parameters.AddWithValue("@Shift", item.Shift);
                            }
                            cmdGGCompleted.Parameters.AddWithValue("@CreatedDate", item.CreatedDate);
                            cmdGGCompleted.Parameters.AddWithValue("@OrderType", 3);
                            cmdGGCompleted.ExecuteNonQuery();
                            cmdGGCompleted.Parameters.Clear();
                        }
                    }

                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("SQL UPDATE COMMAND ERROR OCCURED :  Updating Orders table" + e);
                    InsertErrorLog(DateTime.Now.ToString("dd/MM/yyyy hh:mm:ss") + " Error on function UpdateMixingRawProdQty: " + e.Message);
                }
                finally
                {
                    conn.Close();
                }
            }
            return blockLogs;
        }



        //public static int UpdateMixingRawProdQty(MixingProductionDetails mixingProductionDetails)
        //{
        //    int rows = 0;

        //    OrderStatus orderStatus = OrderStatus.Mixing;

        //    using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
        //    {
        //        using (SqlCommand cmdUpdateStatus = new SqlCommand("UPDATE MixingProductionDetails SET blocklog_qty = @logBlockParam WHERE raw_product_id = @rawProdId AND sales_id = @salesId AND status = @statusParam", conn))
        //        {
        //            conn.Open();
        //            try
        //            {
        //                cmdUpdateStatus.Parameters.AddWithValue("@rawProdId", mixingProductionDetails.RawProduct.RawProductID);
        //                cmdUpdateStatus.Parameters.AddWithValue("@logBlockParam", mixingProductionDetails.BlockLogQty - 1);
        //                cmdUpdateStatus.Parameters.AddWithValue("@salesId", mixingProductionDetails.SalesOrderId);
        //                cmdUpdateStatus.Parameters.AddWithValue("@statusParam", orderStatus.ToString());


        //                rows = cmdUpdateStatus.ExecuteNonQuery();
        //            }
        //            catch (Exception e)
        //            {
        //                Debug.WriteLine("SQL UPDATE COMMAND ERROR OCCURED :  Updating Orders table" + e);
        //            }
        //            finally
        //            {
        //                conn.Close();
        //            }
        //        }
        //    }
        //    return rows;
        //}

        /*****************END OFORDER PRODUCTION*****************/

        public static int UpdatePeeling(PeelingConfirmationViewModel pcvm, PeelingOrder po)
        {
            int result = 0;
            int tmpShiftId = 0;
            string pcName = string.Empty;
            pcName = System.Environment.MachineName;
            if (string.IsNullOrEmpty(pcName))
            {
                pcName = "Unknown";
            }

            //Check if it is friday
            if (DateTime.Now.DayOfWeek == DayOfWeek.Friday)
            {
                if ((DateTime.Now.TimeOfDay >= new TimeSpan(5, 30, 0)) && (DateTime.Now.TimeOfDay <= new TimeSpan(11, 29, 58)))
                {
                    tmpShiftId = 1;
                }
                else if ((DateTime.Now.TimeOfDay >= new TimeSpan(11, 30, 0)) && (DateTime.Now.TimeOfDay <= new TimeSpan(17, 14, 58)))
                {
                    tmpShiftId = 2;
                }
                else
                {
                    tmpShiftId = 3;
                }
            }
            else
            {
                tmpShiftId = pcvm.currentShift;
            }

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {

                SqlCommand cmdUpdatePeelingOrders = new SqlCommand("UPDATE PeelingOrders SET qty=@Qty,logs= @Logs, dollar_value = @DollarValue WHERE id = @PeelingID", conn);

                SqlCommand cmdPeelingCompleted = new SqlCommand("INSERT INTO PeelingCompleted(peeling_timetable_id,order_no,product_id,raw_product_id,no_of_logs,tot_yield_cut,order_type,shift,completed_by,created_date,created_time) " +
                                                                "VALUES (@PeelingTimeTableID,@OrderNo,@ProductID,@RawProductID,@NoOfLogs,@TotYieldCut,@OrderType,@Shift,@CompletedBy,@CreatedDate,@CreatedTime)", conn);
                /**Update RowStockReserve**/
                SqlCommand cmdUpdateRowStockReserve = new SqlCommand("UPDATE RawStockReserve SET blocks_logs -= @BlocksLogs WHERE sales_id=@SalesNo AND raw_product_id = @RawProductID AND product_id=@ProductID", conn);
                SqlCommand cmdDeleteStockReserve = new SqlCommand("DELETE RawStockReserve WHERE blocks_logs <= 0", conn);


                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {

                    //Update existing slitting details with new details
                    cmdUpdatePeelingOrders.Transaction = trans;
                    cmdUpdatePeelingOrders.Parameters.AddWithValue("@PeelingID", po.ID);
                    cmdUpdatePeelingOrders.Parameters.AddWithValue("@Logs", po.Logs);
                    cmdUpdatePeelingOrders.Parameters.AddWithValue("@Qty", po.Qty);
                    cmdUpdatePeelingOrders.Parameters.AddWithValue("@DollarValue", po.DollarValue);
                    int peelingRes = cmdUpdatePeelingOrders.ExecuteNonQuery();

                    /**Peeling Completed**/
                    if (peelingRes > 0)
                    {
                        cmdPeelingCompleted.Transaction = trans;
                        cmdPeelingCompleted.Parameters.AddWithValue("@PeelingTimeTableID", pcvm.peelingProductionDetails.ProdTimetableID);
                        cmdPeelingCompleted.Parameters.AddWithValue("@OrderNo", pcvm.peelingProductionDetails.Order.OrderNo);
                        cmdPeelingCompleted.Parameters.AddWithValue("@ProductID", pcvm.peelingProductionDetails.Product.ProductID);
                        cmdPeelingCompleted.Parameters.AddWithValue("@RawProductID", pcvm.peelingProductionDetails.Product.RawProduct.RawProductID);
                        cmdPeelingCompleted.Parameters.AddWithValue("@NoOfLogs", 1);
                        cmdPeelingCompleted.Parameters.AddWithValue("@TotYieldCut", pcvm.TotalYieldCut);
                        cmdPeelingCompleted.Parameters.AddWithValue("@OrderType", pcvm.peelingProductionDetails.Order.OrderType);
                        cmdPeelingCompleted.Parameters.AddWithValue("@Shift", tmpShiftId);
                        cmdPeelingCompleted.Parameters.AddWithValue("@CompletedBy", pcName);
                        cmdPeelingCompleted.Parameters.AddWithValue("@CreatedDate", DateTime.Now.Date);
                        cmdPeelingCompleted.Parameters.AddWithValue("@CreatedTime", DateTime.Now.TimeOfDay);
                        result = cmdPeelingCompleted.ExecuteNonQuery();
                    }

                    cmdUpdateRowStockReserve.Transaction = trans;
                    cmdUpdateRowStockReserve.Parameters.AddWithValue("@SalesNo", pcvm.peelingProductionDetails.Order.OrderNo);
                    cmdUpdateRowStockReserve.Parameters.AddWithValue("@RawProductID", pcvm.peelingProductionDetails.Product.RawProduct.RawProductID);
                    cmdUpdateRowStockReserve.Parameters.AddWithValue("@ProductID", pcvm.peelingProductionDetails.Product.ProductID);
                    cmdUpdateRowStockReserve.Parameters.AddWithValue("@BlocksLogs", 1);
                    cmdUpdateRowStockReserve.ExecuteNonQuery();

                    //Delete records which has zeros
                    cmdDeleteStockReserve.Transaction = trans;
                    cmdDeleteStockReserve.ExecuteNonQuery();

                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("Error Updating Slitting Information: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return result;
        }


        public static int UpdateSlittingOrder(SlittingConfirmationViewModel slittingProduction, SlittingOrder soUpdate)
        {
            //int rows = 0;
            Int32 slittingCompletedId = 0;
            int tmpShiftId = 0;
            //decimal totQty = 0;
            //decimal totBlocks = 0;
            //decimal totDollarValue = 0;


            string userName = System.Security.Principal.WindowsIdentity.GetCurrent().Name;
            if (String.IsNullOrEmpty(userName))
            {
                userName = "Unknown";
            }
            //Check if it is friday
            if (DateTime.Now.DayOfWeek == DayOfWeek.Friday)
            {

                if ((DateTime.Now.TimeOfDay >= new TimeSpan(5, 30, 0)) && (DateTime.Now.TimeOfDay <= new TimeSpan(11, 29, 58)))
                {
                    tmpShiftId = 1;
                }
                else if ((DateTime.Now.TimeOfDay >= new TimeSpan(11, 30, 0)) && (DateTime.Now.TimeOfDay <= new TimeSpan(17, 14, 58)))
                {
                    tmpShiftId = 2;
                }
                else
                {
                    tmpShiftId = 3;
                }
            }
            else
            {
                tmpShiftId = slittingProduction.currentShift;
            }

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {

                SqlCommand cmdUpdateSlitting = new SqlCommand("UPDATE SlittingOrders SET qty=@Qty,blocks = @BlockQty, dollar_value = @DollarValue WHERE id = @SlittingID", conn);

                /**Off-Spec***/
                SqlCommand cmdOffSpec = new SqlCommand("INSERT INTO OffSpec(sales_id,product_id,qty,lm,m2,kg,per_cost,total_cost,date_entered,time_entered,entered_by) " +
                                                       "OUTPUT INSERTED.ID VALUES (@order_no,@ProductID,@Qty,@Lm,@M2,@Kg,@PerCost,@TotCost,@DateEntered,@TimeEntered,@EnteredBy)", conn);
                /**Shredding**/
                //SqlCommand cmdShredding = new SqlCommand("INSERT INTO Shredding(order_no,slitting_id,product_id,qty) OUTPUT INSERTED.id VALUES (@OrderNo,@SlittingID,@ProductID,@Qty)", conn);

                SqlCommand cmdSlittingCompleted = new SqlCommand("INSERT INTO SlittingCompleted(slitting_timetable_id,order_no,product_id,raw_product_id,no_of_blocks,tot_yield_cut,off_spec_tiles,shredding,order_type,shift,completed_by,created_date,created_time) " +
                                                                "OUTPUT INSERTED.ID VALUES (@SlittingimeTableID,@OrderNo,@ProductID,@RawProductID,@NoOfBlocks,@TotYieldCut,@OffSpecTiles,@Shredding,@OrderType,@Shift,@CompletedBy,@CreatedDate,@CreatedTime)", conn);

                /**SlittingDefectReasons**/               
                SqlCommand cmdSlittingDefectRes = new SqlCommand("INSERT INTO SlittingDefectReasons(slitting_completed_id,order_no,ref_id,type,lifted_off_boad,uneven_thickness,stone_lines,too_thick,too_thin,damaged_block_log,contaminated,operator_error,other,other_comment) " +
                                                                 "VALUES (@SlitCompID,@OrderNo,@RefID,@Type,@LiftedOffBoard,@UnevenThickness,@StoneLines,@TooThick,@TooThin,@DamagedBlockLog,@Contaminated,@OperatorError,@Other,@OtherComment)", conn);

                /**Update RowStockReserve**/
                //SqlCommand cmdRawStockReserve = new SqlCommand("SELECT * FROM RawStockReserve WHERE sales_id=@SalesNo AND raw_product_id = @RawProductID AND product_id=@ProductID ORDER BY qty DESC", conn);
                
                SqlCommand cmdUpdateRowStockReserve = new SqlCommand("UPDATE RawStockReserve SET blocks_logs -= @BlocksLogs " +
                                                                     "WHERE sales_id=@SalesNo AND raw_product_id = @RawProductID AND product_id=@ProductID", conn);
                SqlCommand cmdDeleteStockReserve = new SqlCommand("DELETE RawStockReserve WHERE blocks_logs <= 0", conn);


                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {
                    
                    //Update slitting order 
                    cmdUpdateSlitting.Transaction = trans;
                    cmdUpdateSlitting.Parameters.AddWithValue("@SlittingID", slittingProduction.slittingProductionDetails.ID);
                    cmdUpdateSlitting.Parameters.AddWithValue("@Qty", soUpdate.Qty);
                    cmdUpdateSlitting.Parameters.AddWithValue("@BlockQty", soUpdate.Blocks);
                    cmdUpdateSlitting.Parameters.AddWithValue("@DollarValue", soUpdate.DollarValue);
                    int slittingRes = cmdUpdateSlitting.ExecuteNonQuery();

                    /**Slitting Completed**/
                    if (slittingRes > 0)
                    {
                        cmdSlittingCompleted.Transaction = trans;
                        cmdSlittingCompleted.Parameters.AddWithValue("@SlittingimeTableID", slittingProduction.slittingProductionDetails.ProdTimetableID);
                        cmdSlittingCompleted.Parameters.AddWithValue("@OrderNo", slittingProduction.slittingProductionDetails.Order.OrderNo);
                        cmdSlittingCompleted.Parameters.AddWithValue("@ProductID", slittingProduction.slittingProductionDetails.Product.ProductID);
                        cmdSlittingCompleted.Parameters.AddWithValue("@RawProductID", slittingProduction.slittingProductionDetails.Product.RawProduct.RawProductID);
                        cmdSlittingCompleted.Parameters.AddWithValue("@NoOfBlocks", slittingProduction.NoOfBlocksSlit);
                        cmdSlittingCompleted.Parameters.AddWithValue("@TotYieldCut", slittingProduction.TotalYieldCut);
                        cmdSlittingCompleted.Parameters.AddWithValue("@OffSpecTiles", slittingProduction.OffSpecTiles);
                        cmdSlittingCompleted.Parameters.AddWithValue("@Shredding", 0);
                        cmdSlittingCompleted.Parameters.AddWithValue("@OrderType", slittingProduction.slittingProductionDetails.Order.OrderType);
                        cmdSlittingCompleted.Parameters.AddWithValue("@Shift", tmpShiftId);
                        cmdSlittingCompleted.Parameters.AddWithValue("@CompletedBy", userName);
                        cmdSlittingCompleted.Parameters.AddWithValue("@CreatedDate", DateTime.Now.Date);
                        cmdSlittingCompleted.Parameters.AddWithValue("@CreatedTime", DateTime.Now.TimeOfDay);
                        slittingCompletedId = (Int32)cmdSlittingCompleted.ExecuteScalar();          
                    }

                    /**Off-Spec***/
                    if (slittingProduction.OffSpecTiles > 0)
                    {
                        //cmdOffSpec.Transaction = trans;
                        //cmdOffSpec.Parameters.AddWithValue("@OrderNo", slittingProduction.slittingProductionDetails.Order.OrderNo);
                        //cmdOffSpec.Parameters.AddWithValue("@SlittingID", slittingProduction.slittingProductionDetails.ID);
                        //cmdOffSpec.Parameters.AddWithValue("@ProductID", slittingProduction.slittingProductionDetails.Product.ProductID);
                        //cmdOffSpec.Parameters.AddWithValue("@Qty", slittingProduction.OffSpecTiles);
                        //Int32 offSpecId = (Int32)cmdOffSpec.ExecuteScalar();

                        cmdOffSpec.Transaction = trans;
                        cmdOffSpec.Parameters.AddWithValue("@order_no", slittingProduction.slittingProductionDetails.Order.OrderNo);
                        cmdOffSpec.Parameters.AddWithValue("@ProductID", slittingProduction.slittingProductionDetails.Product.ProductID);
                        cmdOffSpec.Parameters.AddWithValue("@Qty", slittingProduction.OffSpecTiles);
                        cmdOffSpec.Parameters.AddWithValue("@Lm", 0);
                        cmdOffSpec.Parameters.AddWithValue("@M2", 0);
                        cmdOffSpec.Parameters.AddWithValue("@Kg", 0);
                        cmdOffSpec.Parameters.AddWithValue("@PerCost", 0);
                        cmdOffSpec.Parameters.AddWithValue("@TotCost", 0);
                        cmdOffSpec.Parameters.AddWithValue("@DateEntered", DateTime.Now.Date);
                        cmdOffSpec.Parameters.AddWithValue("@TimeEntered", DateTime.Now.TimeOfDay);
                        cmdOffSpec.Parameters.AddWithValue("@EnteredBy", userName);
                        Int32 offSpecId = (Int32)cmdOffSpec.ExecuteScalar();                        

                        /**Off-Spec Reasons***/
                        cmdSlittingDefectRes.Transaction = trans;
                        cmdSlittingDefectRes.Parameters.AddWithValue("@SlitCompID", slittingCompletedId);
                        cmdSlittingDefectRes.Parameters.AddWithValue("@OrderNo", slittingProduction.slittingProductionDetails.Order.OrderNo);
                        cmdSlittingDefectRes.Parameters.AddWithValue("@RefID", offSpecId);
                        cmdSlittingDefectRes.Parameters.AddWithValue("@Type", "OffSpec");
                        cmdSlittingDefectRes.Parameters.AddWithValue("@LiftedOffBoard", slittingProduction.IsLiftedOffBoard);
                        cmdSlittingDefectRes.Parameters.AddWithValue("@UnevenThickness", slittingProduction.IsUnevenThickness);
                        cmdSlittingDefectRes.Parameters.AddWithValue("@StoneLines", slittingProduction.IsStonelines);
                        cmdSlittingDefectRes.Parameters.AddWithValue("@TooThick", slittingProduction.IsTooThick);
                        cmdSlittingDefectRes.Parameters.AddWithValue("@TooThin", slittingProduction.IsTooThin);
                        cmdSlittingDefectRes.Parameters.AddWithValue("@DamagedBlockLog", slittingProduction.IsDamaged);
                        cmdSlittingDefectRes.Parameters.AddWithValue("@Contaminated", slittingProduction.IsContaminated);
                        cmdSlittingDefectRes.Parameters.AddWithValue("@OperatorError", slittingProduction.IsOperatorError);
                        cmdSlittingDefectRes.Parameters.AddWithValue("@Other", slittingProduction.IsOther);
                        cmdSlittingDefectRes.Parameters.AddWithValue("@OtherComment", slittingProduction.OtherText);
                        cmdSlittingDefectRes.ExecuteScalar();
                        cmdSlittingDefectRes.Parameters.Clear();
                    }

                    /**Shredding***/
                    //if (slittingProduction.ShreddedTiles > 0)
                    //{
                    //    cmdShredding.Transaction = trans;
                    //    cmdShredding.Parameters.AddWithValue("@OrderNo", slittingProduction.slittingProductionDetails.Order.OrderNo);
                    //    cmdShredding.Parameters.AddWithValue("@SlittingID", slittingProduction.slittingProductionDetails.ID);
                    //    cmdShredding.Parameters.AddWithValue("@ProductID", slittingProduction.slittingProductionDetails.Product.ProductID);
                    //    cmdShredding.Parameters.AddWithValue("@Qty", slittingProduction.ShreddedTiles);
                    //    Int32 shreddingId = (Int32)cmdShredding.ExecuteScalar();

                    //    /**Shredding Reasons***/
                    //    cmdSlittingDefectRes.Transaction = trans;
                    //    cmdSlittingDefectRes.Parameters.AddWithValue("@OrderNo", slittingProduction.slittingProductionDetails.Order.OrderNo);
                    //    cmdSlittingDefectRes.Parameters.AddWithValue("@RefID", shreddingId);
                    //    cmdSlittingDefectRes.Parameters.AddWithValue("@Type", "Shredding");
                    //    cmdSlittingDefectRes.Parameters.AddWithValue("@LiftedOffBoard", slittingProduction.IsLiftedOffBoardShredded);
                    //    cmdSlittingDefectRes.Parameters.AddWithValue("@UnevenThickness", slittingProduction.IsUnevenThicknessShredded);
                    //    cmdSlittingDefectRes.Parameters.AddWithValue("@StoneLines", slittingProduction.IsStonelinesShredded);
                    //    cmdSlittingDefectRes.Parameters.AddWithValue("@TooThick", slittingProduction.IsTooThickShredded);
                    //    cmdSlittingDefectRes.Parameters.AddWithValue("@TooThin", slittingProduction.IsTooThinShredded);
                    //    cmdSlittingDefectRes.Parameters.AddWithValue("@DamagedBlockLog", slittingProduction.IsDamagedShredded);
                    //    cmdSlittingDefectRes.Parameters.AddWithValue("@Contaminated", slittingProduction.IsContaminatedShredded);
                    //    cmdSlittingDefectRes.Parameters.AddWithValue("@OperatorError", slittingProduction.IsOperatorErrorShredded);
                    //    cmdSlittingDefectRes.Parameters.AddWithValue("@Other", slittingProduction.IsOtherShredded);
                    //    cmdSlittingDefectRes.ExecuteScalar();
                    //}


                    cmdUpdateRowStockReserve.Transaction = trans;
                    cmdUpdateRowStockReserve.Parameters.AddWithValue("@SalesNo", slittingProduction.slittingProductionDetails.Order.OrderNo);
                    cmdUpdateRowStockReserve.Parameters.AddWithValue("@RawProductID", slittingProduction.slittingProductionDetails.Product.RawProduct.RawProductID);
                    cmdUpdateRowStockReserve.Parameters.AddWithValue("@ProductID", slittingProduction.slittingProductionDetails.Product.ProductID);
                    cmdUpdateRowStockReserve.Parameters.AddWithValue("@BlocksLogs", slittingProduction.NoOfBlocksSlit);
                    int r = cmdUpdateRowStockReserve.ExecuteNonQuery();

                    //Delete records which has zeros
                    cmdDeleteStockReserve.Transaction = trans;
                    cmdDeleteStockReserve.ExecuteNonQuery();



                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("Error Updating Slitting Information: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return slittingCompletedId;
        }





        public static PendingSlitPeel GetPendingSlittingOrder(SlittingConfirmationViewModel slittingProduction)
        {
            PendingSlitPeel ps = new PendingSlitPeel();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdSelectSlitting = new SqlCommand("SELECT * FROM PendingSlitPeel WHERE order_no = @OrderNo AND raw_product_id=@RawProductID AND product_id=@ProductID", conn);

                conn.Open();
                try
                {
                    //Read existing slitting details
                    cmdSelectSlitting.Parameters.AddWithValue("@OrderNo", slittingProduction.slittingProductionDetails.Order.OrderNo);
                    cmdSelectSlitting.Parameters.AddWithValue("@RawProductID", slittingProduction.slittingProductionDetails.Product.RawProduct.RawProductID);
                    cmdSelectSlitting.Parameters.AddWithValue("@ProductID", slittingProduction.slittingProductionDetails.Product.ProductID);
                    using (SqlDataReader dr = cmdSelectSlitting.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    ps.Qty = Convert.ToDecimal(dr["qty"]);
                                    ps.BlockLogQty = Convert.ToDecimal(dr["blocks_logs"]);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error Updating Slitting Information: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return ps;
        }

        public static PendingOrder GetPendingOrder(Int64 orderNo, int rawProductId, int productId)
        {
            PendingOrder po = new PendingOrder();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdSelectSlitting = new SqlCommand("SELECT * FROM PendingOrder WHERE order_id = @OrderNo AND product_id=@ProductID", conn);

                conn.Open();
                try
                {
                    //Read existing slitting details
                    cmdSelectSlitting.Parameters.AddWithValue("@OrderNo", orderNo);
                    cmdSelectSlitting.Parameters.AddWithValue("@RawProductID", rawProductId);
                    cmdSelectSlitting.Parameters.AddWithValue("@ProductID", productId);
                    using (SqlDataReader dr = cmdSelectSlitting.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    po.Qty = Convert.ToDecimal(dr["qty"]);
                                    po.BlockLogQty = Convert.ToDecimal(dr["blocks_logs"]);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error Updating Slitting Information: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return po;
        }

        public static List<OrderDetails> GetOrderDetailsByRawProductAndProduct(Int32 orderNo, int rawProductId)
        {
            List<OrderDetails> orderDetails = new List<OrderDetails>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdSelectSlitting = new SqlCommand("SELECT * FROM OrderDetails WHERE order_id = @OrderNo AND raw_product_id=@RawProductID", conn);

                conn.Open();
                try
                {
                    //Read existing slitting details
                    cmdSelectSlitting.Parameters.AddWithValue("@OrderNo", orderNo);
                    cmdSelectSlitting.Parameters.AddWithValue("@RawProductID", rawProductId);
                    using (SqlDataReader dr = cmdSelectSlitting.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    OrderDetails od = new OrderDetails();
                                    od.Product = new Product() { ProductID = Convert.ToInt16(dr["product_id"]), RawProduct = new RawProduct() { RawProductID = Convert.ToInt16(dr["raw_product_id"]) } };
                                    od.BlocksLogsToMake = Convert.ToDecimal(dr["blocks_logs"]);
                                    od.Quantity = Convert.ToDecimal(dr["qty"]);
                                    orderDetails.Add(od);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error Updating Slitting Information: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return orderDetails;
        }

        //public static List<MixingCuringLink> GetOrderDetailsByRawProductAndProduct(Int32 OrderNo, int RawProductID,int ProductID)
        //{
        //    List<MixingCuringLink> mixingCuringLink = new List<MixingCuringLink>();

        //    using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
        //    {
        //        SqlCommand cmdSelectSlitting = new SqlCommand("SELECT * FROM MixingCuringList WHERE order_no = @OrderNo AND raw_product_id=@RawProductID AND product_id=@ProductID", conn);

        //        conn.Open();
        //        try
        //        {
        //            //Read existing slitting details
        //            cmdSelectSlitting.Parameters.AddWithValue("@OrderNo", OrderNo);
        //            cmdSelectSlitting.Parameters.AddWithValue("@RawProductID", RawProductID);
        //            cmdSelectSlitting.Parameters.AddWithValue("@ProductID", ProductID);
        //            using (SqlDataReader dr = cmdSelectSlitting.ExecuteReader())
        //            {
        //                if (dr != null)
        //                {
        //                    if (dr.HasRows)
        //                    {
        //                        while (dr.Read())
        //                        {
        //                            MixingCuringLink mcl = new MixingCuringLink();
        //                            mcl.ID = Convert.ToInt32(dr["id"]);
        //                            mcl.OrderNo = Convert.ToInt32(dr["order_no"]);
        //                            mcl.ProductID = Convert.ToInt16(dr["product_id"]);
        //                            mcl.RawProductID = Convert.ToInt16(dr["raw_product_id"]);
        //                            mixingCuringLink.Add(mcl);
        //                        }
        //                    }
        //                }
        //            }
        //        }
        //        catch (Exception e)
        //        {
        //            Debug.WriteLine("Error Updating Slitting Information: " + e);
        //        }
        //        finally
        //        {
        //            conn.Close();
        //        }
        //    }

        //    return mixingCuringLink;
        //}

        public static Tuple<decimal, decimal> GetTotalSlittingCompleted(Int64 orderNo, int rawProductId, int productId)
        {
            decimal qty = 0;
            decimal noOfBlocks = 0;


            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdSelectSlitting = new SqlCommand("SELECT no_of_blocks,tot_yield_cut FROM SlittingCompleted WHERE order_no = @OrderNo AND product_id=@ProductID", conn);

                conn.Open();
                try
                {
                    //Read existing slitting details
                    cmdSelectSlitting.Parameters.AddWithValue("@OrderNo", orderNo);
                    cmdSelectSlitting.Parameters.AddWithValue("@RawProductID", rawProductId);
                    cmdSelectSlitting.Parameters.AddWithValue("@ProductID", productId);
                    using (SqlDataReader dr = cmdSelectSlitting.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    qty += Convert.ToDecimal(dr["tot_yield_cut"]);
                                    noOfBlocks += Convert.ToDecimal(dr["no_of_blocks"]);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error Updating Slitting Information: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            Tuple<decimal, decimal> elements = new Tuple<decimal, decimal>(qty, noOfBlocks);

            return elements;
        }

        public static decimal GetTotalpeelingCompleted(Int64 orderNo, Product product)
        {
            decimal qty = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdSelectSlitting = new SqlCommand("SELECT tot_yield_cut FROM PeelingCompleted " +
                                                              "WHERE order_no = @OrderNo AND raw_product_id=@RawProductID AND product_id=@ProductID AND tot_yield_cut >= @MaxYield", conn);

                conn.Open();
                try
                {
                    //Read existing slitting details
                    cmdSelectSlitting.Parameters.AddWithValue("@OrderNo", orderNo);
                    cmdSelectSlitting.Parameters.AddWithValue("@RawProductID", product.RawProduct.RawProductID);
                    cmdSelectSlitting.Parameters.AddWithValue("@ProductID", product.ProductID);
                    cmdSelectSlitting.Parameters.AddWithValue("@MaxYield", product.Tile.MaxYield);
                    using (SqlDataReader dr = cmdSelectSlitting.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    qty += Math.Floor(Convert.ToDecimal(dr["tot_yield_cut"]) / product.Tile.MaxYield);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error Updating Slitting Information: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return qty;
        }


        public static decimal GetTotalReRollingCompleted(Int64 orderNo, int productId)
        {
            decimal qty = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdSelectSlitting = new SqlCommand("SELECT rolls FROM ReRollingCompleted WHERE sales_id = @OrderNo AND product_id=@ProductID", conn);

                conn.Open();
                try
                {
                    //Read existing slitting details
                    cmdSelectSlitting.Parameters.AddWithValue("@OrderNo", orderNo);
                    cmdSelectSlitting.Parameters.AddWithValue("@ProductID", productId);
                    using (SqlDataReader dr = cmdSelectSlitting.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    qty += Convert.ToDecimal(dr["rolls"]);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error Updating Slitting Information: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return qty;
        }

        public static SlittingOrder GetSlittingOrderByID(Int32 id)
        {
            SlittingOrder so = new SlittingOrder();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdSelectSlitting = new SqlCommand("SELECT * FROM SlittingOrders WHERE id = @Id", conn);

                conn.Open();
                try
                {
                    //Read existing slitting details
                    cmdSelectSlitting.Parameters.AddWithValue("@Id", id);


                    using (SqlDataReader dr = cmdSelectSlitting.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    so.Qty = Convert.ToDecimal(dr["qty"]);
                                    so.Blocks = Convert.ToDecimal(dr["blocks"]);
                                    so.DollarValue = Convert.ToDecimal(dr["dollar_value"]);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error Updating Slitting Information: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return so;
        }

        public static List<SlittingOrder> GetAllSlittingOrderByID(Int64 orderNo, int productId, int rawproductId)
        {
            List<SlittingOrder> slittingOrders = new List<SlittingOrder>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdSelectSlitting = new SqlCommand("SELECT * FROM SlittingOrders WHERE order_no = @OrderNo AND product_id=@ProductId", conn);

                conn.Open();
                try
                {
                    //Read existing slitting details
                    cmdSelectSlitting.Parameters.AddWithValue("@OrderNo", orderNo);
                    cmdSelectSlitting.Parameters.AddWithValue("@ProductId", productId);
                    cmdSelectSlitting.Parameters.AddWithValue("@RawProductId", rawproductId);

                    using (SqlDataReader dr = cmdSelectSlitting.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    SlittingOrder so = new SlittingOrder();
                                    so.Qty = Convert.ToDecimal(dr["qty"]);
                                    so.Blocks = Convert.ToDecimal(dr["blocks"]);
                                    so.DollarValue = Convert.ToDecimal(dr["dollar_value"]);
                                    slittingOrders.Add(so);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error Updating Slitting Information: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return slittingOrders;
        }

        /******************UPDATE PEELING QTY*************/
        public static int UpdatePeelingQty(PeelingConfirmationViewModel peelingConfirmationViewModel)
        {
            int rows = 0;
            //decimal totBlockLog = 0;
            //using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            //{
            //    SqlCommand cmdSelectBlock = new SqlCommand("SELECT rs_qty FROM RawStock WHERE rs_raw_product_id = @rawProductIdParam", conn);
            //    SqlCommand cmdUpdateRawStock = new SqlCommand("UPDATE RawStock SET rs_qty = @blockLogQtyParam WHERE rs_raw_product_id = @rawProductIdParam", conn);

            //    SqlCommand cmdUpdateSlitPeelProd = new SqlCommand("UPDATE SlitPeel SET qty_to_make = @TilesToCut, blocks_logs = @BlocksLogs " +
            //                                                      "WHERE prod_time_table_id = @ProdTimeTableID AND sales_order_id = @SalesOrderID AND product_id = @ProductID AND shift = @Shift", conn);


            //    SqlCommand cmdDeleteSP = new SqlCommand("DELETE FROM SlitPeel WHERE prod_time_table_id = @ProdTimeTableID AND sales_order_id = @SalesOrderID AND product_id = @ProductID AND shift = @Shift", conn);

            //    SqlCommand cmdInsertOffSpec = new SqlCommand("INSERT INTO OffSpec(slit_peel_production_id,product_id,qty) " +
            //                                                 "OUTPUT INSERTED.id VALUES (@slitPeelProdId,@productId,@qty)", conn);

            //    SqlCommand cmdInsertOffSpecReasons = new SqlCommand("INSERT INTO OffSpecReasons(off_spec_id,lifted_off_boad,uneven_thickness,too_thick,too_thin,stone_lines,damaged_block_log,contaminated,operator_error,other) " +
            //                                                        "VALUES (@offSpecId,@liftedOffBoard,@unevenThickness,@tooThick,@tooThin,@stoneLines,@damagedBlockLog,@contaminated,@operatorError,@other)", conn);
            //    SqlTransaction trans = null;
            //    conn.Open();
            //    trans = conn.BeginTransaction();
            //    try
            //    {

            //        decimal totToDo = 0;
            //        decimal totToDeduct = 0;
            //        decimal totExtra = 0;
            //        if (peelingConfirmationViewModel.BlocksCompleted <= peelingConfirmationViewModel.peelingProductionDetails.SlitPeel.OriginalBlockLogs)
            //        {
            //            totToDo = peelingConfirmationViewModel.peelingProductionDetails.SlitPeel.OriginalBlockLogs - peelingConfirmationViewModel.BlocksCompleted;
            //            totToDeduct = peelingConfirmationViewModel.peelingProductionDetails.SlitPeel.OriginalBlockLogs - totToDo;
            //        }
            //        else
            //        {
            //            totToDeduct = peelingConfirmationViewModel.peelingProductionDetails.SlitPeel.OriginalBlockLogs;
            //            totToDo = 0;
            //            totExtra = peelingConfirmationViewModel.BlocksCompleted - totToDeduct;
            //        }

            //        cmdSelectBlock.Transaction = trans;
            //        cmdSelectBlock.Parameters.AddWithValue("@rawProductIdParam", peelingConfirmationViewModel.peelingProductionDetails.Product.RawProduct.RawProductID);
            //        using (SqlDataReader dr = cmdSelectBlock.ExecuteReader())
            //        {
            //            if (dr != null)
            //            {
            //                if (dr.HasRows)
            //                {
            //                    while (dr.Read())
            //                    {
            //                        totBlockLog = Convert.ToDecimal(dr["rs_qty"]);
            //                    }
            //                }
            //            }
            //        }

            //        if (totBlockLog < 0)
            //        {
            //            totBlockLog = 0;
            //        }

            //        if (totBlockLog != 0)
            //        {
            //            totBlockLog = totBlockLog - totToDeduct;
            //            ////UPDATE RAWSTOCK
            //            //cmdUpdateRawStock.Transaction = trans;
            //            //cmdUpdateRawStock.Parameters.AddWithValue("@rawProductIdParam", peelingConfirmationViewModel.peelingProductionDetails.Product.RawProductID);
            //            //cmdUpdateRawStock.Parameters.AddWithValue("@blockLogQtyParam", totBlockLog);
            //            //cmdUpdateRawStock.ExecuteNonQuery();

            //            decimal blksToDo = 0;
            //           // blksToDo = Math.Round(peelingConfirmationViewModel.TilesToDo / peelingConfirmationViewModel.peelingProductionDetails.Product.MaxItemsPer,2);
            //            //UPDATE SLITPEEL
            //            cmdUpdateSlitPeelProd.Transaction = trans;
            //            cmdUpdateSlitPeelProd.Parameters.AddWithValue("@ProdTimeTableID", peelingConfirmationViewModel.peelingProductionDetails.SlitPeel.ProdTimeTableID);
            //            cmdUpdateSlitPeelProd.Parameters.AddWithValue("@SalesOrderID", peelingConfirmationViewModel.peelingProductionDetails.salesOrderID);
            //            cmdUpdateSlitPeelProd.Parameters.AddWithValue("@ProductID", peelingConfirmationViewModel.peelingProductionDetails.Product.ProductID);
            //            cmdUpdateSlitPeelProd.Parameters.AddWithValue("@TilesToCut", peelingConfirmationViewModel.TilesToDo);
            //            cmdUpdateSlitPeelProd.Parameters.AddWithValue("@BlocksLogs", blksToDo);
            //            cmdUpdateSlitPeelProd.Parameters.AddWithValue("@Shift", peelingConfirmationViewModel.peelingProductionDetails.SlitPeel.Shift);
            //            cmdUpdateSlitPeelProd.ExecuteNonQuery();

            //            if (peelingConfirmationViewModel.TilesToDo == 0)
            //            {
            //                //DELETE THE ORDER FROM SLITPEELPRODUCTION
            //                cmdDeleteSP.Transaction = trans;
            //                cmdDeleteSP.Parameters.AddWithValue("@ProdTimeTableID", peelingConfirmationViewModel.peelingProductionDetails.SlitPeel.ProdTimeTableID);
            //                cmdDeleteSP.Parameters.AddWithValue("@SalesOrderID", peelingConfirmationViewModel.peelingProductionDetails.salesOrderID);
            //                cmdDeleteSP.Parameters.AddWithValue("@ProductID", peelingConfirmationViewModel.peelingProductionDetails.Product.ProductID);
            //                cmdDeleteSP.Parameters.AddWithValue("@Shift", peelingConfirmationViewModel.peelingProductionDetails.SlitPeel.Shift);
            //                rows = cmdDeleteSP.ExecuteNonQuery();
            //            }
            //            rows = 1;
            //        }
            //        else
            //        {
            //            rows = 2;
            //        }
            //        /** ADDING TO OFF SPEC IF ANY **/

            //        if (peelingConfirmationViewModel.OffSpecTiles != 0)
            //        {
            //            cmdInsertOffSpec.Transaction = trans;
            //            cmdInsertOffSpec.Parameters.AddWithValue("@slitPeelProdId", peelingConfirmationViewModel.peelingProductionDetails.SlitPeel.ID);
            //            cmdInsertOffSpec.Parameters.AddWithValue("@productId", peelingConfirmationViewModel.peelingProductionDetails.Product.ProductID);
            //            cmdInsertOffSpec.Parameters.AddWithValue("@qty", peelingConfirmationViewModel.OffSpecTiles);
            //            Int32 offSpecId = (Int32)cmdInsertOffSpec.ExecuteScalar();

            //            /** ADDING TO OFF SPEC REASONS **/
            //            cmdInsertOffSpecReasons.Transaction = trans;
            //            cmdInsertOffSpecReasons.Parameters.AddWithValue("@offSpecId", offSpecId);
            //            cmdInsertOffSpecReasons.Parameters.AddWithValue("@liftedOffBoard", peelingConfirmationViewModel.IsLiftedOffBoard);
            //            cmdInsertOffSpecReasons.Parameters.AddWithValue("@unevenThickness", peelingConfirmationViewModel.IsUnevenThickness);
            //            cmdInsertOffSpecReasons.Parameters.AddWithValue("@tooThick", peelingConfirmationViewModel.IsTooThick);
            //            cmdInsertOffSpecReasons.Parameters.AddWithValue("@tooThin", peelingConfirmationViewModel.IsTooThin);
            //            cmdInsertOffSpecReasons.Parameters.AddWithValue("@stoneLines", peelingConfirmationViewModel.IsStonelines);
            //            cmdInsertOffSpecReasons.Parameters.AddWithValue("@damagedBlockLog", peelingConfirmationViewModel.IsDamaged);
            //            cmdInsertOffSpecReasons.Parameters.AddWithValue("@contaminated", peelingConfirmationViewModel.IsContaminated);
            //            cmdInsertOffSpecReasons.Parameters.AddWithValue("@operatorError", peelingConfirmationViewModel.IsOperatorError);
            //            cmdInsertOffSpecReasons.Parameters.AddWithValue("@other", peelingConfirmationViewModel.IsOther);
            //            cmdInsertOffSpecReasons.ExecuteScalar();
            //        }

            //        trans.Commit();

            //    }
            //    catch (Exception e)
            //    {
            //        trans.Rollback();
            //        Debug.WriteLine("Error: " + e);
            //    }
            //    finally
            //    {
            //        conn.Close();
            //    }
            //}

            return rows;
        }

        /*****************END OFORDER PRODUCTION*****************/


        //public static int UpdateRawProdStatusByID(GradingProductionDetails gradingProductionDetails)
        //{
        //    int rows = 0;
        //    OrderStatus orderStatus = OrderStatus.Mixing;
        //    OrderStatus orderStatusSearch = OrderStatus.Grading;

        //    using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
        //    {

        //        using (SqlCommand cmdUpdateStatus = new SqlCommand("UPDATE GradingScheduling SET status = @statusParam " +
        //                                                           "WHERE production_time_table_id=@ProdTimeTableID AND raw_product_id = @rawProdId AND sales_id=@SalesID AND shift = @shiftParam AND order_type = @orderTypeParam " +
        //                                                           "AND status = @statusParamSearch", conn))
        //        {
        //            conn.Open();
        //            try
        //            {
        //                cmdUpdateStatus.Parameters.AddWithValue("@ProdTimeTableID", gradingProductionDetails.RawProDetailsID);
        //                cmdUpdateStatus.Parameters.AddWithValue("@SalesID", gradingProductionDetails.SalesOrderId);
        //                cmdUpdateStatus.Parameters.AddWithValue("@rawProdId", gradingProductionDetails.RawProduct.RawProductID);
        //                cmdUpdateStatus.Parameters.AddWithValue("@shiftParam", gradingProductionDetails.Shift);
        //                cmdUpdateStatus.Parameters.AddWithValue("@statusParam", orderStatus.ToString());
        //                cmdUpdateStatus.Parameters.AddWithValue("@statusParamSearch", orderStatusSearch.ToString());
        //                cmdUpdateStatus.Parameters.AddWithValue("@orderTypeParam", gradingProductionDetails.OrderType);

        //                rows = cmdUpdateStatus.ExecuteNonQuery();
        //            }
        //            catch (Exception e)
        //            {
        //                Debug.WriteLine("SQL UPDATE COMMAND ERROR OCCURED :  RawProductionDetails table" + e);
        //            }
        //            finally
        //            {
        //                conn.Close();
        //            }
        //        }
        //    }
        //    return rows;
        //}

        public static int UpdateMixingRawProdStatusByID(MixingProductionDetails mixingProductionDetails)
        {
            int rows = 0;
            OrderStatus orderStatus = OrderStatus.Curing;
            OrderStatus orderStatusSearch = OrderStatus.Mixing;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                using (SqlCommand cmdDeleteStatus = new SqlCommand("DELETE FROM MixingCurrentCapacity WHERE mixing_time_table_id = @MixingTimeTableID AND raw_product_id = @rawProdId AND sales_id = @salesId AND status = @statusParamSearch AND order_type=@OrderType AND rank=@Rank", conn))
                //using (SqlCommand cmdUpdateStatus = new SqlCommand("UPDATE MixingCurrentCapacity SET status = @statusParam WHERE mixing_time_table_id = @MixingTimeTableID AND raw_product_id = @rawProdId AND sales_id = @salesId AND status = @statusParamSearch", conn))
                {
                    conn.Open();
                    try
                    {
                        cmdDeleteStatus.Parameters.AddWithValue("@MixingTimeTableID", mixingProductionDetails.MixingTimeTableID);
                        cmdDeleteStatus.Parameters.AddWithValue("@rawProdId", mixingProductionDetails.RawProduct.RawProductID);
                        cmdDeleteStatus.Parameters.AddWithValue("@salesId", mixingProductionDetails.SalesOrderId);
                        cmdDeleteStatus.Parameters.AddWithValue("@statusParam", orderStatus.ToString());
                        cmdDeleteStatus.Parameters.AddWithValue("@statusParamSearch", orderStatusSearch.ToString());
                        cmdDeleteStatus.Parameters.AddWithValue("@OrderType", mixingProductionDetails.OrderType);
                        cmdDeleteStatus.Parameters.AddWithValue("@Rank", mixingProductionDetails.Rank);

                        rows = cmdDeleteStatus.ExecuteNonQuery();
                    }
                    catch (Exception e)
                    {
                        Debug.WriteLine("SQL DELETE COMMAND ERROR OCCURED :  RawProductionDetails table" + e);
                    }
                    finally
                    {
                        conn.Close();
                    }
                }
            }
            return rows;
        }

        //public static void AddMixingOrder(RawProductionDetails rawProductionDetails, OrderStatus orderStatus)
        //{
        //    int rows = 0;
        //    decimal totBlockLog = 0;

        //    using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
        //    {
        //        SqlCommand cmdSelect = new SqlCommand("SELECT m_prod_blocklog_qty FROM MixingProductionDetails " +
        //                                             "WHERE m_prod_raw_product_id = @rawProductIdParam", conn);

        //        SqlCommand cmdInsertGrading = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM MixingProductionDetails where m_prod_raw_product_id=@rawProductIdParam) " +
        //                                                     "INSERT INTO MixingProductionDetails VALUES(@ProdTimeTableID,@rawProductIdParam,@QtyMade,@shiftParam,@Status) " +
        //                                                     "ELSE " +
        //                                                     "UPDATE MixingProductionDetails SET m_prod_blocklog_qty=@QtyMade,m_prod_status=@Status WHERE m_prod_raw_product_id = @rawProductIdParam", conn);

        //        SqlTransaction trans = null;
        //        conn.Open();
        //        trans = conn.BeginTransaction();
        //        try
        //        {
        //            cmdSelect.Transaction = trans;
        //            cmdSelect.Parameters.AddWithValue("@rawProductIdParam", rawProductionDetails.RawProduct.RawProductID);

        //            using (SqlDataReader dr = cmdSelect.ExecuteReader())
        //            {
        //                if (dr != null)
        //                {
        //                    if (dr.HasRows)
        //                    {
        //                        while (dr.Read())
        //                        {
        //                            totBlockLog = Convert.ToDecimal(dr["m_prod_blocklog_qty"]) + 1;
        //                        }
        //                    }
        //                    else
        //                    {
        //                        totBlockLog = 1;
        //                    }
        //                }
        //            }

        //            cmdInsertGrading.Transaction = trans;
        //            cmdInsertGrading.Parameters.AddWithValue("@ProdTimeTableID", rawProductionDetails.RawProDetailsID);
        //            cmdInsertGrading.Parameters.AddWithValue("@rawProductIdParam", rawProductionDetails.RawProduct.RawProductID);
        //            cmdInsertGrading.Parameters.AddWithValue("@QtyMade", totBlockLog);
        //            cmdInsertGrading.Parameters.AddWithValue("@shiftParam", rawProductionDetails.Shift);
        //            cmdInsertGrading.Parameters.AddWithValue("@Status", orderStatus.ToString());
        //            rows = cmdInsertGrading.ExecuteNonQuery();

        //            trans.Commit();
        //        }
        //        catch (Exception e)
        //        {
        //            trans.Rollback();
        //            Debug.WriteLine("Error: " + e);
        //        }
        //        finally
        //        {
        //            conn.Close();
        //        }

        //    }

        //}

        public static int AddToCuring(MixingProductionDetails mixingProductionDetails)
        {
            int rowCount = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdInsertOrderProd = new SqlCommand("INSERT INTO BlockLogCuring(blc_raw_product_id, blc_blocklog_qty, blc_start_time,blc_end_time) " +
                                                               "VALUES (@rawProdIdParam,@blockLogQty,@startTime,@endTime)", conn);
                conn.Open();
                try
                {
                    cmdInsertOrderProd.Parameters.AddWithValue("@rawProdIdParam", mixingProductionDetails.RawProduct.RawProductID);
                    cmdInsertOrderProd.Parameters.AddWithValue("@blockLogQty", 1);
                    cmdInsertOrderProd.Parameters.AddWithValue("@startTime", mixingProductionDetails.StartTime);
                    cmdInsertOrderProd.Parameters.AddWithValue("@endTime", mixingProductionDetails.EndTime);

                    rowCount = cmdInsertOrderProd.ExecuteNonQuery();
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return rowCount;

        }

        public static void AddSlitPeelOrder(RawProductionDetails rawProductionDetails, OrderStatus orderStatus)
        {
            int rows = 0;
            decimal totBlockLog = 0;

            DateTime prodDate = Convert.ToDateTime(rawProductionDetails.ProductionDate);
            string nDate = prodDate.ToString("yyyy-MM-dd");
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdSelect = new SqlCommand("SELECT blocklog_qty FROM MixingProductionDetails " +
                                                     "WHERE raw_product_id = @rawProductIdParam AND shift = @shiftParam AND production_date=@productDateParam AND status=@statusParam", conn);

                //SqlCommand cmdUpdateStatus = new SqlCommand("UPDATE RawProductionDetails SET status = @statusParam WHERE raw_product_id = @rawProductIdParam AND production_date = @prodDateParam AND shift = @shiftParam", conn);

                SqlCommand cmdInsertGrading = new SqlCommand("IF NOT EXISTS(SELECT 1 from MixingProductionDetails where raw_product_id=@rawProductIdParam AND shift = @shiftParam AND production_date=@productDateParam) " +
                                                             "INSERT INTO MixingProductionDetails VALUES(@rawProductIdParam,@QtyMade,@productDateParam,@shiftParam,@Status) " +
                                                             "ELSE " +
                                                             "UPDATE MixingProductionDetails SET blocklog_qty=@QtyMade,status=@Status WHERE raw_product_id = @rawProductIdParam AND shift = @shiftParam AND production_date=@productDateParam", conn);

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {
                    cmdSelect.Transaction = trans;
                    cmdSelect.Parameters.AddWithValue("@rawProductIdParam", rawProductionDetails.RawProduct.RawProductID);
                    cmdSelect.Parameters.AddWithValue("@productDateParam", nDate);
                    cmdSelect.Parameters.AddWithValue("@shiftParam", rawProductionDetails.Shift);
                    cmdSelect.Parameters.AddWithValue("@statusParam", orderStatus.ToString());

                    using (SqlDataReader dr = cmdSelect.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    totBlockLog = Convert.ToDecimal(dr["m_prod_blocklog_qty"]) + 1;
                                }
                            }
                            else
                            {
                                totBlockLog = 1;
                            }
                        }
                    }
                    //cmdUpdateStatus.Transaction = trans;
                    //cmdUpdateStatus.Parameters.AddWithValue("@statusParam", orderStatus.ToString());
                    //cmdUpdateStatus.Parameters.AddWithValue("@rawProductIdParam", rawProductionDetails.RawProduct.RawProductID);
                    //cmdUpdateStatus.Parameters.AddWithValue("@prodDateParam", nDate);
                    //cmdUpdateStatus.Parameters.AddWithValue("@shiftParam", rawProductionDetails.Shift);
                    //cmdUpdateStatus.ExecuteNonQuery();

                    cmdInsertGrading.Transaction = trans;
                    cmdInsertGrading.Parameters.AddWithValue("@rawProductIdParam", rawProductionDetails.RawProduct.RawProductID);
                    cmdInsertGrading.Parameters.AddWithValue("@QtyMade", totBlockLog);
                    cmdInsertGrading.Parameters.AddWithValue("@shiftParam", rawProductionDetails.Shift);
                    cmdInsertGrading.Parameters.AddWithValue("@productDateParam", nDate);
                    cmdInsertGrading.Parameters.AddWithValue("@Status", orderStatus.ToString());
                    rows = cmdInsertGrading.ExecuteNonQuery();

                    trans.Commit();

                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("Error: " + e);
                }
                finally
                {
                    conn.Close();
                }

            }

        }
        /********************* GETS ALL CURING STOCK *******************/

        //public static ObservableCollection<Curing> GetAllCuringStock(DateTime currDateTime)
        //{
        //    ObservableCollection<Curing> curingColl = new ObservableCollection<Curing>();

        //    using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
        //    {
        //        try
        //        {
        //            conn.Open();

        //            using (SqlCommand cmdGetData = new SqlCommand("SELECT * FROM BlockLogCuring WHERE blc_end_time <= @CurDateTime", conn))
        //            {
        //                cmdGetData.Parameters.AddWithValue("@CurDateTime", currDateTime);

        //                using (SqlDataReader dr = cmdGetData.ExecuteReader())
        //                {
        //                    if (dr != null)
        //                    {
        //                        while (dr.Read())
        //                        {
        //                            Curing curing = new Curing();

        //                            curing.id = Convert.ToInt16(dr["id"]);
        //                            curing.RawProductId = Convert.ToInt16(dr["blc_raw_product_id"]);
        //                            curing.Qty = Convert.ToDecimal(dr["blc_blocklog_qty"]);
        //                            curing.StartTime = Convert.ToDateTime(dr["blc_start_time"]);
        //                            curing.EndTime = Convert.ToDateTime(dr["blc_end_time"]);

        //                            curingColl.Add(curing);
        //                        }
        //                    }
        //                }
        //            }
        //        }
        //        catch (Exception e)
        //        {
        //            Debug.WriteLine("ERROR READING CURING TABLE: " + e);
        //        }
        //        finally
        //        {
        //            conn.Close();
        //        }
        //    }

        //    return curingColl;

        //}


        /*********** ENDS DEMOULDING AND ADDING TO THE STOCK ***********/
        public static void AddToRawStockAfterDemoulding(ObservableCollection<Curing> curedColl)
        {
            int rows = 0;
            decimal totBlockLog = 0;
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdSelect = new SqlCommand("SELECT rs_qty FROM RawStock " +
                                                      "WHERE rs_raw_product_id = @rawProductIdParam", conn);

                SqlCommand cmdInsertUpdate = new SqlCommand("IF NOT EXISTS(SELECT 1 from RawStock WHERE rs_raw_product_id=@productIdParam) " +
                                                             "INSERT INTO RawStock VALUES(@productIdParam,@qtyParam,@reOrderQtyParam) " +
                                                             "ELSE " +
                                                             "UPDATE RawStock SET rs_qty=@qtyParam WHERE rs_raw_product_id = @productIdParam", conn);

                SqlCommand cmdDeleteCuredProduct = new SqlCommand("DELETE FROM BlockLogCuring WHERE id = @idParam", conn);

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {

                    foreach (var item in curedColl)
                    {
                        cmdSelect.Transaction = trans;
                        cmdSelect.Parameters.AddWithValue("@rawProductIdParam", item.Product.RawProduct.RawProductID);

                        using (SqlDataReader dr = cmdSelect.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                if (dr.HasRows)
                                {
                                    while (dr.Read())
                                    {
                                        totBlockLog = Convert.ToDecimal(dr["rs_qty"]) + 1;
                                    }
                                }
                                else
                                {
                                    totBlockLog = item.Qty;
                                }
                            }
                        }
                        cmdSelect.Parameters.Clear();

                        cmdInsertUpdate.Transaction = trans;
                        cmdInsertUpdate.Parameters.AddWithValue("@productIdParam", item.Product.RawProduct.RawProductID);
                        cmdInsertUpdate.Parameters.AddWithValue("@qtyParam", totBlockLog);
                        cmdInsertUpdate.Parameters.AddWithValue("@reOrderQtyParam", 0);
                        rows = cmdInsertUpdate.ExecuteNonQuery();
                        cmdInsertUpdate.Parameters.Clear();

                        cmdDeleteCuredProduct.Transaction = trans;
                        cmdDeleteCuredProduct.Parameters.AddWithValue("@idParam", item.id);
                        cmdDeleteCuredProduct.ExecuteNonQuery();
                        cmdDeleteCuredProduct.Parameters.Clear();
                    }

                    trans.Commit();

                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("Error: " + e);
                }
                finally
                {
                    conn.Close();
                }

            }

        }

        public static decimal CheckSlitPeelCapacity(int prodTimeTableID, int shift)
        {
            decimal dollarValue = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdSelect = new SqlCommand("SELECT dollar_value FROM SlitPeel " +
                                                      "WHERE prod_time_table_id = @ProdTimeTableID AND shift = @OldShift AND status=@Status", conn);

                conn.Open();
                try
                {
                    cmdSelect.Parameters.AddWithValue("@ProdTimeTableID", prodTimeTableID);
                    cmdSelect.Parameters.AddWithValue("@OldShift", shift);
                    cmdSelect.Parameters.AddWithValue("@Status", "SlitPeel");

                    using (SqlDataReader dr = cmdSelect.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    dollarValue += Convert.ToDecimal(dr["dollar_value"]);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL UPDATE COMMAND ERROR OCCURED :  Updating Orders table" + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return dollarValue;
        }

        public static List<SlitPeel> GetSlitPeelDetails(int prodTimeTableID, int salesOrderID, int prodID, int rawprodiD, int shift, string type, int orderType, string status)
        {
            Console.WriteLine(prodTimeTableID.ToString(), salesOrderID.ToString(), prodID.ToString(), rawprodiD.ToString(), shift.ToString(), type.ToString(), orderType.ToString(), status.ToString());

            List<SlitPeel> slitPeelList = new List<SlitPeel>();
            decimal qtyTomake = 0;
            decimal qtyToMade = 0;
            decimal dollarValue = 0;
            decimal blkslogs = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdSelect = new SqlCommand();
                cmdSelect = new SqlCommand("SELECT qty_to_make, qty_made, dollar_value, blocks_logs FROM SlitPeel " +
                                                       "WHERE prod_time_table_id = @ProdTimeTableID AND sales_order_id = @SalesOrderID AND product_id = @ProductID AND raw_product_id = @RawProductID " +
                                                       "AND shift = @OldShift AND type=@Type AND order_type=@OrderType AND status=@Status", conn);


                conn.Open();
                try
                {
                    cmdSelect.Parameters.AddWithValue("@ProdTimeTableID", prodTimeTableID);
                    cmdSelect.Parameters.AddWithValue("@SalesOrderID", salesOrderID);
                    cmdSelect.Parameters.AddWithValue("@ProductID", prodID);
                    cmdSelect.Parameters.AddWithValue("@RawProductID", rawprodiD);
                    cmdSelect.Parameters.AddWithValue("@OldShift", shift);
                    cmdSelect.Parameters.AddWithValue("@Type", type);
                    cmdSelect.Parameters.AddWithValue("@OrderType", orderType);
                    cmdSelect.Parameters.AddWithValue("@Status", status);

                    using (SqlDataReader dr = cmdSelect.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    qtyTomake += Convert.ToDecimal(dr["qty_to_make"]);
                                    qtyToMade += Convert.ToDecimal(dr["qty_made"]);
                                    dollarValue += Convert.ToDecimal(dr["dollar_value"]);
                                    blkslogs += Convert.ToDecimal(dr["blocks_logs"]);
                                }
                            }
                        }
                    }
                    SlitPeel sp = new SlitPeel();
                    sp.QtyToMake = qtyTomake;
                    sp.QtyMade = qtyToMade;
                    sp.DollarValue = dollarValue;
                    sp.OriginalBlockLogs = blkslogs;
                    slitPeelList.Add(sp);


                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL UPDATE COMMAND ERROR OCCURED :  Updating Orders table" + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return slitPeelList;
        }

        /* SLIT PEEL SHIFTING  */
        public static List<string> MoveSlitPeelProduction(ShiftSlitPeelViewModel shiftProductionViewModel, ref int newSlitPeelID)
        {
            List<string> resultList = null;
            decimal qtyTomake = 0;
            decimal qtyToMade = 0;
            decimal dollarValue = 0;
            decimal blkslogs = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdSelect = new SqlCommand("SELECT qty_to_make, qty_made, dollar_value, blocks_logs FROM SlitPeel " +
                                                      "WHERE prod_time_table_id = @ProdTimeTableID AND sales_order_id = @SalesOrderID AND product_id = @ProductID AND raw_product_id = @RawProductID " +
                                                      "AND shift = @OldShift AND type=@Type AND order_type=@OrderType AND status=@Status", conn);

                //SOURCE UPDATE SLITPEEL
                SqlCommand cmdSourceUpdateSlitPeel = new SqlCommand("UPDATE SlitPeel SET qty_to_make=@QtyToMake, qty_made = @QtyMade, dollar_value = @DollarVale, blocks_logs = @BlocksLogs " +
                                                                    "WHERE prod_time_table_id = @ProdTimeTableID AND sales_order_id = @SalesOrderID AND product_id = @ProductID AND raw_product_id = @RawProductID " +
                                                                    "AND shift = @OldShift AND type=@Type AND order_type=@OrderType AND status=@Status", conn);

                //DELETE SLITPEEL
                SqlCommand cmdDeleteSlitPeel = new SqlCommand("DELETE FROM SlitPeel " +
                                                              "WHERE prod_time_table_id = @ProdTimeTableID AND sales_order_id = @SalesOrderID AND product_id = @ProductID AND raw_product_id = @RawProductID " +
                                                              "AND shift = @OldShift AND type=@Type AND order_type=@OrderType AND status=@Status", conn);

                //INSERT/UPDATE DESTINATION SLITPEEL
                SqlCommand cmdInsertUpdate = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM SlitPeel WHERE prod_time_table_id = @ProdTimeTableID AND sales_order_id = @SalesOrderID AND product_id = @ProductID AND raw_product_id = @RawProductID AND shift = @Shift AND type=@Type AND order_type=@OrderType AND status=@Status) " +
                                                            "INSERT INTO SlitPeel OUTPUT INSERTED.id VALUES(@ProdTimeTableID,@SalesOrderID,@ProductID,@RawProductID,@QtyToMake,@QtyMade,@DollarVale,@BlocksLogs,@Shift,@Type,@OrderType,@Status) " +
                                                            "ELSE " +
                                                            "UPDATE SlitPeel SET qty_to_make=@QtyToMake, qty_made = @QtyMade, dollar_value = @DollarVale, blocks_logs = @BlocksLogs OUTPUT 0 " +
                                                            "WHERE prod_time_table_id = @ProdTimeTableID AND sales_order_id = @SalesOrderID AND product_id = @ProductID AND raw_product_id = @RawProductID " +
                                                            "AND shift = @Shift AND type=@Type AND order_type=@OrderType AND status=@Status", conn);

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {
                    //SOURCE

                    cmdSelect.Transaction = trans;
                    cmdSelect.Parameters.AddWithValue("@ProdTimeTableID", shiftProductionViewModel.SlitPeelSchedule.SlitPeel.ProdTimeTableID);
                    cmdSelect.Parameters.AddWithValue("@SalesOrderID", shiftProductionViewModel.SlitPeelSchedule.SlitPeel.SalesOrderID);
                    cmdSelect.Parameters.AddWithValue("@ProductID", shiftProductionViewModel.SlitPeelSchedule.Product.ProductID);
                    cmdSelect.Parameters.AddWithValue("@RawProductID", shiftProductionViewModel.SlitPeelSchedule.Product.RawProduct.RawProductID);
                    cmdSelect.Parameters.AddWithValue("@OldShift", shiftProductionViewModel.SlitPeelSchedule.SlitPeel.Shift);
                    cmdSelect.Parameters.AddWithValue("@Type", shiftProductionViewModel.SlitPeelSchedule.SlitPeel.Type);
                    cmdSelect.Parameters.AddWithValue("@OrderType", shiftProductionViewModel.SlitPeelSchedule.SlitPeel.OrdertypeID);
                    cmdSelect.Parameters.AddWithValue("@Status", shiftProductionViewModel.SlitPeelSchedule.SlitPeel.Status);

                    using (SqlDataReader dr = cmdSelect.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    qtyTomake += Convert.ToDecimal(dr["qty_to_make"]);
                                    qtyToMade += Convert.ToDecimal(dr["qty_made"]);
                                    dollarValue += Convert.ToDecimal(dr["dollar_value"]);
                                    blkslogs += Convert.ToDecimal(dr["blocks_logs"]);
                                }
                            }
                        }
                    }
                    cmdSelect.Parameters.Clear();
                    blkslogs -= shiftProductionViewModel.Qty;
                    //qtyTomake = blkslogs * shiftProductionViewModel.SlitPeelSchedule.Product.MaxItemsPer;
                    qtyToMade -= shiftProductionViewModel.SlitPeelSchedule.SlitPeel.QtyMade;
                    dollarValue = qtyTomake * shiftProductionViewModel.SlitPeelSchedule.Product.UnitPrice;
                    if (qtyTomake > 0)//UPDATE
                    {
                        cmdSourceUpdateSlitPeel.Transaction = trans;
                        cmdSourceUpdateSlitPeel.Parameters.AddWithValue("@ProdTimeTableID", shiftProductionViewModel.SlitPeelSchedule.SlitPeel.ProdTimeTableID);
                        cmdSourceUpdateSlitPeel.Parameters.AddWithValue("@SalesOrderID", shiftProductionViewModel.SlitPeelSchedule.SlitPeel.SalesOrderID);
                        cmdSourceUpdateSlitPeel.Parameters.AddWithValue("@ProductID", shiftProductionViewModel.SlitPeelSchedule.Product.ProductID);
                        cmdSourceUpdateSlitPeel.Parameters.AddWithValue("@RawProductID", shiftProductionViewModel.SlitPeelSchedule.Product.RawProduct.RawProductID);
                        cmdSourceUpdateSlitPeel.Parameters.AddWithValue("@OldShift", shiftProductionViewModel.SlitPeelSchedule.SlitPeel.Shift);
                        cmdSourceUpdateSlitPeel.Parameters.AddWithValue("@Type", shiftProductionViewModel.SlitPeelSchedule.SlitPeel.Type);
                        cmdSourceUpdateSlitPeel.Parameters.AddWithValue("@OrderType", shiftProductionViewModel.SlitPeelSchedule.SlitPeel.OrdertypeID);
                        cmdSourceUpdateSlitPeel.Parameters.AddWithValue("@Status", shiftProductionViewModel.SlitPeelSchedule.SlitPeel.Status);
                        cmdSourceUpdateSlitPeel.Parameters.AddWithValue("@QtyToMake", qtyTomake);
                        cmdSourceUpdateSlitPeel.Parameters.AddWithValue("@QtyMade", qtyToMade);
                        cmdSourceUpdateSlitPeel.Parameters.AddWithValue("@DollarVale", dollarValue);
                        cmdSourceUpdateSlitPeel.Parameters.AddWithValue("@BlocksLogs", blkslogs);
                        cmdSourceUpdateSlitPeel.ExecuteNonQuery();
                    }
                    else//DELETE RECORD
                    {
                        cmdDeleteSlitPeel.Transaction = trans;
                        cmdDeleteSlitPeel.Parameters.AddWithValue("@ProdTimeTableID", shiftProductionViewModel.SlitPeelSchedule.SlitPeel.ProdTimeTableID);
                        cmdDeleteSlitPeel.Parameters.AddWithValue("@SalesOrderID", shiftProductionViewModel.SlitPeelSchedule.SlitPeel.SalesOrderID);
                        cmdDeleteSlitPeel.Parameters.AddWithValue("@ProductID", shiftProductionViewModel.SlitPeelSchedule.Product.ProductID);
                        cmdDeleteSlitPeel.Parameters.AddWithValue("@RawProductID", shiftProductionViewModel.SlitPeelSchedule.Product.RawProduct.RawProductID);
                        cmdDeleteSlitPeel.Parameters.AddWithValue("@OldShift", shiftProductionViewModel.SlitPeelSchedule.SlitPeel.Shift);
                        cmdDeleteSlitPeel.Parameters.AddWithValue("@Type", shiftProductionViewModel.SlitPeelSchedule.SlitPeel.Type);
                        cmdDeleteSlitPeel.Parameters.AddWithValue("@OrderType", shiftProductionViewModel.SlitPeelSchedule.SlitPeel.OrdertypeID);
                        cmdDeleteSlitPeel.Parameters.AddWithValue("@Status", shiftProductionViewModel.SlitPeelSchedule.SlitPeel.Status);
                        cmdDeleteSlitPeel.ExecuteNonQuery();
                    }

                    //DESTINATION
                    qtyTomake = 0;
                    qtyToMade = 0;
                    dollarValue = 0;
                    blkslogs = 0;

                    cmdSelect.Transaction = trans;
                    cmdSelect.Parameters.AddWithValue("@ProdTimeTableID", shiftProductionViewModel.SelectedProdTimeTableID);
                    cmdSelect.Parameters.AddWithValue("@SalesOrderID", shiftProductionViewModel.SlitPeelSchedule.SlitPeel.SalesOrderID);
                    cmdSelect.Parameters.AddWithValue("@ProductID", shiftProductionViewModel.SlitPeelSchedule.Product.ProductID);
                    cmdSelect.Parameters.AddWithValue("@RawProductID", shiftProductionViewModel.SlitPeelSchedule.Product.RawProduct.RawProductID);
                    cmdSelect.Parameters.AddWithValue("@OldShift", shiftProductionViewModel.SelectedShift);
                    cmdSelect.Parameters.AddWithValue("@Type", shiftProductionViewModel.SlitPeelSchedule.SlitPeel.Type);
                    cmdSelect.Parameters.AddWithValue("@OrderType", shiftProductionViewModel.SlitPeelSchedule.SlitPeel.OrdertypeID);
                    cmdSelect.Parameters.AddWithValue("@Status", shiftProductionViewModel.SlitPeelSchedule.SlitPeel.Status);

                    using (SqlDataReader dr = cmdSelect.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    qtyTomake += Convert.ToDecimal(dr["qty_to_make"]);
                                    qtyToMade += Convert.ToDecimal(dr["qty_made"]);
                                    dollarValue += Convert.ToDecimal(dr["dollar_value"]);
                                    blkslogs += Convert.ToDecimal(dr["blocks_logs"]);
                                }
                            }
                        }
                    }

                    blkslogs += shiftProductionViewModel.Qty;
                    if (shiftProductionViewModel.Qty == shiftProductionViewModel.SlitPeelSchedule.RawQty)
                    {
                        qtyTomake += shiftProductionViewModel.SlitPeelSchedule.SlitPeel.QtyToMake;
                        dollarValue += shiftProductionViewModel.SlitPeelSchedule.SlitPeel.DollarValue;
                    }
                    else
                    {
                        //qtyTomake += blkslogs * shiftProductionViewModel.SlitPeelSchedule.Product.MaxItemsPer;
                        dollarValue += qtyTomake * shiftProductionViewModel.SlitPeelSchedule.Product.UnitPrice;
                    }

                    qtyToMade += shiftProductionViewModel.SlitPeelSchedule.SlitPeel.QtyMade;

                    cmdInsertUpdate.Transaction = trans;
                    cmdInsertUpdate.Parameters.AddWithValue("@ProdTimeTableID", shiftProductionViewModel.SelectedProdTimeTableID);
                    cmdInsertUpdate.Parameters.AddWithValue("@SalesOrderID", shiftProductionViewModel.SlitPeelSchedule.SlitPeel.SalesOrderID);
                    cmdInsertUpdate.Parameters.AddWithValue("@ProductID", shiftProductionViewModel.SlitPeelSchedule.Product.ProductID);
                    cmdInsertUpdate.Parameters.AddWithValue("@RawProductID", shiftProductionViewModel.SlitPeelSchedule.Product.RawProduct.RawProductID);
                    cmdInsertUpdate.Parameters.AddWithValue("@Shift", shiftProductionViewModel.SelectedShift);
                    cmdInsertUpdate.Parameters.AddWithValue("@Type", shiftProductionViewModel.SlitPeelSchedule.SlitPeel.Type);
                    cmdInsertUpdate.Parameters.AddWithValue("@OrderType", shiftProductionViewModel.SlitPeelSchedule.SlitPeel.OrdertypeID);
                    cmdInsertUpdate.Parameters.AddWithValue("@Status", shiftProductionViewModel.SlitPeelSchedule.SlitPeel.Status);
                    cmdInsertUpdate.Parameters.AddWithValue("@QtyToMake", qtyTomake);
                    cmdInsertUpdate.Parameters.AddWithValue("@QtyMade", qtyToMade);
                    cmdInsertUpdate.Parameters.AddWithValue("@DollarVale", dollarValue);
                    cmdInsertUpdate.Parameters.AddWithValue("@BlocksLogs", blkslogs);
                    newSlitPeelID = (Int32)cmdInsertUpdate.ExecuteScalar();
                    trans.Commit();

                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("SQL UPDATE COMMAND ERROR OCCURED :  Updating Orders table" + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return resultList;
        }

        public static List<string> MoveSlitPeelProduction2(ShiftSlitPeelViewModel shiftProductionViewModel)
        {
            List<string> resultList = null;
            int rows = 0;
            decimal blockTot = 0;
            DateTime oDate = Convert.ToDateTime(shiftProductionViewModel.SlitPeelSchedule.SlitPeelProduction.ProductionDate);
            DateTime nDate = Convert.ToDateTime(shiftProductionViewModel.SelectedDate);
            string oldDate = oDate.ToString("yyyy-MM-dd");
            string newDate = nDate.ToString("yyyy-MM-dd");

            decimal origBlks = shiftProductionViewModel.SlitPeelSchedule.SlitPeelProduction.BlockLogQty;
            decimal newBlks = shiftProductionViewModel.Qty;
            decimal leftOvertBlks = origBlks - newBlks;


            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {

                SqlCommand cmdSelect = new SqlCommand("SELECT sp_qty_cut FROM SlitPeelProduction " +
                                                      "WHERE sp_slit_peel_id = @slitPeelIDParam AND sp_prod_production_date=@dateParam AND sp_prod_shift = @shiftParam", conn);
                //If exists
                SqlCommand cmdInsUp1 = new SqlCommand("UPDATE SlitPeelProduction SET sp_qty_cut=@blockTot, sp_prod_production_date = @newDateParam, sp_prod_shift = @newShift " +
                                                      "WHERE sp_slit_peel_id = @rawProdIdParam AND sp_prod_shift = @newShift AND sp_prod_production_date=@newDateParam", conn);
                //If does not exist
                SqlCommand cmdInsUp2 = new SqlCommand("UPDATE SlitPeelProduction SET sp_qty_cut=@blockTot " +
                                                                 "WHERE sp_slit_peel_id = @rawProdIdParam AND sp_prod_shift = @oldShift AND sp_prod_production_date=@oldDateParam", conn);

                SqlCommand cmdInsert = new SqlCommand("INSERT INTO SlitPeelProduction(sp_slit_peel_id,sp_qty_cut,sp_prod_production_date,sp_prod_shift,sp_prod_status) VALUES " +
                                                      "(@ProductIdParam,@qtyToCut,@prodDate,@newShift,@status)", conn);

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {
                    cmdSelect.Transaction = trans;
                    cmdSelect.Parameters.AddWithValue("@slitPeelIDParam", shiftProductionViewModel.SlitPeelSchedule.SlitPeelProduction.SlitPeelID);
                    cmdSelect.Parameters.AddWithValue("@dateParam", newDate);
                    cmdSelect.Parameters.AddWithValue("@shiftParam", shiftProductionViewModel.SelectedShift);
                    //cmdSelect.Parameters.AddWithValue("@statusParam", orderStatus.ToString());

                    using (SqlDataReader dr = cmdSelect.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    blockTot = newBlks + Convert.ToDecimal(dr["sp_qty_cut"]);
                                }
                            }
                            else
                            {
                                blockTot = 0;
                            }
                        }
                    }

                    if (blockTot != 0)
                    {
                        cmdInsUp1.Transaction = trans;
                        cmdInsUp1.Parameters.AddWithValue("@rawProdIdParam", shiftProductionViewModel.SlitPeelSchedule.SlitPeelProduction.SlitPeelID);
                        cmdInsUp1.Parameters.AddWithValue("@blockTot", blockTot);
                        cmdInsUp1.Parameters.AddWithValue("@newDateParam", newDate);
                        cmdInsUp1.Parameters.AddWithValue("@newShift", shiftProductionViewModel.SelectedShift);
                        rows = cmdInsUp1.ExecuteNonQuery();
                        if (rows > 0)
                        {
                            cmdInsUp2.Transaction = trans;
                            cmdInsUp2.Parameters.AddWithValue("@rawProdIdParam", shiftProductionViewModel.SlitPeelSchedule.SlitPeelProduction.SlitPeelID);
                            cmdInsUp2.Parameters.AddWithValue("@blockTot", leftOvertBlks);
                            cmdInsUp2.Parameters.AddWithValue("@oldDateParam", oldDate);
                            cmdInsUp2.Parameters.AddWithValue("@oldShift", shiftProductionViewModel.SlitPeelSchedule.SlitPeelProduction.Shift);
                            int rows2 = cmdInsUp2.ExecuteNonQuery();
                            if (rows2 != 0)
                            {
                                resultList = new List<string>();
                                resultList.Add(shiftProductionViewModel.SlitPeelSchedule.Product.ProductDescription);
                                resultList.Add(shiftProductionViewModel.SelectedShift.ToString());
                                resultList.Add(nDate.ToString("dd/MM/yyyy"));
                                resultList.Add(shiftProductionViewModel.Qty.ToString());
                                resultList.Add(shiftProductionViewModel.SlitPeelSchedule.Product.ProductDescription);
                            }
                            else
                            {
                                resultList = null;
                            }
                        }
                    }
                    else
                    {
                        cmdInsert.Transaction = trans;
                        cmdInsert.Parameters.AddWithValue("@ProductIdParam", shiftProductionViewModel.SlitPeelSchedule.SlitPeelProduction.SlitPeelID);
                        cmdInsert.Parameters.AddWithValue("@qtyToCut", shiftProductionViewModel.Qty);
                        cmdInsert.Parameters.AddWithValue("@prodDate", nDate);
                        cmdInsert.Parameters.AddWithValue("@newShift", shiftProductionViewModel.SelectedShift);
                        cmdInsert.Parameters.AddWithValue("@status", "slit/peel");
                        int rows2 = cmdInsert.ExecuteNonQuery();

                        cmdInsUp2.Transaction = trans;
                        cmdInsUp2.Parameters.AddWithValue("@rawProdIdParam", shiftProductionViewModel.SlitPeelSchedule.SlitPeelProduction.SlitPeelID);
                        cmdInsUp2.Parameters.AddWithValue("@blockTot", leftOvertBlks);
                        cmdInsUp2.Parameters.AddWithValue("@oldDateParam", oldDate);
                        cmdInsUp2.Parameters.AddWithValue("@oldShift", shiftProductionViewModel.SlitPeelSchedule.SlitPeelProduction.Shift);
                        int rows3 = cmdInsUp2.ExecuteNonQuery();

                        if (rows3 > 0)
                        {
                            resultList = new List<string>();
                            resultList.Add(shiftProductionViewModel.SlitPeelSchedule.Product.ProductDescription);
                            resultList.Add(shiftProductionViewModel.SelectedShift.ToString());
                            resultList.Add(nDate.ToString("dd/MM/yyyy"));
                            resultList.Add(shiftProductionViewModel.Qty.ToString());
                            resultList.Add(shiftProductionViewModel.SlitPeelSchedule.Product.ProductDescription);
                        }
                        else
                        {
                            resultList = null;
                        }

                    }
                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("SQL UPDATE COMMAND ERROR OCCURED :  Updating Orders table" + e);
                }
                finally
                {
                    conn.Close();
                }

            }

            return resultList;

        }

        public static List<string> MoveMixingProduction(ShiftProductionViewModel shiftProductionViewModel, string tableName, string colProductID, string colBlockLogQty, string colProductionDate, string colShift, string colStatus, OrderStatus prderStatus)
        {
            List<string> resultList = null;
            int rows = 0;
            decimal blockTot = 0;
            DateTime oDate = Convert.ToDateTime(shiftProductionViewModel.RawProductionDetails.ProductionDate);
            DateTime nDate = Convert.ToDateTime(shiftProductionViewModel.SelectedDate);
            string oldDate = oDate.ToString("yyyy-MM-dd");
            string newDate = nDate.ToString("yyyy-MM-dd");

            var builder = new SqlCommandBuilder();
            string escapedTableName = builder.QuoteIdentifier(tableName);
            string ProductID = builder.QuoteIdentifier(colProductID);
            string BlockLogQty = builder.QuoteIdentifier(colBlockLogQty);
            string ProductionDate = builder.QuoteIdentifier(colProductionDate);
            string Shift = builder.QuoteIdentifier(colShift);
            string Status = builder.QuoteIdentifier(colStatus);


            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {

                SqlCommand cmdSelect = new SqlCommand("SELECT " + BlockLogQty + " FROM " + escapedTableName + "" +
                                                      "WHERE " + ProductID + " = @rawProdIdParam AND " + ProductionDate + "=@dateParam AND " + Shift + " = @shiftParam AND " + Status + " = @statusParam", conn);
                //If exists
                SqlCommand cmdInsUp1 = new SqlCommand("UPDATE " + escapedTableName + " SET " + BlockLogQty + "=@blockTot, " + ProductionDate + " = @newDateParam, " + Shift + " = @newShift " +
                                                      "WHERE " + ProductID + " = @rawProdIdParam AND " + Shift + " = @newShift AND " + ProductionDate + "=@newDateParam AND " + Status + " = @statusParam", conn);
                //If does not exist
                SqlCommand cmdInsUp2 = new SqlCommand("UPDATE " + escapedTableName + " SET " + BlockLogQty + "=@blockTot, " + ProductionDate + " = @newDateParam, " + Shift + " = @newShift " +
                                                                 "WHERE " + ProductID + " = @rawProdIdParam AND " + Shift + " = @oldShift AND " + ProductionDate + "=@oldDateParam AND " + Status + " = @statusParam", conn);

                SqlCommand cmdDelete = new SqlCommand("DELETE FROM " + escapedTableName + " WHERE " + ProductID + " = @rawProdIdParam AND " + Shift + " = @oldShift AND " + ProductionDate + " = @oldDateParam", conn);

                conn.Open();
                try
                {
                    cmdSelect.Parameters.AddWithValue("@rawProdIdParam", shiftProductionViewModel.RawProductionDetails.RawProduct.RawProductID);
                    cmdSelect.Parameters.AddWithValue("@dateParam", newDate);
                    cmdSelect.Parameters.AddWithValue("@shiftParam", shiftProductionViewModel.SelectedShift);
                    cmdSelect.Parameters.AddWithValue("@statusParam", prderStatus.ToString());

                    using (SqlDataReader dr = cmdSelect.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    if (tableName == "RawProductionDetails")
                                    {
                                        blockTot = shiftProductionViewModel.RawProductionDetails.BlockLogQty + Convert.ToDecimal(dr["blocklog_qty"]);
                                    }
                                    else if (tableName == "MixingProductionDetails")
                                    {
                                        blockTot = shiftProductionViewModel.RawProductionDetails.BlockLogQty + Convert.ToDecimal(dr["m_prod_blocklog_qty"]);
                                    }
                                }
                            }
                            else
                            {
                                blockTot = 0;
                            }
                        }
                    }
                    if (blockTot != 0)
                    {
                        cmdInsUp1.Parameters.AddWithValue("@rawProdIdParam", shiftProductionViewModel.RawProductionDetails.RawProduct.RawProductID);
                        cmdInsUp1.Parameters.AddWithValue("@blockTot", blockTot);
                        cmdInsUp1.Parameters.AddWithValue("@newDateParam", newDate);
                        cmdInsUp1.Parameters.AddWithValue("@newShift", shiftProductionViewModel.SelectedShift);
                        cmdInsUp1.Parameters.AddWithValue("@statusParam", prderStatus.ToString());
                        rows = cmdInsUp1.ExecuteNonQuery();

                        cmdDelete.Parameters.AddWithValue("@rawProdIdParam", shiftProductionViewModel.RawProductionDetails.RawProduct.RawProductID);
                        cmdDelete.Parameters.AddWithValue("@oldShift", shiftProductionViewModel.RawProductionDetails.Shift);
                        cmdDelete.Parameters.AddWithValue("@oldDateParam", oldDate);
                        int rows2 = cmdDelete.ExecuteNonQuery();
                        if (rows2 > 0)
                        {
                            resultList = new List<string>();
                            resultList.Add(shiftProductionViewModel.RawProductionDetails.RawProduct.Description);
                            resultList.Add(shiftProductionViewModel.SelectedShift.ToString());
                            resultList.Add(nDate.ToString("dd/MM/yyyy"));
                            resultList.Add(shiftProductionViewModel.Qty.ToString());
                            resultList.Add(shiftProductionViewModel.RawProductionDetails.RawProduct.RawProductType);
                        }
                        else
                        {
                            resultList = null;
                        }
                    }
                    else
                    {
                        cmdInsUp2.Parameters.AddWithValue("@rawProdIdParam", shiftProductionViewModel.RawProductionDetails.RawProduct.RawProductID);
                        cmdInsUp2.Parameters.AddWithValue("@blockTot", shiftProductionViewModel.RawProductionDetails.BlockLogQty);
                        cmdInsUp2.Parameters.AddWithValue("@newDateParam", newDate);
                        cmdInsUp2.Parameters.AddWithValue("@oldDateParam", oldDate);
                        cmdInsUp2.Parameters.AddWithValue("@newShift", shiftProductionViewModel.SelectedShift);
                        cmdInsUp2.Parameters.AddWithValue("@oldShift", shiftProductionViewModel.RawProductionDetails.Shift);
                        cmdInsUp2.Parameters.AddWithValue("@statusParam", prderStatus.ToString());
                        rows = cmdInsUp2.ExecuteNonQuery();

                        if (rows != 0)
                        {
                            resultList = new List<string>();
                            resultList.Add(shiftProductionViewModel.RawProductionDetails.RawProduct.Description);
                            resultList.Add(shiftProductionViewModel.SelectedShift.ToString());
                            resultList.Add(nDate.ToString("dd/MM/yyyy"));
                            resultList.Add(shiftProductionViewModel.Qty.ToString());
                            resultList.Add(shiftProductionViewModel.RawProductionDetails.RawProduct.RawProductType);
                        }
                        else
                        {
                            resultList = null;
                        }

                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL UPDATE COMMAND ERROR OCCURED :  Updating Orders table" + e);
                }
                finally
                {
                    conn.Close();
                }

            }

            return resultList;
        }


        public static List<string> InsertMixingProduction(ShiftProductionViewModel shiftProductionViewModel, string tableName, string colProductID, string colBlockLogQty, string colProductionDate, string colShift, string colStatus, OrderStatus orderStatus)
        {
            List<string> resultList = null;
            int rows = 0;
            decimal blockTot = 0;
            DateTime oDate = Convert.ToDateTime(shiftProductionViewModel.RawProductionDetails.ProductionDate);
            DateTime nDate = Convert.ToDateTime(shiftProductionViewModel.SelectedDate);
            string oldDate = oDate.ToString("yyyy-MM-dd");
            string newDate = nDate.ToString("yyyy-MM-dd");

            decimal origBlks = shiftProductionViewModel.RawProductionDetails.BlockLogQty;
            decimal newBlks = shiftProductionViewModel.Qty;
            decimal leftOvertBlks = origBlks - newBlks;

            var builder = new SqlCommandBuilder();
            string escapedTableName = builder.QuoteIdentifier(tableName);
            string ProductID = builder.QuoteIdentifier(colProductID);
            string BlockLogQty = builder.QuoteIdentifier(colBlockLogQty);
            string ProductionDate = builder.QuoteIdentifier(colProductionDate);
            string Shift = builder.QuoteIdentifier(colShift);
            string Status = builder.QuoteIdentifier(colStatus);

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {

                SqlCommand cmdSelect = new SqlCommand("SELECT " + BlockLogQty + " FROM " + escapedTableName + " " +
                                                      "WHERE " + ProductID + " = @rawProdIdParam AND " + Shift + " = @newShift AND " + ProductionDate + "=@newDateParam AND " + Status + " =@statusParam", conn);
                //If exists
                SqlCommand cmdInsUp1 = new SqlCommand("UPDATE " + escapedTableName + " SET " + BlockLogQty + "=@blockTot, " + ProductionDate + " = @newDateParam, " + Shift + " = @newShift " +
                                                      "WHERE " + ProductID + " = @rawProdIdParam AND " + Shift + " = @newShift AND " + ProductionDate + "=@newDateParam AND " + Status + " =@statusParam", conn);
                //If does not exist
                SqlCommand cmdInsUp2 = new SqlCommand("UPDATE " + escapedTableName + " SET " + BlockLogQty + "=@blockTot " +
                                                                 "WHERE " + ProductID + " = @rawProdIdParam AND " + Shift + " = @oldShift AND " + ProductionDate + "=@oldDateParam AND " + Status + " =@statusParam", conn);

                SqlCommand cmdInsert = new SqlCommand("INSERT INTO " + escapedTableName + "(" + ProductID + "," + BlockLogQty + "," + ProductionDate + "," + Shift + "," + Status + ") VALUES " +
                                                       "(@rawProductIdParam,@newBlock,@prodDate,@newShift,@statusParam)", conn);
                conn.Open();
                try
                {
                    cmdSelect.Parameters.AddWithValue("@rawProdIdParam", shiftProductionViewModel.RawProductionDetails.RawProduct.RawProductID);
                    cmdSelect.Parameters.AddWithValue("@oldBlock", shiftProductionViewModel.RawProductionDetails.BlockLogQty);
                    cmdSelect.Parameters.AddWithValue("@newShift", shiftProductionViewModel.SelectedShift);
                    cmdSelect.Parameters.AddWithValue("@newDateParam", newDate);
                    cmdSelect.Parameters.AddWithValue("@statusParam", orderStatus.ToString());

                    using (SqlDataReader dr = cmdSelect.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    if (tableName == "RawProductionDetails")
                                    {
                                        blockTot = newBlks + Convert.ToDecimal(dr["blocklog_qty"]);
                                    }
                                    else if (tableName == "MixingProductionDetails")
                                    {
                                        blockTot = newBlks + Convert.ToDecimal(dr["m_prod_blocklog_qty"]);
                                    }
                                }
                            }
                            else
                            {
                                blockTot = 0;
                            }
                        }
                    }

                    if (blockTot != 0)
                    {

                        cmdInsUp1.Parameters.AddWithValue("@rawProdIdParam", shiftProductionViewModel.RawProductionDetails.RawProduct.RawProductID);
                        cmdInsUp1.Parameters.AddWithValue("@blockTot", blockTot);
                        cmdInsUp1.Parameters.AddWithValue("@newDateParam", newDate);
                        cmdInsUp1.Parameters.AddWithValue("@newShift", shiftProductionViewModel.SelectedShift);
                        cmdInsUp1.Parameters.AddWithValue("@statusParam", orderStatus.ToString());

                        rows = cmdInsUp1.ExecuteNonQuery();
                        if (rows > 0)
                        {
                            cmdInsUp2.Parameters.AddWithValue("@rawProdIdParam", shiftProductionViewModel.RawProductionDetails.RawProduct.RawProductID);
                            cmdInsUp2.Parameters.AddWithValue("@blockTot", leftOvertBlks);
                            cmdInsUp2.Parameters.AddWithValue("@oldDateParam", oldDate);
                            cmdInsUp2.Parameters.AddWithValue("@oldShift", shiftProductionViewModel.RawProductionDetails.Shift);
                            cmdInsUp2.Parameters.AddWithValue("@statusParam", orderStatus.ToString());
                            int rows2 = cmdInsUp2.ExecuteNonQuery();
                            if (rows2 != 0)
                            {
                                resultList = new List<string>();
                                resultList.Add(shiftProductionViewModel.RawProductionDetails.RawProduct.Description);
                                resultList.Add(shiftProductionViewModel.SelectedShift.ToString());
                                resultList.Add(nDate.ToString("dd/MM/yyyy"));
                                resultList.Add(shiftProductionViewModel.Qty.ToString());
                                resultList.Add(shiftProductionViewModel.RawProductionDetails.RawProduct.RawProductType);
                            }
                            else
                            {
                                resultList = null;
                            }
                        }
                    }
                    else
                    {
                        cmdInsert.Parameters.AddWithValue("@rawProductIdParam", shiftProductionViewModel.RawProductionDetails.RawProduct.RawProductID);
                        cmdInsert.Parameters.AddWithValue("@newTile", shiftProductionViewModel.Qty);
                        cmdInsert.Parameters.AddWithValue("@newBlock", shiftProductionViewModel.Qty);
                        cmdInsert.Parameters.AddWithValue("@prodDate", nDate);
                        cmdInsert.Parameters.AddWithValue("@newShift", shiftProductionViewModel.SelectedShift);
                        cmdInsert.Parameters.AddWithValue("@statusParam", orderStatus.ToString());
                        int rows2 = cmdInsert.ExecuteNonQuery();

                        //SqlCommand cmdInsUp2 = new SqlCommand("UPDATE RawProductionDetails SET qty = @tileTot, blocklog_qty=@blockTot " +
                        //                                      "WHERE raw_product_id = @rawProdIdParam AND thickness = @thickness AND shift = @oldShift AND production_date=@oldDateParam", conn);


                        cmdInsUp2.Parameters.AddWithValue("@rawProdIdParam", shiftProductionViewModel.RawProductionDetails.RawProduct.RawProductID);
                        cmdInsUp2.Parameters.AddWithValue("@blockTot", leftOvertBlks);
                        cmdInsUp2.Parameters.AddWithValue("@oldDateParam", oldDate);
                        cmdInsUp2.Parameters.AddWithValue("@oldShift", shiftProductionViewModel.RawProductionDetails.Shift);
                        cmdInsUp2.Parameters.AddWithValue("@statusParam", orderStatus.ToString());
                        int rows3 = cmdInsUp2.ExecuteNonQuery();

                        if (rows3 > 0)
                        {
                            resultList = new List<string>();
                            resultList.Add(shiftProductionViewModel.RawProductionDetails.RawProduct.Description);
                            resultList.Add(shiftProductionViewModel.SelectedShift.ToString());
                            resultList.Add(nDate.ToString("dd/MM/yyyy"));
                            resultList.Add(shiftProductionViewModel.Qty.ToString());
                            resultList.Add(shiftProductionViewModel.RawProductionDetails.RawProduct.RawProductType);
                        }
                        else
                        {
                            resultList = null;
                        }

                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL UPDATE COMMAND ERROR OCCURED :  Updating Orders table" + e);
                }
                finally
                {
                    conn.Close();
                }

            }

            return resultList;

        }
       

        static bool TimeBetween(DateTime datetime, TimeSpan start, TimeSpan end)
        {
            // convert datetime to a TimeSpan
            TimeSpan now = datetime.TimeOfDay;
            // see if start comes before end
            if (start < end)
                return start <= now && now <= end;
            // start is after end, so do the inverse comparison
            return !(end < now && now < start);
        }

        public static void ReturnBin(MixingProductionDetails rawProductionDetails,Int32 gradProdTimeTableID)
        {
            decimal blockLog = 0;
            //int prodTimeTableId = 0;
            int shiftID = 0;
            DateTime prodDate = Convert.ToDateTime(rawProductionDetails.ProductionDate);
            string nDate = prodDate.ToString("yyyy-MM-dd");
            string pcName = string.Empty;
            //decimal kgTot = 0;

            pcName = System.Environment.MachineName;
            if (string.IsNullOrEmpty(pcName))
            {
                pcName = "Unknown";
            }

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                //SqlCommand cmdSelectMixingCurrCap = new SqlCommand("SELECT * FROM MixingCurrentCapacity WHERE id =@MixingCurrentCapacityID", conn);

                SqlCommand cmdInsertGradingScheduling = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM GradingScheduling WHERE " +
                                                                       "production_time_table_id=@ProdTimeTableId AND raw_product_id =@RawproductId AND shift=@Shift AND sales_id = @SalesId AND order_type=@OrderType) " +
                                                                       "INSERT INTO GradingScheduling VALUES(@ProdTimeTableId,@RawproductId,@SalesId,@BlockSLogs,@Shift,@Status,@OrderType,@Active,@PrintCounter) " +
                                                                       "ELSE " +
                                                                       "UPDATE GradingScheduling SET blocklog_qty=blocklog_qty+@BlockSLogs, status=@StatusParam WHERE " +
                                                                       "production_time_table_id=@ProdTimeTableId AND raw_product_id =@RawproductId AND sales_id = @SalesId AND shift=@Shift AND order_type=@OrderType", conn);

                SqlCommand cmdInsertCurrentCapacity = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM CurrentCapacity WHERE " +
                                                                     "prod_timetable_id=@ProdTimeTableId AND raw_product_id=@RawProductId AND shift=@Shift AND sales_id=@SalesId AND product_capacity_id=@ProdCapacityId AND order_type=@OrderType) " +
                                                                     "INSERT INTO CurrentCapacity VALUES(@ProdTimeTableId,@ProdCapacityId,@SalesId,@RawproductId,@productId,@Shift,@CapacityKg,@BlockSLogs,@OrderType) " +
                                                                     "ELSE " +
                                                                     "UPDATE CurrentCapacity SET blocks_logs=blocks_logs+@BlocksLogs, capacity_kg=capacity_kg+@CapacityKgParam WHERE prod_timetable_id=@ProdTimeTableId AND raw_product_id=@RawProductId AND shift=@Shift AND sales_id=@SalesId AND product_capacity_id=@ProdCapacityId AND order_type=@OrderType", conn);

                SqlCommand cmdUpdateMixingCurrCap = new SqlCommand("UPDATE MixingCurrentCapacity SET blockLog_qty = @blockLogQtyParam, active_order=@Active WHERE id = @MixingCurrentCapacityID", conn);

                SqlCommand cmdDeleteMixingCurrCap = new SqlCommand("DELETE FROM MixingCurrentCapacity WHERE id = @MixingCurrentCapacityID", conn);

                SqlCommand cmdGradingCompleted = new SqlCommand("INSERT INTO GradingCompleted VALUES(@ProdTimeTableID,@SalesID,@RawProductID,@Qty,@Shift,@OrderType,@CompletedBy,@CreatedDateTime,@CreatedTime,@Status)", conn);

                SqlCommand cmdInsertMixComp = new SqlCommand("INSERT INTO MixingCompleted(mixing_time_table_id, sales_id, raw_product_id,qty,shift,order_type,completed_by,created_date,created_time,status) " +
                                                             "VALUES (@MixingTimeTableID,@SaleID,@RawProductID,@Qty,@Shift,@OrderType,@CompletedBy,@CreatedDate,@CreatedTime,@Status)", conn);

                SqlCommand cmdTransaction = new SqlCommand("INSERT INTO Transactions(transaction_datetime, transaction_type, sales_order_id, raw_product_id,qty,created_by) " +
                                                           "VALUES (@TDateTime,@TType,@SalesOrderID,@RawProductID,@Qty,@CreatedBy)", conn) ;
                //Update MixingStatus
                //SqlCommand cmdUpdateMixingStatus = new SqlCommand("UPDATE MixingStatus SET pending -= 1 WHERE order_no = @OrderNo AND raw_product_id=@RawProductID", conn);

                //Update GradingStatus
                //SqlCommand cmdUpdateGradingStatus = new SqlCommand("UPDATE GradingStatus SET pending += 1,completed -= 1 WHERE order_no = @OrderNo AND raw_product_id=@RawProductID", conn);

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {                    
                    List<Shift> ShiftTimes = GetAllShifts();

                    foreach (var item in ShiftTimes)
                    {
                        bool isShift = TimeBetween(DateTime.Now, item.StartTime, item.EndTime);

                        if (isShift == true)
                        {
                            shiftID = item.ShiftID;
                        }
                    }
                  
                    int gOrderType = 0;
                    if (rawProductionDetails.OrderType == 1 || rawProductionDetails.OrderType == 2 || rawProductionDetails.Rank == 1)
                    {
                        gOrderType = 1;
                    }
                    else if (rawProductionDetails.OrderType == 3 || rawProductionDetails.Rank == 2 || rawProductionDetails.Rank == 3 || rawProductionDetails.Rank == 4)
                    {
                        gOrderType = 3;
                    }

                    cmdInsertGradingScheduling.Transaction = trans;
                    cmdInsertGradingScheduling.Parameters.AddWithValue("@ProdTimeTableId", gradProdTimeTableID);
                    cmdInsertGradingScheduling.Parameters.AddWithValue("@RawproductId", rawProductionDetails.RawProduct.RawProductID);
                    cmdInsertGradingScheduling.Parameters.AddWithValue("@SalesId", rawProductionDetails.SalesOrderId);
                    cmdInsertGradingScheduling.Parameters.AddWithValue("@Shift", shiftID);
                    cmdInsertGradingScheduling.Parameters.AddWithValue("@BlockSLogs", 1);
                    cmdInsertGradingScheduling.Parameters.AddWithValue("@Status", "Grading");
                    cmdInsertGradingScheduling.Parameters.AddWithValue("@StatusParam", "Grading");
                    cmdInsertGradingScheduling.Parameters.AddWithValue("@OrderType", gOrderType);
                    cmdInsertGradingScheduling.Parameters.AddWithValue("@Active", false);
                    cmdInsertGradingScheduling.Parameters.AddWithValue("@PrintCounter", rawProductionDetails.PrintCounter);
                    cmdInsertGradingScheduling.ExecuteNonQuery();

                    List<Formulas> fList = GetFormulaDetailsByRawProdID(rawProductionDetails.RawProduct.RawProductID);
                    if (fList.Count > 0)
                    {
                        if (fList[0].ProductCapacity1 > 0)
                        {
                            cmdInsertCurrentCapacity.Transaction = trans;
                            cmdInsertCurrentCapacity.Parameters.AddWithValue("@ProdTimeTableId", gradProdTimeTableID);
                            cmdInsertCurrentCapacity.Parameters.AddWithValue("@ProdCapacityId", fList[0].ProductCapacity1);
                            cmdInsertCurrentCapacity.Parameters.AddWithValue("@SalesId", rawProductionDetails.SalesOrderId);
                            cmdInsertCurrentCapacity.Parameters.AddWithValue("@RawproductId", rawProductionDetails.RawProduct.RawProductID);
                            cmdInsertCurrentCapacity.Parameters.AddWithValue("@productId", 0);
                            cmdInsertCurrentCapacity.Parameters.AddWithValue("@Shift", shiftID);
                            cmdInsertCurrentCapacity.Parameters.AddWithValue("@CapacityKg", fList[0].GradingWeight1);
                            cmdInsertCurrentCapacity.Parameters.AddWithValue("@BlockSLogs", 1);
                            cmdInsertCurrentCapacity.Parameters.AddWithValue("@OrderType", gOrderType);
                            cmdInsertCurrentCapacity.Parameters.AddWithValue("@CapacityKgParam", fList[0].GradingWeight1);
                            cmdInsertCurrentCapacity.ExecuteNonQuery();
                        }

                        if (fList[0].ProductCapacity2 > 0)
                        {
                            cmdInsertCurrentCapacity.Parameters.Clear();

                            cmdInsertCurrentCapacity.Transaction = trans;
                            cmdInsertCurrentCapacity.Parameters.AddWithValue("@ProdTimeTableId", gradProdTimeTableID);
                            cmdInsertCurrentCapacity.Parameters.AddWithValue("@ProdCapacityId", fList[0].ProductCapacity2);
                            cmdInsertCurrentCapacity.Parameters.AddWithValue("@SalesId", rawProductionDetails.SalesOrderId);
                            cmdInsertCurrentCapacity.Parameters.AddWithValue("@RawproductId", rawProductionDetails.RawProduct.RawProductID);
                            cmdInsertCurrentCapacity.Parameters.AddWithValue("@productId", 0);
                            cmdInsertCurrentCapacity.Parameters.AddWithValue("@Shift", shiftID);
                            cmdInsertCurrentCapacity.Parameters.AddWithValue("@CapacityKg", fList[0].GradingWeight2);
                            cmdInsertCurrentCapacity.Parameters.AddWithValue("@BlockSLogs", 1);
                            cmdInsertCurrentCapacity.Parameters.AddWithValue("@OrderType", rawProductionDetails.OrderType);
                            cmdInsertCurrentCapacity.Parameters.AddWithValue("@CapacityKgParam", fList[0].GradingWeight2);
                            cmdInsertCurrentCapacity.ExecuteNonQuery();
                            //kgTot = 0;                         
                        }
                    }

                    blockLog = rawProductionDetails.BlockLogQty - 1;
                    if (blockLog < 0)
                    {
                        blockLog = 0;
                    }

                    cmdUpdateMixingCurrCap.Transaction = trans;
                    cmdUpdateMixingCurrCap.Parameters.AddWithValue("@MixingCurrentCapacityID", rawProductionDetails.MixingCurrentCapacityID);
                    cmdUpdateMixingCurrCap.Parameters.AddWithValue("@blockLogQtyParam", blockLog);
                    cmdUpdateMixingCurrCap.Parameters.AddWithValue("@Active", false);
                    cmdUpdateMixingCurrCap.ExecuteNonQuery();

                    if (blockLog == 0)
                    {
                        cmdDeleteMixingCurrCap.Transaction = trans;
                        cmdDeleteMixingCurrCap.Parameters.AddWithValue("@MixingCurrentCapacityID", rawProductionDetails.MixingCurrentCapacityID);
                        cmdDeleteMixingCurrCap.ExecuteNonQuery();
                    }

                    if (DateTime.Now.DayOfWeek == DayOfWeek.Friday)
                    {
                        if ((DateTime.Now.TimeOfDay >= new TimeSpan(5, 30, 0)) && (DateTime.Now.TimeOfDay <= new TimeSpan(11, 29, 58)))
                        {
                            shiftID = 1;
                        }
                        else if ((DateTime.Now.TimeOfDay >= new TimeSpan(11, 30, 0)) && (DateTime.Now.TimeOfDay <= new TimeSpan(17, 14, 58)))
                        {
                            shiftID = 2;
                        }
                        else
                        {
                            shiftID = 3;
                        }
                    }

                    //GradingCompleted     
                    cmdGradingCompleted.Transaction = trans;
                    cmdGradingCompleted.Parameters.AddWithValue("@ProdTimeTableID", gradProdTimeTableID);
                    cmdGradingCompleted.Parameters.AddWithValue("@SalesID", rawProductionDetails.SalesOrderId);
                    cmdGradingCompleted.Parameters.AddWithValue("@RawProductID", rawProductionDetails.RawProduct.RawProductID);
                    cmdGradingCompleted.Parameters.AddWithValue("@Qty", 1);
                    cmdGradingCompleted.Parameters.AddWithValue("@Shift", shiftID);
                    cmdGradingCompleted.Parameters.AddWithValue("@OrderType", rawProductionDetails.OrderType);
                    cmdGradingCompleted.Parameters.AddWithValue("@CompletedBy", pcName);
                    cmdGradingCompleted.Parameters.AddWithValue("@CreatedDateTime", DateTime.Now);
                    cmdGradingCompleted.Parameters.AddWithValue("@CreatedTime", DateTime.Now.TimeOfDay);
                    cmdGradingCompleted.Parameters.AddWithValue("@Status", "Returned");
                    cmdGradingCompleted.ExecuteNonQuery();

                    //Mixing Completed
                    cmdInsertMixComp.Transaction = trans;
                    cmdInsertMixComp.Parameters.AddWithValue("@MixingTimeTableID", rawProductionDetails.MixingTimeTableID);
                    cmdInsertMixComp.Parameters.AddWithValue("@SaleID", rawProductionDetails.SalesOrderId);
                    cmdInsertMixComp.Parameters.AddWithValue("@RawProductID", rawProductionDetails.RawProduct.RawProductID);
                    cmdInsertMixComp.Parameters.AddWithValue("@Qty", 1);
                    cmdInsertMixComp.Parameters.AddWithValue("@Shift", shiftID);
                    cmdInsertMixComp.Parameters.AddWithValue("@OrderType", rawProductionDetails.OrderType);
                    cmdInsertMixComp.Parameters.AddWithValue("@CompletedBy", pcName);
                    cmdInsertMixComp.Parameters.AddWithValue("@CreatedDate", DateTime.Now);
                    cmdInsertMixComp.Parameters.AddWithValue("@CreatedTime", DateTime.Now.TimeOfDay);
                    cmdInsertMixComp.Parameters.AddWithValue("@Status", "Returned");
                    cmdInsertMixComp.ExecuteNonQuery();

                    //Transaction
                    cmdTransaction.Transaction = trans;
                    cmdTransaction.Parameters.AddWithValue("@TDateTime", DateTime.Now);
                    cmdTransaction.Parameters.AddWithValue("@TType", "Return Bin");
                    cmdTransaction.Parameters.AddWithValue("@SalesOrderID", rawProductionDetails.SalesOrderId);
                    cmdTransaction.Parameters.AddWithValue("@RawProductID", rawProductionDetails.RawProduct.RawProductID);
                    cmdTransaction.Parameters.AddWithValue("@Qty", 1);
                    cmdTransaction.Parameters.AddWithValue("@CreatedBy", pcName);
                    int t = cmdTransaction.ExecuteNonQuery();

                    //cmdUpdateMixingStatus.Transaction = trans;
                    //cmdUpdateMixingStatus.Parameters.AddWithValue("@OrderNo", rawProductionDetails.SalesOrderId);
                    //cmdUpdateMixingStatus.Parameters.AddWithValue("@RawProductID", rawProductionDetails.RawProduct.RawProductID);
                    //cmdUpdateMixingStatus.ExecuteNonQuery();

                    //cmdUpdateGradingStatus.Transaction = trans;
                    //cmdUpdateGradingStatus.Parameters.AddWithValue("@OrderNo", rawProductionDetails.SalesOrderId);
                    //cmdUpdateGradingStatus.Parameters.AddWithValue("@RawProductID", rawProductionDetails.RawProduct.RawProductID);
                    //cmdUpdateGradingStatus.ExecuteNonQuery();

                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("Error on ReturnBin function: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
        }

        public static List<MixingOnly> GetMixingOnly()
        {
            List<MixingOnly> mixingOnlyList = new List<MixingOnly>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT * FROM MixingOnly", conn))
                    {

                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    MixingOnly mo = new MixingOnly();

                                    mo.ProductID = Convert.ToInt16(dr["product_id"]);
                                    mo.RawProductID = Convert.ToInt16(dr["raw_product_id"]);
                                    mixingOnlyList.Add(mo);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading production line: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return mixingOnlyList;

        }

        public static ObservableCollection<StockMaintenanceDetails> GetRawStockDetails()
        {
            ObservableCollection<StockMaintenanceDetails> stockMaintenanceDetailsList = new ObservableCollection<StockMaintenanceDetails>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT RawProducts.RawProductID,RawProducts.RawProductCode,RawProducts.Description,RawProducts.RawProductType,RawStock.rs_qty,RawStock.last_updated_date, ISNULL(SUM(RawStockReserve.blocks_logs),0) AS reserved " +
                                                                  "FROM RawProducts " +
                                                                  "INNER JOIN RawStock ON RawProducts.RawProductID = RawStock.rs_raw_product_id " +
                                                                  "LEFT JOIN RawStockReserve ON RawStock.rs_raw_product_id = RawStockReserve.raw_product_id " +
                                                                  "WHERE RawProducts.RawProductID <> 7 " +
                                                                  "GROUP BY RawProducts.RawProductID,RawProducts.RawProductCode,RawProducts.Description,RawProducts.RawProductType, RawStock.rs_qty,RawStock.last_updated_date " +
                                                                  "ORDER BY RawProducts.RawProductType", conn))
                    {

                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    StockMaintenanceDetails smd = new StockMaintenanceDetails();

                                    smd.RawProduct = new RawProduct()
                                    {
                                        RawProductID = Convert.ToInt16(dr["RawProductID"]),
                                        RawProductCode = dr["RawProductCode"].ToString(),
                                        Description = dr["Description"].ToString(),
                                        RawProductType = dr["RawProductType"].ToString()
                                    };
                                    smd.RawStock = new RawStock()
                                    {
                                        Qty = Math.Ceiling(Convert.ToDecimal(dr["rs_qty"])),
                                        ReservedQty = Math.Ceiling(Convert.ToDecimal(dr["reserved"])),
                                        LastUpdatedDate = Convert.ToDateTime(dr["last_updated_date"])
                                    };
                                    stockMaintenanceDetailsList.Add(smd);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading production line: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return stockMaintenanceDetailsList;

        }

        public static int UpdateRawStock(EditStockMaintenanceViewModel esmVM)
        {
            int rows = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {

                using (SqlCommand cmdUpdateRawStock = new SqlCommand("UPDATE RawStock SET rs_qty = @rawStockQty,last_updated_date=@LastUpdatedDate WHERE rs_raw_product_id =@rawProductId", conn))
                {
                    conn.Open();
                    try
                    {
                        cmdUpdateRawStock.Parameters.AddWithValue("@rawStockQty", esmVM.AQty);
                        cmdUpdateRawStock.Parameters.AddWithValue("@rawProductId", esmVM.RawProductID);
                        cmdUpdateRawStock.Parameters.AddWithValue("@LastUpdatedDate", DateTime.Now);
                        rows = cmdUpdateRawStock.ExecuteNonQuery();
                    }
                    catch (Exception e)
                    {
                        Debug.WriteLine("SQL UPDATE COMMAND ERROR OCCURED :  Updating RawStock Table" + e);
                    }
                    finally
                    {
                        conn.Close();
                    }
                }
            }
            return rows;
        }


        public static ObservableCollection<Formulas> GetFormulas()
        {

            ObservableCollection<Formulas> formulaList = new ObservableCollection<Formulas>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT * FROM Formulas", conn))
                    {
                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    Formulas formulas = new Formulas();
                                    formulas.RawProductID = Convert.ToInt16(dr["raw_product_id"]);
                                    formulas.ProductCapacity1 = Convert.ToInt16(dr["product_capacity1"]);
                                    formulas.ProductCapacity2 = Convert.ToInt16(dr["product_capacity2"]);
                                    formulas.GradingWeight1 = Convert.ToDecimal(dr["grading_weight1"]);
                                    formulas.GradingWeight2 = Convert.ToDecimal(dr["grading_weight2"]);
                                    formulas.GradingWeight3 = Convert.ToDecimal(dr["grading_weight3"]);
                                    formulas.GradingFormula = dr["grading"].ToString();
                                    formulas.MixingFormula = dr["mixing"].ToString();
                                    formulaList.Add(formulas);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading Product Capacity: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return formulaList;
        }

        //public static List<Product> GetPeelingReRollingList()
        //{
        //    List<Product> peelingReRollingList = new List<Product>();

        //    using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
        //    {
        //        try
        //        {
        //            conn.Open();

        //            using (SqlCommand cmdGetData = new SqlCommand("SELECT PeelingReRolling.id,PeelingReRolling.peeling,PeelingReRolling.re_rolling, " +
        //                                                          "Products.id AS ProductID,RawProducts.RawProductID,RawProducts.RawProductCode,RawProducts.RawProductName,RawProducts.Description,RawProducts.RawProductType,Products.product_name,Products.product_code,Products.product_description,Products.unit,Products.price,Products.Thickness,Products.width,Products.active, " +
        //                                                          "BulkRoll.density,BulkRoll.length,BulkRoll.max_yield,BulkRoll.min_yield,BulkRoll.min_cut_length,BulkRoll.custom_re_roll  " +
        //                                                          "FROM PeelingReRolling " +
        //                                                          "INNER JOIN Products ON PeelingReRolling.peeling = Products.id OR PeelingReRolling.re_rolling = Products.id " +
        //                                                          "INNER JOIN BulkRoll ON Products.id = BulkRoll.product_id " +
        //                                                          "INNER JOIN RawProducts ON Products.raw_product_id  = RawProducts.RawProductID ORDER BY Products.unit", conn))
        //            {
        //                using (SqlDataReader dr = cmdGetData.ExecuteReader())
        //                {
        //                    if (dr.HasRows)
        //                    {
        //                        while (dr.Read())
        //                        {
        //                            if (dr["unit"].ToString() == "BULK ROLL")
        //                            {
        //                                Product prod = new Product()
        //                                {
        //                                    BulkRoll = new BulkRoll()
        //                                    {
        //                                        ProductID = Convert.ToInt16(dr["peeling"]),
        //                                        ProductCode = dr["product_code"].ToString(),
        //                                        ProductName = dr["product_name"].ToString(),
        //                                        ProductDescription = dr["product_description"].ToString(),
        //                                        ProductUnit = dr["unit"].ToString(),
        //                                        ProductPrice = Convert.ToDecimal(dr["price"]),
        //                                        Thickness = Convert.ToInt16(dr["Thickness"]),
        //                                        MaxYield = Convert.ToInt16(dr["max_yield"]),
        //                                        MinYield = Convert.ToInt16(dr["min_yield"]),
        //                                        MinCutLength = Convert.ToInt16(dr["min_cut_length"]),
        //                                        Density = dr["density"].ToString(),
        //                                        Length = Convert.ToInt16(dr["length"]),
        //                                        IsCustomReRoll = Convert.ToBoolean(dr["custom_re_roll"]),
        //                                        RawProduct = new RawProduct()
        //                                        {
        //                                            RawProductID = Convert.ToInt16(dr["RawProductID"]),
        //                                            RawProductCode = dr["RawProductCode"].ToString(),
        //                                            RawProductName = dr["RawProductName"].ToString(),
        //                                            RawProductType = dr["RawProductType"].ToString(),
        //                                            Description = dr["Description"].ToString()
        //                                        }
        //                                    }
        //                                };
        //                                peelingReRollingList.Add(prod);
        //                            }
        //                            else if (dr["unit"].ToString() == "ROLL")
        //                            {
        //                                var reRollExist = peelingReRollingList.FirstOrDefault(x => (x.BulkRoll.ProductID == Convert.ToInt16(dr["peeling"])));
        //                                reRollExist.BulkRoll.StandardRoll = new StandardRoll()
        //                                {
        //                                    ProductID = Convert.ToInt16(dr["re_rolling"]),
        //                                    ProductCode = dr["product_code"].ToString(),
        //                                    ProductName = dr["product_name"].ToString(),
        //                                    ProductDescription = dr["product_description"].ToString(),
        //                                    ProductUnit = dr["unit"].ToString(),
        //                                    ProductPrice = Convert.ToDecimal(dr["price"]),
        //                                    Thickness = Convert.ToInt16(dr["Thickness"]),
        //                                    MaxYield = Convert.ToInt16(dr["max_yield"]),
        //                                    RawProduct = new RawProduct()
        //                                    {
        //                                        RawProductID = Convert.ToInt16(dr["RawProductID"]),
        //                                        RawProductCode = dr["RawProductCode"].ToString(),
        //                                        RawProductName = dr["RawProductName"].ToString(),
        //                                        RawProductType = dr["RawProductType"].ToString(),
        //                                        Description = dr["Description"].ToString()
        //                                    }
        //                                };
        //                            }

        //                            //PeelingReRolling prr = new PeelingReRolling();
        //                            //prr.ID = Convert.ToInt16(dr["id"]);
        //                            //prr.PeelingID = Convert.ToInt16(dr["peeling"]);
        //                            //prr.ReRollingID = Convert.ToInt16(dr["re_rolling"]);
        //                            //prr.Product = new Product() 
        //                            //{ 
        //                            //    ProductID = Convert.ToInt16(dr["ProductID"]), 
        //                            //    RawProduct = new RawProduct() 
        //                            //    { 
        //                            //        RawProductID = Convert.ToInt16(dr["raw_product_id"]) }, 
        //                            //        ProductName = dr["product_name"].ToString(), 
        //                            //        ProductCode = dr["product_code"].ToString(), 
        //                            //        ProductDescription = dr["product_description"].ToString(), 
        //                            //        ProductUnit = dr["unit"].ToString(), 
        //                            //        ProductPrice = Convert.ToDecimal(dr["price"]), 
        //                            //        Thickness = Convert.ToInt16(dr["Thickness"]), 
        //                            //        BulkRoll = new BulkRoll() 
        //                            //        { 
        //                            //            Density = dr["density"].ToString(),
        //                            //            MaxYield = Convert.ToDecimal(dr["max_yield"])
        //                            //        }, 
        //                            //        Active = Convert.ToBoolean(dr["active"]) };

        //                        }
        //                    }
        //                }
        //            }
        //        }
        //        catch (Exception e)
        //        {
        //            Debug.WriteLine("Error reading PeelingReRolling: " + e);
        //        }
        //        finally
        //        {
        //            conn.Close();
        //        }
        //    }
        //    return peelingReRollingList;
        //}

        //public static int InsertCurrentCapacity(int prodCapID, DateTime ProductionDate,int shift,decimal capacityKg, string WorkStation)
        //{
        //    int result = 0;
        //    decimal totCapKg = 0;

        //    using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
        //    {
        //        try
        //        {
        //            SqlTransaction trans = null;
        //            conn.Open();
        //            trans = conn.BeginTransaction();

        //            SqlCommand cmdSelect = new SqlCommand("SELECT capacity_kg FROM CurrentCapacity " +
        //                                                  "WHERE product_capacity_id = @productCapacityId AND shift = @shift AND production_date=@productionDate AND work_station =@WorkStation", conn);

        //            SqlCommand cmdInsertCurrentCapacity = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM CurrentCapacity WHERE " +
        //                                                         "product_capacity_id=@productCapacityId AND shift = @shift AND production_date=@productionDate AND work_station =@WorkStation) " +
        //                                                         "INSERT INTO CurrentCapacity VALUES(@productCapacityId,@productionDate,@shift,@capacityKg,@WorkStation) " +
        //                                                         "ELSE " +
        //                                                         "UPDATE CurrentCapacity SET capacity_kg=@capacityKg WHERE product_capacity_id = @productCapacityId AND shift = @shift AND production_date=@productionDate AND work_station =@WorkStation", conn);

        //            cmdSelect.Transaction = trans;
        //            cmdSelect.Parameters.AddWithValue("@productCapacityId", prodCapID);
        //            cmdSelect.Parameters.AddWithValue("@shift", shift);
        //            cmdSelect.Parameters.AddWithValue("@productionDate", ProductionDate);
        //            cmdSelect.Parameters.AddWithValue("@WorkStation", WorkStation);

        //            using (SqlDataReader dr = cmdSelect.ExecuteReader())
        //            {
        //                if (dr != null)
        //                {
        //                    if (dr.HasRows)
        //                    {
        //                        while (dr.Read())
        //                        {
        //                            totCapKg = Convert.ToDecimal(dr["capacity_kg"]) + capacityKg;
        //                        }
        //                    }
        //                    else
        //                    {
        //                        totCapKg = capacityKg;
        //                    }
        //                }
        //            }
        //            cmdSelect.Parameters.Clear();

        //            cmdInsertCurrentCapacity.Transaction = trans;
        //            cmdInsertCurrentCapacity.Parameters.AddWithValue("@productCapacityId", prodCapID);
        //            cmdInsertCurrentCapacity.Parameters.AddWithValue("@productionDate", ProductionDate);
        //            cmdInsertCurrentCapacity.Parameters.AddWithValue("@shift", shift);
        //            cmdInsertCurrentCapacity.Parameters.AddWithValue("@capacityKg", totCapKg);
        //            cmdInsertCurrentCapacity.Parameters.AddWithValue("@WorkStation", WorkStation);

        //            result = cmdInsertCurrentCapacity.ExecuteNonQuery();

        //            trans.Commit();
        //        }
        //        catch (Exception e)
        //        {
        //            Debug.WriteLine("Error: " + e);
        //        }
        //        finally
        //        {
        //            conn.Close();
        //        }
        //    }

        //    return result;
        //}

        public static List<BulkRoll> GetPeelingReRollingList()
        {
            List<BulkRoll> bulkRollList = new List<BulkRoll>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT * FROM PeelingReRolling", conn))
                    {
                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {

                                    BulkRoll br = new BulkRoll();
                                    br.ProductID = Convert.ToInt16(dr["peeling"]);
                                    br.StandardRoll = new StandardRoll() { ProductID = Convert.ToInt16(dr["re_rolling"]) };
                                    bulkRollList.Add(br);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading PeelingReRolling: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return bulkRollList;
        }

        public static BulkRoll GetPeelingReRollingProducts(BulkRoll bulkRoll)
        {

            BulkRoll bulkRollStandardRoll = new BulkRoll();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT Products.id,Products.category_id,RawProducts.RawProductID,RawProducts.RawProductCode,RawProducts.RawProductName,RawProducts.Description,RawProducts.RawProductType,Products.type,Products.product_name,Products.product_code,Products.product_description,Products.unit,Products.price,Products.logo_path,Products.qr_video_path,Products.qr_pdf_path,Products.active,Products.thickness,Products.width, " +
                                                                  "BulkRoll.density,BulkRoll.length,0 AS height,0 AS tiles_per_block, BulkRoll.max_yield,BulkRoll.min_yield,0 AS min_cut_length,BulkRoll.custom_re_roll " +
                                                                  "FROM   BulkRoll " +
                                                                  "INNER JOIN Products ON BulkRoll.product_id = Products.id " +
                                                                  "INNER JOIN RawProducts ON Products.raw_product_id = RawProducts.RawProductID WHERE Products.id = @ProductID AND active ='true'", conn))
                    {
                        //BulkROLL
                        cmdGetData.Parameters.AddWithValue("@ProductID", bulkRoll.ProductID);
                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    bulkRollStandardRoll.ProductID = Convert.ToInt16(dr["id"]);
                                    bulkRollStandardRoll.Type = dr["type"].ToString();
                                    bulkRollStandardRoll.ProductCode = dr["product_code"].ToString();
                                    bulkRollStandardRoll.ProductName = dr["product_name"].ToString();
                                    bulkRollStandardRoll.ProductDescription = dr["product_description"].ToString();
                                    bulkRollStandardRoll.ProductUnit = dr["unit"].ToString();
                                    bulkRollStandardRoll.UnitPrice = Convert.ToDecimal(dr["price"]);
                                    bulkRollStandardRoll.Tile = new Tile() { Thickness = Convert.ToDecimal(dr["thickness"]) };
                                    bulkRollStandardRoll.Width = Convert.ToDecimal(dr["width"]);
                                    bulkRollStandardRoll.LogoPath = dr["logo_path"].ToString();
                                    bulkRollStandardRoll.QRVideoPath = dr["qr_video_path"].ToString();
                                    bulkRollStandardRoll.QRPDFPath = dr["qr_pdf_path"].ToString();
                                    bulkRollStandardRoll.Active = Convert.ToBoolean(dr["active"]);
                                    bulkRollStandardRoll.Category = new Category() { CategoryID = Convert.ToInt16(dr["category_id"]) };
                                    bulkRollStandardRoll.RawProduct = new RawProduct()
                                          {
                                              RawProductID = Convert.ToInt16(dr["RawProductID"]),
                                              RawProductCode = dr["RawProductCode"].ToString(),
                                              RawProductName = dr["RawProductName"].ToString(),
                                              Description = dr["Description"].ToString(),
                                              RawProductType = dr["RawProductType"].ToString()
                                          };
                                    bulkRollStandardRoll.Density = dr["density"].ToString();
                                    bulkRollStandardRoll.Length = Convert.ToDecimal(dr["length"]);
                                    bulkRollStandardRoll.MaxYield = Convert.ToDecimal(dr["max_yield"]);
                                    bulkRollStandardRoll.MinYield = Convert.ToDecimal(dr["min_yield"]);
                                    bulkRollStandardRoll.IsCustomReRoll = Convert.ToBoolean(dr["custom_re_roll"]);
                                }
                            }
                        }
                        cmdGetData.Parameters.Clear();
                        //Standard Roll
                        cmdGetData.Parameters.AddWithValue("@ProductID", bulkRoll.StandardRoll.ProductID);
                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {

                                    bulkRollStandardRoll.StandardRoll = new StandardRoll()
                                    {
                                        ProductID = Convert.ToInt16(dr["id"]),
                                        Type = dr["type"].ToString(),
                                        ProductCode = dr["product_code"].ToString(),
                                        ProductName = dr["product_name"].ToString(),
                                        ProductDescription = dr["product_description"].ToString(),
                                        ProductUnit = dr["unit"].ToString(),
                                        UnitPrice = Convert.ToDecimal(dr["price"]),
                                        Tile = new Tile() { Thickness = Convert.ToDecimal(dr["thickness"]) },
                                        Width = Convert.ToDecimal(dr["width"]),
                                        LogoPath = dr["logo_path"].ToString(),
                                        QRVideoPath = dr["qr_video_path"].ToString(),
                                        QRPDFPath = dr["qr_pdf_path"].ToString(),
                                        Active = Convert.ToBoolean(dr["active"]),
                                        Category = new Category() { CategoryID = Convert.ToInt16(dr["category_id"]) },
                                        RawProduct = new RawProduct()
                                        {
                                            RawProductID = Convert.ToInt16(dr["RawProductID"]),
                                            RawProductCode = dr["RawProductCode"].ToString(),
                                            RawProductName = dr["RawProductName"].ToString(),
                                            Description = dr["Description"].ToString(),
                                            RawProductType = dr["RawProductType"].ToString()
                                        },
                                        Density = dr["density"].ToString(),
                                        Length = Convert.ToDecimal(dr["length"]),
                                        MaxYield = Convert.ToDecimal(dr["max_yield"]),
                                        MinYield = Convert.ToDecimal(dr["min_yield"]),
                                        MinCutLength = Convert.ToDecimal(dr["min_cut_length"])
                                    };
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading PeelingReRolling: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return bulkRollStandardRoll;
        }

        public static ObservableCollection<ProductCapacity> GetCapacityLimitations(int id)
        {

            ObservableCollection<ProductCapacity> capLimList = new ObservableCollection<ProductCapacity>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT * FROM ProductCapacity WHERE production_time_table_id=@ProdTimeTableId", conn))
                    {
                        cmdGetData.Parameters.AddWithValue("@ProdTimeTableId", id);
                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    ProductCapacity productCapacity = new ProductCapacity();
                                    productCapacity.ID = Convert.ToInt32(dr["id"]);
                                    productCapacity.ProductionTimeTableID = Convert.ToInt32(dr["production_time_table_id"]);
                                    productCapacity.Shift = Convert.ToInt16(dr["shift"]);
                                    productCapacity.RubberGradingID = Convert.ToInt16(dr["rubber_grading_id"]);
                                    productCapacity.CapacityKG = Convert.ToDecimal(dr["capacity_kg"]);
                                    productCapacity.GradedKG = Convert.ToDecimal(dr["graded_kg"]);
                                    capLimList.Add(productCapacity);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading Product Capacity: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return capLimList;
        }


        public static ObservableCollection<ProductCapacity> GetProductCapacityLimitByTimeTable(List<ProductionTimeTable> ptt)
        {

            ObservableCollection<ProductCapacity> capLimList = new ObservableCollection<ProductCapacity>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();


                    using (SqlCommand cmdGetData = new SqlCommand("SELECT * FROM ProductCapacity WHERE production_time_table_id=@ProdTimeTableId", conn))
                    {
                        foreach (var item in ptt)
                        {
                            cmdGetData.Parameters.AddWithValue("@ProdTimeTableId", item.ID);
                            using (SqlDataReader dr = cmdGetData.ExecuteReader())
                            {
                                if (dr != null)
                                {
                                    while (dr.Read())
                                    {
                                        ProductCapacity productCapacity = new ProductCapacity();
                                        productCapacity.ID = Convert.ToInt32(dr["id"]);
                                        productCapacity.ProductionTimeTableID = Convert.ToInt32(dr["production_time_table_id"]);
                                        productCapacity.Shift = Convert.ToInt16(dr["shift"]);
                                        productCapacity.RubberGradingID = Convert.ToInt16(dr["rubber_grading_id"]);
                                        productCapacity.CapacityKG = Convert.ToDecimal(dr["capacity_kg"]);
                                        productCapacity.GradedKG = Convert.ToDecimal(dr["graded_kg"]);
                                        capLimList.Add(productCapacity);
                                    }
                                }
                            }
                            cmdGetData.Parameters.Clear();
                        }
                    }

                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading Product Capacity: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return capLimList;
        }

        public static ObservableCollection<ProductCapacity> GetSlitPeelMaxCapacity(int id)
        {

            ObservableCollection<ProductCapacity> capLimList = new ObservableCollection<ProductCapacity>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT * FROM ProductCapacity WHERE production_time_table_id=@ProdTimeTableId", conn))
                    {
                        cmdGetData.Parameters.AddWithValue("@ProdTimeTableId", id);
                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    ProductCapacity productCapacity = new ProductCapacity();
                                    productCapacity.ID = Convert.ToInt32(dr["id"]);
                                    productCapacity.ProductionTimeTableID = Convert.ToInt32(dr["production_time_table_id"]);
                                    productCapacity.Shift = Convert.ToInt16(dr["shift"]);
                                    productCapacity.RubberGradingID = Convert.ToInt16(dr["rubber_grading_id"]);
                                    productCapacity.CapacityKG = Convert.ToDecimal(dr["capacity_kg"]);
                                    productCapacity.GradedKG = Convert.ToDecimal(dr["graded_kg"]);
                                    capLimList.Add(productCapacity);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading Product Capacity: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return capLimList;
        }

        public static List<ProductionTimeTable> GetProductionTimeTableByID(int id, DateTime currentDate)
        {
            string neDate = currentDate.ToString("yyy-MM-dd");

            List<ProductionTimeTable> productionTimeTableList = new List<ProductionTimeTable>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT * FROM ProductionTimeTable " +
                                                                  "WHERE (machine_id=1 OR machine_id=7) AND date = @currDate", conn))
                    {
                        cmdGetData.Parameters.AddWithValue("@id", id);
                        cmdGetData.Parameters.AddWithValue("@currDate", neDate);
                        cmdGetData.Parameters.AddWithValue("@machineActive", true);

                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    ProductionTimeTable pt = new ProductionTimeTable();
                                    pt.ID = Convert.ToInt32(dr["id"]);
                                    pt.MachineID = Convert.ToInt16(dr["machine_id"]);
                                    pt.ProductionDate = Convert.ToDateTime(dr["date"]);
                                    pt.IsMachineActive = Convert.ToBoolean(dr["machine_active"]);
                                    pt.IsDayShiftActive = Convert.ToBoolean(dr["day_shift"]);
                                    pt.IsEveningShiftActive = Convert.ToBoolean(dr["evening_shift"]);
                                    pt.IsNightShiftActive = Convert.ToBoolean(dr["night_shift"]);

                                    productionTimeTableList.Add(pt);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading Product Capacity: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return productionTimeTableList;
        }


        public static List<ProductionTimeTable> GetProductionTimeTableDateByID(Int32 id)
        {

            List<ProductionTimeTable> productionTimeTableList = new List<ProductionTimeTable>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT * FROM ProductionTimeTable " +
                                                                  "WHERE id=@id", conn))
                    {
                        cmdGetData.Parameters.AddWithValue("@id", id);

                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    ProductionTimeTable pt = new ProductionTimeTable();
                                    pt.ID = Convert.ToInt32(dr["id"]);
                                    pt.MachineID = Convert.ToInt16(dr["machine_id"]);
                                    pt.ProductionDate = Convert.ToDateTime(dr["date"]);
                                    pt.IsMachineActive = Convert.ToBoolean(dr["machine_active"]);
                                    pt.IsDayShiftActive = Convert.ToBoolean(dr["day_shift"]);
                                    pt.IsEveningShiftActive = Convert.ToBoolean(dr["evening_shift"]);
                                    pt.IsNightShiftActive = Convert.ToBoolean(dr["night_shift"]);

                                    productionTimeTableList.Add(pt);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading Product Capacity: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return productionTimeTableList;
        }

        public static List<ProductionTimeTable> GetProductionTimeTableByMachineID(int id, DateTime currentDate)
        {
            string neDate = currentDate.ToString("yyy-MM-dd");

            List<ProductionTimeTable> productionTimeTableList = new List<ProductionTimeTable>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT * FROM ProductionTimeTable " +
                                                                  "WHERE machine_id=@id AND date = @currDate", conn))
                    {
                        cmdGetData.Parameters.AddWithValue("@id", id);
                        cmdGetData.Parameters.AddWithValue("@currDate", neDate);
                        cmdGetData.Parameters.AddWithValue("@machineActive", true);

                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    ProductionTimeTable pt = new ProductionTimeTable();
                                    pt.ID = Convert.ToInt32(dr["id"]);
                                    pt.MachineID = Convert.ToInt16(dr["machine_id"]);
                                    pt.ProductionDate = Convert.ToDateTime(dr["date"]);
                                    pt.IsMachineActive = Convert.ToBoolean(dr["machine_active"]);
                                    pt.IsDayShiftActive = Convert.ToBoolean(dr["day_shift"]);
                                    pt.IsEveningShiftActive = Convert.ToBoolean(dr["evening_shift"]);
                                    pt.IsNightShiftActive = Convert.ToBoolean(dr["night_shift"]);

                                    productionTimeTableList.Add(pt);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading Product Capacity: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return productionTimeTableList;
        }

        public static List<ProductionTimeTable> GetAllTimeTableDates(int id, DateTime currentDate)
        {
            string neDate = currentDate.ToString("yyy-MM-dd");

            List<ProductionTimeTable> productionTimeTableList = new List<ProductionTimeTable>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT * FROM ProductionTimeTable " +
                                                                  "WHERE machine_id=@id AND date >= @currDate ORDER BY date", conn))
                    {
                        cmdGetData.Parameters.AddWithValue("@id", id);
                        cmdGetData.Parameters.AddWithValue("@currDate", neDate);
                        cmdGetData.Parameters.AddWithValue("@machineActive", true);

                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    ProductionTimeTable pt = new ProductionTimeTable();
                                    pt.ID = Convert.ToInt32(dr["id"]);
                                    pt.MachineID = Convert.ToInt16(dr["machine_id"]);
                                    pt.ProductionDate = Convert.ToDateTime(dr["date"]);
                                    pt.IsMachineActive = Convert.ToBoolean(dr["machine_active"]);
                                    pt.IsDayShiftActive = Convert.ToBoolean(dr["day_shift"]);
                                    pt.IsEveningShiftActive = Convert.ToBoolean(dr["evening_shift"]);
                                    pt.IsNightShiftActive = Convert.ToBoolean(dr["night_shift"]);

                                    productionTimeTableList.Add(pt);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading Product Capacity: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return productionTimeTableList;
        }

        public static ObservableCollection<ProductionTimeTable> GetAllTimeTableDatesForObservableColl(DateTime currentDate, string type)
        {
            string neDate = currentDate.ToString("yyy-MM-dd");
            string where = string.Empty;
            if (type.Equals("Grading"))
            {
                where = "(machine_id=1 OR machine_id=7 OR machine_id=18)";
            }
            if (type.Equals("Mixing"))
            {
                where = "(machine_id=2 OR machine_id=3)";
            }
            else if (type.Equals("Slitting"))
            {
                where = "(machine_id=4 OR machine_id=8)";
            }
            else if (type.Equals("Peeling"))
            {
                where = "(machine_id=5)";
            }


            ObservableCollection<ProductionTimeTable> productionTimeTableList = new ObservableCollection<ProductionTimeTable>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT * FROM ProductionTimeTable " +
                                                                  "WHERE " + where + " AND date >= @currDate ORDER BY date ASC", conn))
                    {
                        //cmdGetData.Parameters.AddWithValue("@id", id);
                        cmdGetData.Parameters.AddWithValue("@currDate", neDate);
                        cmdGetData.Parameters.AddWithValue("@machineActive", true);

                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    ProductionTimeTable pt = new ProductionTimeTable();
                                    pt.ID = Convert.ToInt32(dr["id"]);
                                    pt.MachineID = Convert.ToInt16(dr["machine_id"]);
                                    pt.ProductionDate = Convert.ToDateTime(dr["date"]);
                                    pt.IsMachineActive = Convert.ToBoolean(dr["machine_active"]);
                                    pt.IsDayShiftActive = Convert.ToBoolean(dr["day_shift"]);
                                    pt.IsEveningShiftActive = Convert.ToBoolean(dr["evening_shift"]);
                                    pt.IsNightShiftActive = Convert.ToBoolean(dr["night_shift"]);

                                    productionTimeTableList.Add(pt);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading Product Capacity: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return productionTimeTableList;
        }

        public static ObservableCollection<ProductionTimeTable> GetAllTimeTableDatesForSlitting(DateTime currentDate)
        {
            string neDate = currentDate.ToString("yyy-MM-dd");

            ObservableCollection<ProductionTimeTable> productionTimeTableList = new ObservableCollection<ProductionTimeTable>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT * FROM ProductionTimeTable " +
                                                                 "WHERE (machine_id=8 OR machine_id=4) AND date >= @currDate  ORDER BY date ASC", conn))
                                                                 // "WHERE machine_id=@machineID AND date >= @currDate ORDER BY date ASC", conn))
                    {
                        cmdGetData.Parameters.AddWithValue("@currDate", neDate);
                        //cmdGetData.Parameters.AddWithValue("@machineID", machineId);
                        cmdGetData.Parameters.AddWithValue("@machineActive", true);

                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    ProductionTimeTable pt = new ProductionTimeTable();
                                    pt.ID = Convert.ToInt32(dr["id"]);
                                    pt.MachineID = Convert.ToInt16(dr["machine_id"]);
                                    pt.ProductionDate = Convert.ToDateTime(dr["date"]);
                                    pt.IsMachineActive = Convert.ToBoolean(dr["machine_active"]);
                                    pt.IsDayShiftActive = Convert.ToBoolean(dr["day_shift"]);
                                    pt.IsEveningShiftActive = Convert.ToBoolean(dr["evening_shift"]);
                                    pt.IsNightShiftActive = Convert.ToBoolean(dr["night_shift"]);

                                    productionTimeTableList.Add(pt);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading Product Capacity: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return productionTimeTableList;
        }


        public static List<Order> GetAllOrders()
        {
            List<Order> orders = new List<Order>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT Orders.order_id,Orders.sales_no,Customers.CustomerID,Customers.CompanyName,Orders.required_date,Orders.comments,Orders.created_date " +
                                                                  "FROM Orders " +
                                                                  "INNER JOIN Customers ON Orders.customer_id = Customers.CustomerID " +
                                                                  "ORDER BY Orders.order_id DESC", conn))
                    {

                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    Order o = new Order();
                                    o.OrderNo = Convert.ToInt32(dr["order_id"]);
                                    o.SalesNo = dr["sales_no"].ToString();
                                    o.Customer = new Customer() { CustomerId = Convert.ToInt16(dr["CustomerID"]), CompanyName = dr["CompanyName"].ToString() };
                                    o.RequiredDate = Convert.ToDateTime(dr["required_date"]);
                                    o.Comments = dr["comments"].ToString();
                                    o.OrderCreatedDate = Convert.ToDateTime(dr["created_date"]);
                                    o.SearchString = dr["CompanyName"].ToString() + " | " + dr["sales_no"].ToString() + " | " + dr["order_id"].ToString() + " | " + dr["comments"].ToString();
                                    orders.Add(o);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading Product Capacity: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return orders;
        }

        public static Order GetOrderDetailsByOrderNo(Int64 orderNo)
        {
            Order order = new Order();
            order.OrderDetails = new ObservableCollection<OrderDetails>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT OrderDetails.order_id,OrderDetails.qty,Products.id,Products.product_code,Products.product_description,Products.active,Products.category_id,Products.custom_re_roll,Products.density,Products.height,Products.logo_path,Products.logo_path,Products.max_yield,Products.min_cut_length,Products.min_yield,Products.mould_type,Products.price,Products.product_name,Products.qr_pdf_path,Products.qr_video_path,Products.thickness,Products.type,Products.unit,Products.width, " +
                                                                  "RawProducts.RawProductID,RawProducts.RawProductCode,RawProducts.RawProductName,RawProducts.Description,RawProducts.RawProductType " +
                                                                  "FROM OrderDetails " +
                                                                  "INNER JOIN Products ON OrderDetails.product_id = Products.id " +
                                                                  "INNER JOIN RawProducts ON Products.raw_product_id = RawProducts.RawProductID WHERE order_id=@OrderNo", conn))
                    {
                        cmdGetData.Parameters.AddWithValue("@OrderNo", orderNo);
                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    order.OrderDetails.Add(new OrderDetails()
                                    {
                                        Quantity = Convert.ToDecimal(dr["qty"]),
                                        Product = new Product()
                                        {
                                            ProductID = Convert.ToInt16(dr["id"]),
                                            Category = new Category() { CategoryID = Convert.ToInt16(dr["category_id"]) },
                                            RawProduct = new RawProduct()
                                            {
                                                RawProductID = Convert.ToInt16(dr["RawProductID"]),
                                                RawProductCode = dr["RawProductCode"].ToString(),
                                                RawProductName = dr["RawProductName"].ToString(),
                                                Description = dr["Description"].ToString(),
                                                RawProductType = dr["RawProductType"].ToString()
                                            },
                                            Type = dr["type"].ToString(),
                                            ProductCode = dr["product_code"].ToString(),
                                            ProductName = dr["product_name"].ToString(),
                                            ProductDescription = dr["product_description"].ToString(),
                                            ProductUnit = dr["unit"].ToString(),
                                            UnitPrice = Convert.ToDecimal(dr["price"]),
                                            Density = dr["density"].ToString(),
                                            Tile = new Tile()
                                            {
                                                Thickness = Convert.ToDecimal(dr["thickness"]),
                                                Height = Convert.ToDecimal(dr["height"]),
                                                MaxYield = Convert.ToDecimal(dr["max_yield"]),
                                                MinYield = Convert.ToDecimal(dr["min_yield"])
                                            },                                            
                                            Width = Convert.ToDecimal(dr["width"]),                                            
                                            MouldType = dr["mould_type"].ToString(),
                                            LogoPath = dr["logo_path"].ToString(),
                                            MinCutLength = Convert.ToDecimal(dr["min_cut_length"]),
                                            IsCustomReRoll = Convert.ToBoolean(dr["custom_re_roll"]),
                                            QRVideoPath = dr["qr_video_path"].ToString(),
                                            QRPDFPath = dr["qr_pdf_path"].ToString(),
                                            Active = Convert.ToBoolean(dr["active"])
                                        }
                                    });
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading Product Capacity: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return order;
        }

        public static ObservableCollection<RawProductionDetails> GetProductionSchedulerData()
        {
            ObservableCollection<RawProductionDetails> rawProductionDetails = new ObservableCollection<RawProductionDetails>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT Orders.order_id,Orders.sales_no,Orders.required_date,Orders.comments,Orders.required_date_selected,Orders.customer_id, " +
                                                "GradingScheduling.id AS GradingSchedulingID,GradingScheduling.active_order, " +
                                                "GradingScheduling.production_time_table_id,GradingScheduling.sales_id,GradingScheduling.raw_product_id,GradingScheduling.blocklog_qty,GradingScheduling.shift,GradingScheduling.order_type,GradingScheduling.print_counter, " +
                                                "RawProducts.RawProductCode, RawProducts.Description,RawProducts.RawProductType, " +
                                                "Freight.FreightDescription, " +
                                                "Customers.CompanyName, " +
                                                "ProductionTimeTable.date,ProductionTimeTable.machine_active,ProductionTimeTable.day_shift,ProductionTimeTable.evening_shift,ProductionTimeTable.night_shift, " +
                                                "Formulas.grading_weight1,Formulas.grading_weight2,Formulas.grading_weight3 " +
                                                "FROM dbo.Orders " +
                                                "INNER JOIN dbo.GradingScheduling ON Orders.order_id = GradingScheduling.sales_id " +
                                                "INNER JOIN dbo.RawProducts ON GradingScheduling.raw_product_id = RawProducts.RawProductID " +
                                                "INNER JOIN dbo.Freight ON Orders.freight_id = Freight.ID " +
                                                "INNER JOIN dbo.ProductionTimeTable ON GradingScheduling.production_time_table_id = ProductionTimeTable.id " +
                                                "INNER JOIN dbo.Formulas ON GradingScheduling.raw_product_id = Formulas.raw_product_id " +
                                                "INNER JOIN dbo.Customers ON Orders.customer_id = Customers.CustomerID WHERE GradingScheduling.status ='Grading' ORDER BY Orders.id", conn))
                    {

                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    RawProductionDetails rpd = new RawProductionDetails();

                                    rpd.RawProduct = new RawProduct()
                                    {
                                        RawProductID = Convert.ToInt16(dr["raw_product_id"]),
                                        SalesID = Convert.ToInt32(dr["order_id"]),
                                        RawProductCode = dr["RawProductCode"].ToString(),
                                        Description = dr["Description"].ToString(),
                                        RawProductType = dr["RawProductType"].ToString()
                                    };
                                    rpd.Customer = new Customer()
                                    {
                                        CompanyName = dr["CompanyName"].ToString(),
                                        CustomerId = Convert.ToInt16(dr["customer_id"])
                                    };
                                    rpd.GradingSchedulingID = Convert.ToInt32(dr["GradingSchedulingID"]);
                                    //rpd.CurrentCapacityID = dr["CurrentCapacityID"].ToString();
                                    rpd.ProdTimeTableID = Convert.ToInt32(dr["production_time_table_id"]);
                                    rpd.SalesOrderId = Convert.ToInt16(dr["order_id"]);
                                    rpd.RawProDetailsID = Convert.ToInt16(dr["order_id"]);
                                    rpd.BlockLogQty = Convert.ToDecimal(dr["blocklog_qty"]);
                                    rpd.ProductionDate = dr["date"].ToString();
                                    rpd.PDate = Convert.ToDateTime(dr["date"]);
                                    rpd.MachineActive = Convert.ToBoolean(dr["machine_active"]);
                                    rpd.DayActive = Convert.ToBoolean(dr["day_shift"]);
                                    rpd.EveningActive = Convert.ToBoolean(dr["evening_shift"]);
                                    rpd.NightActive = Convert.ToBoolean(dr["night_shift"]);
                                    rpd.Shift = Convert.ToInt16(dr["shift"]);
                                    rpd.OriginType = "Grading";
                                    rpd.OrderType = Convert.ToInt16(dr["order_type"]);
                                    rpd.SalesOrder = dr["sales_no"].ToString();
                                    rpd.OrderRequiredDate = Convert.ToDateTime(dr["required_date"]);
                                    //rpd.FreightArrDate = Convert.ToDateTime(dr["freight_arr_date"]);
                                    //rpd.FreightDateAvailable = Convert.ToBoolean(dr["freight_date_available"]);
                                    // rpd.FreightArrTime = dr["freight_arr_time"].ToString();
                                    // rpd.FreightTimeAvailable = Convert.ToBoolean(dr["freight_time_available"]);
                                    rpd.FreightDescription = dr["FreightDescription"].ToString();
                                    rpd.Notes = dr["comments"].ToString();
                                    rpd.ActiveOrder = Convert.ToBoolean(dr["active_order"]);
                                    rpd.PrintCounter = Convert.ToInt32(dr["print_counter"]);
                                    rpd.ReqDateSelected = Convert.ToBoolean(dr["required_date_selected"]);

                                    rawProductionDetails.Add(rpd);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading Product Capacity: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return rawProductionDetails;
        }

        public static List<ProductionTimeTable> GetProductionTimeTableDetails(Int32 id, DateTime currentDate)
        {
            string newDate = currentDate.ToString("yyyy-MM-dd");
            List<ProductionTimeTable> productionTimeTableList = new List<ProductionTimeTable>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT * FROM ProductionTimeTable " +
                                                                  "WHERE machine_id=@id AND date >= @currDate", conn))
                    {
                        cmdGetData.Parameters.AddWithValue("@id", id);
                        cmdGetData.Parameters.AddWithValue("@currDate", newDate);
                        cmdGetData.Parameters.AddWithValue("@machineActive", true);

                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    ProductionTimeTable pt = new ProductionTimeTable();
                                    pt.ID = Convert.ToInt32(dr["id"]);
                                    pt.MachineID = Convert.ToInt32(dr["machine_id"]);
                                    pt.ProductionDate = Convert.ToDateTime(dr["date"]);
                                    pt.IsMachineActive = Convert.ToBoolean(dr["machine_active"]);
                                    pt.IsDayShiftActive = Convert.ToBoolean(dr["day_shift"]);
                                    pt.IsEveningShiftActive = Convert.ToBoolean(dr["evening_shift"]);
                                    pt.IsNightShiftActive = Convert.ToBoolean(dr["night_shift"]);

                                    productionTimeTableList.Add(pt);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading Product Capacity: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return productionTimeTableList;
        }

        public static DateTime GetNextAvailableDate(DateTime currentDate)
        {

            DateTime pDate = new DateTime(1900, 01, 01);
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT date FROM ProductionTimeTable " +
                                                                  "WHERE date = @currDate AND machine_active = @machineActive", conn))
                    {
                        cmdGetData.Parameters.AddWithValue("@currDate", currentDate);
                        cmdGetData.Parameters.AddWithValue("@machineActive", true);

                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    pDate = Convert.ToDateTime(dr["date"]);

                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading Product Capacity: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return pDate;
        }

        public static decimal CheckCapacityByDateShift(int proTimeTableId, int proCapId, int shift, int orderType)
        {
            int orderType1 = 0;
            int orderType2 = 0;
            decimal capacityKG = 0;

            if (orderType == 1)
            {
                orderType1 = 1;
                orderType2 = 1;
            }
            else if (orderType == 3)
            {
                orderType1 = 1;
                orderType2 = 3;
            }

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT capacity_kg FROM CurrentCapacity " +
                                                                  "WHERE prod_timetable_id = @proTimeTableId AND  product_capacity_id=@proCapId AND shift = @shift AND (order_type = @Ordertype1 OR order_type = @Ordertype2)", conn))
                    {
                        cmdGetData.Parameters.AddWithValue("@proTimeTableId", proTimeTableId);
                        cmdGetData.Parameters.AddWithValue("@proCapId", proCapId);
                        cmdGetData.Parameters.AddWithValue("@shift", shift);
                        cmdGetData.Parameters.AddWithValue("@Ordertype1", orderType1);
                        cmdGetData.Parameters.AddWithValue("@Ordertype2", orderType2);

                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    capacityKG += Convert.ToDecimal(dr["capacity_kg"]);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading Product Capacity: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return capacityKG;
        }

        public static Int32 GetMaxSalesID()
        {
            int id = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {

                SqlCommand cmdGetId = new SqlCommand("SELECT TOP 1 * FROM SalesOrder ORDER BY id DESC", conn);
                conn.Open();
                try
                {
                    id = (Int32)cmdGetId.ExecuteScalar();
                }

                catch (Exception e)
                {
                    Debug.WriteLine("SQL Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }


            return id;
        }

        public static int AddToStatus(Tuple<Order, Order> splitOrder, Order order)
        {
            int res = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {


                SqlCommand cmdInsertGradingStatus = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM GradingStatus WHERE order_no=@OrderNo AND raw_product_id = @RawProductID) " +
                                                                   "INSERT INTO GradingStatus VALUES(@OrderNo,@RawProductID,@Pending,@Completed) " +
                                                                   "ELSE " +
                                                                   "UPDATE GradingStatus SET pending+=@Pending WHERE " +
                                                                   "order_no=@OrderNo AND raw_product_id = @RawProductID", conn);

                SqlCommand cmdInsertMixingStatus = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM MixingStatus WHERE order_no=@OrderNo AND raw_product_id = @RawProductID) " +
                                                                   "INSERT INTO MixingStatus VALUES(@OrderNo,@RawProductID,@Pending,@Completed) " +
                                                                   "ELSE " +
                                                                   "UPDATE MixingStatus SET pending+=@Pending WHERE " +
                                                                   "order_no=@OrderNo AND raw_product_id = @RawProductID", conn);

                SqlCommand cmdInsertSlittingStatus = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM SlittingStatus WHERE order_no=@OrderNo AND raw_product_id = @RawProductID AND product_id=@ProductID) " +
                                                                   "INSERT INTO SlittingStatus VALUES(@OrderNo,@RawProductID,@ProductID,@BlocksPending,@BlocksCompleted,@TileCompleted) " +
                                                                   "ELSE " +
                                                                   "UPDATE SlittingStatus SET blocks_pending+=@BlocksPending WHERE " +
                                                                   "order_no=@OrderNo AND raw_product_id = @RawProductID AND product_id=@ProductID", conn);

                SqlCommand cmdInsertPeelingStatus = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM PeelingStatus WHERE order_no=@OrderNo AND raw_product_id = @RawProductID AND product_id=@ProductID) " +
                                                                   "INSERT INTO PeelingStatus VALUES(@OrderNo,@RawProductID,@ProductID,@LogsPending,@LogsCompleted,@BulkRollsCompleted) " +
                                                                   "ELSE " +
                                                                   "UPDATE PeelingStatus SET logs_pending+=@LogsPending WHERE " +
                                                                   "order_no=@OrderNo AND raw_product_id = @RawProductID AND product_id=@ProductID", conn);

                SqlCommand cmdInsertReRollingStatus = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM ReRollingStatus WHERE order_no=@OrderNo AND product_id=@ProductID) " +
                                                                   "INSERT INTO ReRollingStatus VALUES(@OrderNo,@ProductID,@BulkRollsPending,@BulkRollsCompleted,@RollsCompleted) " +
                                                                   "ELSE " +
                                                                   "UPDATE ReRollingStatus SET bulk_rolls_pending+=@BulkRollsPending WHERE " +
                                                                   "order_no=@OrderNo AND product_id=@ProductID", conn);


                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {

                    if (order.OrderPriority == 1)//Product
                    {
                        if (splitOrder.Item1.OrderDetails.Count > 0)
                        {
                            foreach (var item in splitOrder.Item1.OrderDetails)//Grading/Mixing
                            {
                                cmdInsertGradingStatus.Transaction = trans;
                                cmdInsertGradingStatus.Parameters.AddWithValue("@OrderNo", order.OrderNo);
                                cmdInsertGradingStatus.Parameters.AddWithValue("@RawProductID", item.Product.RawProduct.RawProductID);
                                cmdInsertGradingStatus.Parameters.AddWithValue("@Pending", 0);
                                cmdInsertGradingStatus.Parameters.AddWithValue("@Completed", 0);
                                cmdInsertGradingStatus.ExecuteNonQuery();
                                cmdInsertGradingStatus.Parameters.Clear();

                                cmdInsertMixingStatus.Transaction = trans;
                                cmdInsertMixingStatus.Parameters.AddWithValue("@OrderNo", order.OrderNo);
                                cmdInsertMixingStatus.Parameters.AddWithValue("@RawProductID", item.Product.RawProduct.RawProductID);
                                cmdInsertMixingStatus.Parameters.AddWithValue("@Pending", 0);
                                cmdInsertMixingStatus.Parameters.AddWithValue("@Completed", 0);
                                cmdInsertMixingStatus.ExecuteNonQuery();
                                cmdInsertMixingStatus.Parameters.Clear();

                                //Slitting
                                if (item.Product.Type == "Tile")
                                {
                                    cmdInsertSlittingStatus.Transaction = trans;
                                    cmdInsertSlittingStatus.Parameters.AddWithValue("@OrderNo", order.OrderNo);
                                    cmdInsertSlittingStatus.Parameters.AddWithValue("@RawProductID", item.Product.RawProduct.RawProductID);
                                    cmdInsertSlittingStatus.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                                    cmdInsertSlittingStatus.Parameters.AddWithValue("@BlocksPending", 0);
                                    cmdInsertSlittingStatus.Parameters.AddWithValue("@BlocksCompleted", 0);
                                    cmdInsertSlittingStatus.Parameters.AddWithValue("@TileCompleted", 0);
                                    cmdInsertSlittingStatus.ExecuteNonQuery();
                                    cmdInsertSlittingStatus.Parameters.Clear();

                                    //cmdInsertPeelingStatus.Transaction = trans;
                                    //cmdInsertPeelingStatus.Parameters.AddWithValue("@OrderNo", order.OrderNo);
                                    //cmdInsertPeelingStatus.Parameters.AddWithValue("@RawProductID", item.Product.RawProduct.RawProductID);
                                    //cmdInsertPeelingStatus.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                                    //cmdInsertPeelingStatus.Parameters.AddWithValue("@LogsPending", "X");
                                    //cmdInsertPeelingStatus.Parameters.AddWithValue("@LogsCompleted", "X");
                                    //cmdInsertPeelingStatus.Parameters.AddWithValue("@BulkRollsCompleted", "X");
                                    //cmdInsertPeelingStatus.ExecuteNonQuery();
                                    //cmdInsertPeelingStatus.Parameters.Clear();

                                    //cmdInsertReRollingStatus.Transaction = trans;
                                    //cmdInsertReRollingStatus.Parameters.AddWithValue("@OrderNo", order.OrderNo);
                                    //cmdInsertReRollingStatus.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                                    //cmdInsertReRollingStatus.Parameters.AddWithValue("@BulkRollsPending", "X");
                                    //cmdInsertReRollingStatus.Parameters.AddWithValue("@BulkRollsCompleted", "X");
                                    //cmdInsertReRollingStatus.Parameters.AddWithValue("@RollsCompleted", "X");
                                    //cmdInsertReRollingStatus.ExecuteNonQuery();
                                    //cmdInsertReRollingStatus.Parameters.Clear();
                                }
                                else
                                {
                                    cmdInsertSlittingStatus.Transaction = trans;
                                    cmdInsertSlittingStatus.Parameters.AddWithValue("@OrderNo", order.OrderNo);
                                    cmdInsertSlittingStatus.Parameters.AddWithValue("@RawProductID", item.Product.RawProduct.RawProductID);
                                    cmdInsertSlittingStatus.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                                    cmdInsertSlittingStatus.Parameters.AddWithValue("@BlocksPending", "X");
                                    cmdInsertSlittingStatus.Parameters.AddWithValue("@BlocksCompleted", "X");
                                    cmdInsertSlittingStatus.Parameters.AddWithValue("@TileCompleted", "X");
                                    cmdInsertSlittingStatus.ExecuteNonQuery();
                                    cmdInsertSlittingStatus.Parameters.Clear();
                                }

                                //Peeling
                                if (item.Product.Type == "Bulk" || item.Product.Type == "Roll" || item.Product.Type == "Standard")
                                {
                                    cmdInsertPeelingStatus.Transaction = trans;
                                    cmdInsertPeelingStatus.Parameters.AddWithValue("@OrderNo", order.OrderNo);
                                    cmdInsertPeelingStatus.Parameters.AddWithValue("@RawProductID", item.Product.RawProduct.RawProductID);
                                    cmdInsertPeelingStatus.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                                    cmdInsertPeelingStatus.Parameters.AddWithValue("@LogsPending", 0);
                                    cmdInsertPeelingStatus.Parameters.AddWithValue("@LogsCompleted", 0);
                                    cmdInsertPeelingStatus.Parameters.AddWithValue("@BulkRollsCompleted", 0);
                                    cmdInsertPeelingStatus.ExecuteNonQuery();
                                    cmdInsertPeelingStatus.Parameters.Clear();

                                    //cmdInsertSlittingStatus.Transaction = trans;
                                    //cmdInsertSlittingStatus.Parameters.AddWithValue("@OrderNo", order.OrderNo);
                                    //cmdInsertSlittingStatus.Parameters.AddWithValue("@RawProductID", item.Product.RawProduct.RawProductID);
                                    //cmdInsertSlittingStatus.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                                    //cmdInsertSlittingStatus.Parameters.AddWithValue("@BlocksPending", "X");
                                    //cmdInsertSlittingStatus.Parameters.AddWithValue("@BlocksCompleted", "X");
                                    //cmdInsertSlittingStatus.Parameters.AddWithValue("@TileCompleted", "X");
                                    //cmdInsertSlittingStatus.ExecuteNonQuery();
                                    //cmdInsertSlittingStatus.Parameters.Clear();

                                    //Re Rolling
                                    if (order.OrderPriority == 1 && (item.Product.Type == "Roll" || item.Product.Type == "Standard"))
                                    {
                                        cmdInsertReRollingStatus.Transaction = trans;
                                        cmdInsertReRollingStatus.Parameters.AddWithValue("@OrderNo", order.OrderNo);
                                        cmdInsertReRollingStatus.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                                        cmdInsertReRollingStatus.Parameters.AddWithValue("@BulkRollsPending", 0);
                                        cmdInsertReRollingStatus.Parameters.AddWithValue("@BulkRollsCompleted", 0);
                                        cmdInsertReRollingStatus.Parameters.AddWithValue("@RollsCompleted", 0);
                                        cmdInsertReRollingStatus.ExecuteNonQuery();
                                        cmdInsertReRollingStatus.Parameters.Clear();
                                    }
                                    else
                                    {
                                        cmdInsertReRollingStatus.Transaction = trans;
                                        cmdInsertReRollingStatus.Parameters.AddWithValue("@OrderNo", order.OrderNo);
                                        cmdInsertReRollingStatus.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                                        cmdInsertReRollingStatus.Parameters.AddWithValue("@BulkRollsPending", "X");
                                        cmdInsertReRollingStatus.Parameters.AddWithValue("@BulkRollsCompleted", "X");
                                        cmdInsertReRollingStatus.Parameters.AddWithValue("@RollsCompleted", "X");
                                        cmdInsertReRollingStatus.ExecuteNonQuery();
                                        cmdInsertReRollingStatus.Parameters.Clear();
                                    }
                                }
                                else
                                {
                                    cmdInsertPeelingStatus.Transaction = trans;
                                    cmdInsertPeelingStatus.Parameters.AddWithValue("@OrderNo", order.OrderNo);
                                    cmdInsertPeelingStatus.Parameters.AddWithValue("@RawProductID", item.Product.RawProduct.RawProductID);
                                    cmdInsertPeelingStatus.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                                    cmdInsertPeelingStatus.Parameters.AddWithValue("@LogsPending", "X");
                                    cmdInsertPeelingStatus.Parameters.AddWithValue("@LogsCompleted", "X");
                                    cmdInsertPeelingStatus.Parameters.AddWithValue("@BulkRollsCompleted", "X");
                                    cmdInsertPeelingStatus.ExecuteNonQuery();
                                    cmdInsertPeelingStatus.Parameters.Clear();

                                    cmdInsertReRollingStatus.Transaction = trans;
                                    cmdInsertReRollingStatus.Parameters.AddWithValue("@OrderNo", order.OrderNo);
                                    cmdInsertReRollingStatus.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                                    cmdInsertReRollingStatus.Parameters.AddWithValue("@BulkRollsPending", "X");
                                    cmdInsertReRollingStatus.Parameters.AddWithValue("@BulkRollsCompleted", "X");
                                    cmdInsertReRollingStatus.Parameters.AddWithValue("@RollsCompleted", "X");
                                    cmdInsertReRollingStatus.ExecuteNonQuery();
                                    cmdInsertReRollingStatus.Parameters.Clear();
                                }
                            }
                        }


                        foreach (var item in splitOrder.Item2.OrderDetails)
                        {
                            if (splitOrder.Item1.OrderDetails.Count == 0)
                            {
                                cmdInsertGradingStatus.Transaction = trans;
                                cmdInsertGradingStatus.Parameters.AddWithValue("@OrderNo", order.OrderNo);
                                cmdInsertGradingStatus.Parameters.AddWithValue("@RawProductID", item.Product.RawProduct.RawProductID);
                                cmdInsertGradingStatus.Parameters.AddWithValue("@Pending", "X");
                                cmdInsertGradingStatus.Parameters.AddWithValue("@Completed", "X");
                                cmdInsertGradingStatus.ExecuteNonQuery();
                                cmdInsertGradingStatus.Parameters.Clear();

                                cmdInsertMixingStatus.Transaction = trans;
                                cmdInsertMixingStatus.Parameters.AddWithValue("@OrderNo", order.OrderNo);
                                cmdInsertMixingStatus.Parameters.AddWithValue("@RawProductID", item.Product.RawProduct.RawProductID);
                                cmdInsertMixingStatus.Parameters.AddWithValue("@Pending", "X");
                                cmdInsertMixingStatus.Parameters.AddWithValue("@Completed", "X");
                                cmdInsertMixingStatus.ExecuteNonQuery();
                                cmdInsertMixingStatus.Parameters.Clear();
                            }

                            //Slitting
                            if (item.Product.Type == "Tile")
                            {
                                cmdInsertSlittingStatus.Transaction = trans;
                                cmdInsertSlittingStatus.Parameters.AddWithValue("@OrderNo", order.OrderNo);
                                cmdInsertSlittingStatus.Parameters.AddWithValue("@RawProductID", item.Product.RawProduct.RawProductID);
                                cmdInsertSlittingStatus.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                                cmdInsertSlittingStatus.Parameters.AddWithValue("@BlocksPending", 0);
                                cmdInsertSlittingStatus.Parameters.AddWithValue("@BlocksCompleted", 0);
                                cmdInsertSlittingStatus.Parameters.AddWithValue("@TileCompleted", 0);
                                cmdInsertSlittingStatus.ExecuteNonQuery();
                                cmdInsertSlittingStatus.Parameters.Clear();

                            }
                            else
                            {
                                cmdInsertSlittingStatus.Transaction = trans;
                                cmdInsertSlittingStatus.Parameters.AddWithValue("@OrderNo", order.OrderNo);
                                cmdInsertSlittingStatus.Parameters.AddWithValue("@RawProductID", item.Product.RawProduct.RawProductID);
                                cmdInsertSlittingStatus.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                                cmdInsertSlittingStatus.Parameters.AddWithValue("@BlocksPending", "X");
                                cmdInsertSlittingStatus.Parameters.AddWithValue("@BlocksCompleted", "X");
                                cmdInsertSlittingStatus.Parameters.AddWithValue("@TileCompleted", "X");
                                cmdInsertSlittingStatus.ExecuteNonQuery();
                                cmdInsertSlittingStatus.Parameters.Clear();
                            }

                            //Peeling
                            if (item.Product.Type == "Bulk" || item.Product.Type == "Roll" || item.Product.Type == "Standard")
                            {
                                cmdInsertPeelingStatus.Transaction = trans;
                                cmdInsertPeelingStatus.Parameters.AddWithValue("@OrderNo", order.OrderNo);
                                cmdInsertPeelingStatus.Parameters.AddWithValue("@RawProductID", item.Product.RawProduct.RawProductID);
                                cmdInsertPeelingStatus.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                                cmdInsertPeelingStatus.Parameters.AddWithValue("@LogsPending", 0);
                                cmdInsertPeelingStatus.Parameters.AddWithValue("@LogsCompleted", 0);
                                cmdInsertPeelingStatus.Parameters.AddWithValue("@BulkRollsCompleted", 0);
                                cmdInsertPeelingStatus.ExecuteNonQuery();
                                cmdInsertPeelingStatus.Parameters.Clear();

                                //Re Rolling
                                if (order.OrderPriority == 1 && (item.Product.Type == "Roll" || item.Product.Type == "Standard"))
                                {
                                    cmdInsertReRollingStatus.Transaction = trans;
                                    cmdInsertReRollingStatus.Parameters.AddWithValue("@OrderNo", order.OrderNo);
                                    cmdInsertReRollingStatus.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                                    cmdInsertReRollingStatus.Parameters.AddWithValue("@BulkRollsPending", 0);
                                    cmdInsertReRollingStatus.Parameters.AddWithValue("@BulkRollsCompleted", 0);
                                    cmdInsertReRollingStatus.Parameters.AddWithValue("@RollsCompleted", 0);
                                    cmdInsertReRollingStatus.ExecuteNonQuery();
                                    cmdInsertReRollingStatus.Parameters.Clear();
                                }
                                else
                                {
                                    cmdInsertReRollingStatus.Transaction = trans;
                                    cmdInsertReRollingStatus.Parameters.AddWithValue("@OrderNo", order.OrderNo);
                                    cmdInsertReRollingStatus.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                                    cmdInsertReRollingStatus.Parameters.AddWithValue("@BulkRollsPending", "X");
                                    cmdInsertReRollingStatus.Parameters.AddWithValue("@BulkRollsCompleted", "X");
                                    cmdInsertReRollingStatus.Parameters.AddWithValue("@RollsCompleted", "X");
                                    cmdInsertReRollingStatus.ExecuteNonQuery();
                                    cmdInsertReRollingStatus.Parameters.Clear();
                                }
                            }
                            else
                            {
                                cmdInsertPeelingStatus.Transaction = trans;
                                cmdInsertPeelingStatus.Parameters.AddWithValue("@OrderNo", order.OrderNo);
                                cmdInsertPeelingStatus.Parameters.AddWithValue("@RawProductID", item.Product.RawProduct.RawProductID);
                                cmdInsertPeelingStatus.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                                cmdInsertPeelingStatus.Parameters.AddWithValue("@LogsPending", "X");
                                cmdInsertPeelingStatus.Parameters.AddWithValue("@LogsCompleted", "X");
                                cmdInsertPeelingStatus.Parameters.AddWithValue("@BulkRollsCompleted", "X");
                                cmdInsertPeelingStatus.ExecuteNonQuery();
                                cmdInsertPeelingStatus.Parameters.Clear();

                                cmdInsertReRollingStatus.Transaction = trans;
                                cmdInsertReRollingStatus.Parameters.AddWithValue("@OrderNo", order.OrderNo);
                                cmdInsertReRollingStatus.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                                cmdInsertReRollingStatus.Parameters.AddWithValue("@BulkRollsPending", "X");
                                cmdInsertReRollingStatus.Parameters.AddWithValue("@BulkRollsCompleted", "X");
                                cmdInsertReRollingStatus.Parameters.AddWithValue("@RollsCompleted", "X");
                                cmdInsertReRollingStatus.ExecuteNonQuery();
                                cmdInsertReRollingStatus.Parameters.Clear();
                            }
                        }
                    }
                    else if (order.OrderPriority == 2)//RawProduct
                    {
                        foreach (var item in splitOrder.Item1.OrderDetails)
                        {
                            cmdInsertGradingStatus.Transaction = trans;
                            cmdInsertGradingStatus.Parameters.AddWithValue("@OrderNo", order.OrderNo);
                            cmdInsertGradingStatus.Parameters.AddWithValue("@RawProductID", item.Product.RawProduct.RawProductID);
                            cmdInsertGradingStatus.Parameters.AddWithValue("@Pending", 0);
                            cmdInsertGradingStatus.Parameters.AddWithValue("@Completed", 0);
                            cmdInsertGradingStatus.ExecuteNonQuery();
                            cmdInsertGradingStatus.Parameters.Clear();

                            cmdInsertMixingStatus.Transaction = trans;
                            cmdInsertMixingStatus.Parameters.AddWithValue("@OrderNo", order.OrderNo);
                            cmdInsertMixingStatus.Parameters.AddWithValue("@RawProductID", item.Product.RawProduct.RawProductID);
                            cmdInsertMixingStatus.Parameters.AddWithValue("@Pending", 0);
                            cmdInsertMixingStatus.Parameters.AddWithValue("@Completed", 0);
                            cmdInsertMixingStatus.ExecuteNonQuery();
                            cmdInsertMixingStatus.Parameters.Clear();

                            cmdInsertSlittingStatus.Transaction = trans;
                            cmdInsertSlittingStatus.Parameters.AddWithValue("@OrderNo", order.OrderNo);
                            cmdInsertSlittingStatus.Parameters.AddWithValue("@RawProductID", item.Product.RawProduct.RawProductID);
                            cmdInsertSlittingStatus.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                            cmdInsertSlittingStatus.Parameters.AddWithValue("@BlocksPending", "X");
                            cmdInsertSlittingStatus.Parameters.AddWithValue("@BlocksCompleted", "X");
                            cmdInsertSlittingStatus.Parameters.AddWithValue("@TileCompleted", "X");
                            cmdInsertSlittingStatus.ExecuteNonQuery();
                            cmdInsertSlittingStatus.Parameters.Clear();

                            cmdInsertPeelingStatus.Transaction = trans;
                            cmdInsertPeelingStatus.Parameters.AddWithValue("@OrderNo", order.OrderNo);
                            cmdInsertPeelingStatus.Parameters.AddWithValue("@RawProductID", item.Product.RawProduct.RawProductID);
                            cmdInsertPeelingStatus.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                            cmdInsertPeelingStatus.Parameters.AddWithValue("@LogsPending", "X");
                            cmdInsertPeelingStatus.Parameters.AddWithValue("@LogsCompleted", "X");
                            cmdInsertPeelingStatus.Parameters.AddWithValue("@BulkRollsCompleted", "X");
                            cmdInsertPeelingStatus.ExecuteNonQuery();
                            cmdInsertPeelingStatus.Parameters.Clear();

                            cmdInsertReRollingStatus.Transaction = trans;
                            cmdInsertReRollingStatus.Parameters.AddWithValue("@OrderNo", order.OrderNo);
                            cmdInsertReRollingStatus.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                            cmdInsertReRollingStatus.Parameters.AddWithValue("@BulkRollsPending", "X");
                            cmdInsertReRollingStatus.Parameters.AddWithValue("@BulkRollsCompleted", "X");
                            cmdInsertReRollingStatus.Parameters.AddWithValue("@RollsCompleted", "X");
                            cmdInsertReRollingStatus.ExecuteNonQuery();
                            cmdInsertReRollingStatus.Parameters.Clear();
                        }
                    }


                    //if(splitOrder.Item1.OrderDetails.Count > 0)
                    //{
                    //    foreach (var item in splitOrder.Item1.OrderDetails)
                    //    {
                    //        cmdInsertGradingStatus.Transaction = trans;
                    //        cmdInsertGradingStatus.Parameters.AddWithValue("@OrderNo", order.OrderNo);
                    //        cmdInsertGradingStatus.Parameters.AddWithValue("@RawProductID", item.Product.RawProduct.RawProductID);
                    //        cmdInsertGradingStatus.Parameters.AddWithValue("@Pending", 0);
                    //        cmdInsertGradingStatus.Parameters.AddWithValue("@Completed", 0);
                    //        cmdInsertGradingStatus.ExecuteNonQuery();
                    //        cmdInsertGradingStatus.Parameters.Clear();

                    //        cmdInsertMixingStatus.Transaction = trans;
                    //        cmdInsertMixingStatus.Parameters.AddWithValue("@OrderNo", order.OrderNo);
                    //        cmdInsertMixingStatus.Parameters.AddWithValue("@RawProductID", item.Product.RawProduct.RawProductID);
                    //        cmdInsertMixingStatus.Parameters.AddWithValue("@Pending", 0);
                    //        cmdInsertMixingStatus.Parameters.AddWithValue("@Completed", 0);
                    //        cmdInsertMixingStatus.ExecuteNonQuery();
                    //        cmdInsertMixingStatus.Parameters.Clear();

                    //        //Slitting/Peeling/ReRolling
                    //        if(order.OrderPriority == 1)
                    //        {
                    //            //Slitting
                    //            if (item.Product.Type == "Tile")
                    //            {
                    //                cmdInsertSlittingStatus.Transaction = trans;
                    //                cmdInsertSlittingStatus.Parameters.AddWithValue("@OrderNo", order.OrderNo);
                    //                cmdInsertSlittingStatus.Parameters.AddWithValue("@RawProductID", item.Product.RawProduct.RawProductID);
                    //                cmdInsertSlittingStatus.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                    //                cmdInsertSlittingStatus.Parameters.AddWithValue("@BlocksPending", 0);
                    //                cmdInsertSlittingStatus.Parameters.AddWithValue("@BlocksCompleted", 0);
                    //                cmdInsertSlittingStatus.Parameters.AddWithValue("@TileCompleted", 0);
                    //                cmdInsertSlittingStatus.ExecuteNonQuery();
                    //                cmdInsertSlittingStatus.Parameters.Clear();

                    //                cmdInsertPeelingStatus.Transaction = trans;
                    //                cmdInsertPeelingStatus.Parameters.AddWithValue("@OrderNo", order.OrderNo);
                    //                cmdInsertPeelingStatus.Parameters.AddWithValue("@RawProductID", item.Product.RawProduct.RawProductID);
                    //                cmdInsertPeelingStatus.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                    //                cmdInsertPeelingStatus.Parameters.AddWithValue("@LogsPending", "X");
                    //                cmdInsertPeelingStatus.Parameters.AddWithValue("@LogsCompleted", "X");
                    //                cmdInsertPeelingStatus.Parameters.AddWithValue("@BulkRollsCompleted", "X");
                    //                cmdInsertPeelingStatus.ExecuteNonQuery();
                    //                cmdInsertPeelingStatus.Parameters.Clear();

                    //                cmdInsertReRollingStatus.Transaction = trans;
                    //                cmdInsertReRollingStatus.Parameters.AddWithValue("@OrderNo", order.OrderNo);
                    //                cmdInsertReRollingStatus.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                    //                cmdInsertReRollingStatus.Parameters.AddWithValue("@BulkRollsPending", "X");
                    //                cmdInsertReRollingStatus.Parameters.AddWithValue("@BulkRollsCompleted", "X");
                    //                cmdInsertReRollingStatus.Parameters.AddWithValue("@RollsCompleted", "X");
                    //                cmdInsertReRollingStatus.ExecuteNonQuery();
                    //                cmdInsertReRollingStatus.Parameters.Clear();
                    //            }
                    //            else
                    //            {
                    //                cmdInsertSlittingStatus.Transaction = trans;
                    //                cmdInsertSlittingStatus.Parameters.AddWithValue("@OrderNo", order.OrderNo);
                    //                cmdInsertSlittingStatus.Parameters.AddWithValue("@RawProductID", item.Product.RawProduct.RawProductID);
                    //                cmdInsertSlittingStatus.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                    //                cmdInsertSlittingStatus.Parameters.AddWithValue("@BlocksPending", "X");
                    //                cmdInsertSlittingStatus.Parameters.AddWithValue("@BlocksCompleted", "X");
                    //                cmdInsertSlittingStatus.Parameters.AddWithValue("@TileCompleted", "X");
                    //                cmdInsertSlittingStatus.ExecuteNonQuery();
                    //                cmdInsertSlittingStatus.Parameters.Clear();
                    //            }

                    //            //Peeling
                    //            if (item.Product.Type == "Bulk" || item.Product.Type == "Roll" || item.Product.Type == "Standard")
                    //            {
                    //                cmdInsertPeelingStatus.Transaction = trans;
                    //                cmdInsertPeelingStatus.Parameters.AddWithValue("@OrderNo", order.OrderNo);
                    //                cmdInsertPeelingStatus.Parameters.AddWithValue("@RawProductID", item.Product.RawProduct.RawProductID);
                    //                cmdInsertPeelingStatus.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                    //                cmdInsertPeelingStatus.Parameters.AddWithValue("@LogsPending", 0);
                    //                cmdInsertPeelingStatus.Parameters.AddWithValue("@LogsCompleted", 0);
                    //                cmdInsertPeelingStatus.Parameters.AddWithValue("@BulkRollsCompleted", 0);
                    //                cmdInsertPeelingStatus.ExecuteNonQuery();
                    //                cmdInsertPeelingStatus.Parameters.Clear();

                    //                cmdInsertSlittingStatus.Transaction = trans;
                    //                cmdInsertSlittingStatus.Parameters.AddWithValue("@OrderNo", order.OrderNo);
                    //                cmdInsertSlittingStatus.Parameters.AddWithValue("@RawProductID", item.Product.RawProduct.RawProductID);
                    //                cmdInsertSlittingStatus.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                    //                cmdInsertSlittingStatus.Parameters.AddWithValue("@BlocksPending", "X");
                    //                cmdInsertSlittingStatus.Parameters.AddWithValue("@BlocksCompleted", "X");
                    //                cmdInsertSlittingStatus.Parameters.AddWithValue("@TileCompleted", "X");
                    //                cmdInsertSlittingStatus.ExecuteNonQuery();
                    //                cmdInsertSlittingStatus.Parameters.Clear();

                    //                //Re Rolling
                    //                if (order.OrderPriority == 1 && (item.Product.Type == "Roll" || item.Product.Type == "Standard"))
                    //                {
                    //                    cmdInsertReRollingStatus.Transaction = trans;
                    //                    cmdInsertReRollingStatus.Parameters.AddWithValue("@OrderNo", order.OrderNo);
                    //                    cmdInsertReRollingStatus.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                    //                    cmdInsertReRollingStatus.Parameters.AddWithValue("@BulkRollsPending", 0);
                    //                    cmdInsertReRollingStatus.Parameters.AddWithValue("@BulkRollsCompleted", 0);
                    //                    cmdInsertReRollingStatus.Parameters.AddWithValue("@RollsCompleted", 0);
                    //                    cmdInsertReRollingStatus.ExecuteNonQuery();
                    //                    cmdInsertReRollingStatus.Parameters.Clear();
                    //                }
                    //                else
                    //                {
                    //                    cmdInsertReRollingStatus.Transaction = trans;
                    //                    cmdInsertReRollingStatus.Parameters.AddWithValue("@OrderNo", order.OrderNo);
                    //                    cmdInsertReRollingStatus.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                    //                    cmdInsertReRollingStatus.Parameters.AddWithValue("@BulkRollsPending", "X");
                    //                    cmdInsertReRollingStatus.Parameters.AddWithValue("@BulkRollsCompleted", "X");
                    //                    cmdInsertReRollingStatus.Parameters.AddWithValue("@RollsCompleted", "X");
                    //                    cmdInsertReRollingStatus.ExecuteNonQuery();
                    //                    cmdInsertReRollingStatus.Parameters.Clear();
                    //                }
                    //            }
                    //        }
                    //        else if (order.OrderPriority == 2)
                    //        {
                    //            cmdInsertSlittingStatus.Transaction = trans;
                    //            cmdInsertSlittingStatus.Parameters.AddWithValue("@OrderNo", order.OrderNo);
                    //            cmdInsertSlittingStatus.Parameters.AddWithValue("@RawProductID", item.Product.RawProduct.RawProductID);
                    //            cmdInsertSlittingStatus.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                    //            cmdInsertSlittingStatus.Parameters.AddWithValue("@BlocksPending", "X");
                    //            cmdInsertSlittingStatus.Parameters.AddWithValue("@BlocksCompleted", "X");
                    //            cmdInsertSlittingStatus.Parameters.AddWithValue("@TileCompleted", "X");
                    //            cmdInsertSlittingStatus.ExecuteNonQuery();
                    //            cmdInsertSlittingStatus.Parameters.Clear();

                    //            cmdInsertPeelingStatus.Transaction = trans;
                    //            cmdInsertPeelingStatus.Parameters.AddWithValue("@OrderNo", order.OrderNo);
                    //            cmdInsertPeelingStatus.Parameters.AddWithValue("@RawProductID", item.Product.RawProduct.RawProductID);
                    //            cmdInsertPeelingStatus.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                    //            cmdInsertPeelingStatus.Parameters.AddWithValue("@LogsPending", "X");
                    //            cmdInsertPeelingStatus.Parameters.AddWithValue("@LogsCompleted", "X");
                    //            cmdInsertPeelingStatus.Parameters.AddWithValue("@BulkRollsCompleted", "X");
                    //            cmdInsertPeelingStatus.ExecuteNonQuery();
                    //            cmdInsertPeelingStatus.Parameters.Clear();

                    //            cmdInsertReRollingStatus.Transaction = trans;
                    //            cmdInsertReRollingStatus.Parameters.AddWithValue("@OrderNo", order.OrderNo);
                    //            cmdInsertReRollingStatus.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                    //            cmdInsertReRollingStatus.Parameters.AddWithValue("@BulkRollsPending", "X");
                    //            cmdInsertReRollingStatus.Parameters.AddWithValue("@BulkRollsCompleted", "X");
                    //            cmdInsertReRollingStatus.Parameters.AddWithValue("@RollsCompleted", "X");
                    //            cmdInsertReRollingStatus.ExecuteNonQuery();
                    //            cmdInsertReRollingStatus.Parameters.Clear();
                    //        }
                    //    }                         
                    //}

                    ////Slitting/Peeling/Re-Rolling
                    //if (splitOrder.Item2.OrderDetails.Count > 0)
                    //{

                    //    foreach (var item in splitOrder.Item2.OrderDetails)
                    //    {
                    //        if (splitOrder.Item1.OrderDetails.Count == 0)
                    //        {
                    //            cmdInsertGradingStatus.Transaction = trans;
                    //            cmdInsertGradingStatus.Parameters.AddWithValue("@OrderNo", order.OrderNo);
                    //            cmdInsertGradingStatus.Parameters.AddWithValue("@RawProductID", item.Product.RawProduct.RawProductID);
                    //            cmdInsertGradingStatus.Parameters.AddWithValue("@Pending", "X");
                    //            cmdInsertGradingStatus.Parameters.AddWithValue("@Completed", "X");
                    //            cmdInsertGradingStatus.ExecuteNonQuery();
                    //            cmdInsertGradingStatus.Parameters.Clear();

                    //            cmdInsertMixingStatus.Transaction = trans;
                    //            cmdInsertMixingStatus.Parameters.AddWithValue("@OrderNo", order.OrderNo);
                    //            cmdInsertMixingStatus.Parameters.AddWithValue("@RawProductID", item.Product.RawProduct.RawProductID);
                    //            cmdInsertMixingStatus.Parameters.AddWithValue("@Pending", "X");
                    //            cmdInsertMixingStatus.Parameters.AddWithValue("@Completed", "X");
                    //            cmdInsertMixingStatus.ExecuteNonQuery();
                    //            cmdInsertMixingStatus.Parameters.Clear();
                    //        }
                    //        //Slitting
                    //        if (item.Product.Type == "Tile")
                    //        {
                    //            cmdInsertSlittingStatus.Transaction = trans;
                    //            cmdInsertSlittingStatus.Parameters.AddWithValue("@OrderNo", order.OrderNo);
                    //            cmdInsertSlittingStatus.Parameters.AddWithValue("@RawProductID", item.Product.RawProduct.RawProductID);
                    //            cmdInsertSlittingStatus.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                    //            cmdInsertSlittingStatus.Parameters.AddWithValue("@BlocksPending", 0);
                    //            cmdInsertSlittingStatus.Parameters.AddWithValue("@BlocksCompleted", 0);
                    //            cmdInsertSlittingStatus.Parameters.AddWithValue("@TileCompleted", 0);
                    //            cmdInsertSlittingStatus.ExecuteNonQuery();
                    //            cmdInsertSlittingStatus.Parameters.Clear();

                    //            cmdInsertPeelingStatus.Transaction = trans;
                    //            cmdInsertPeelingStatus.Parameters.AddWithValue("@OrderNo", order.OrderNo);
                    //            cmdInsertPeelingStatus.Parameters.AddWithValue("@RawProductID", item.Product.RawProduct.RawProductID);
                    //            cmdInsertPeelingStatus.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                    //            cmdInsertPeelingStatus.Parameters.AddWithValue("@LogsPending", "X");
                    //            cmdInsertPeelingStatus.Parameters.AddWithValue("@LogsCompleted", "X");
                    //            cmdInsertPeelingStatus.Parameters.AddWithValue("@BulkRollsCompleted", "X");
                    //            cmdInsertPeelingStatus.ExecuteNonQuery();
                    //            cmdInsertPeelingStatus.Parameters.Clear();

                    //            cmdInsertReRollingStatus.Transaction = trans;
                    //            cmdInsertReRollingStatus.Parameters.AddWithValue("@OrderNo", order.OrderNo);
                    //            cmdInsertReRollingStatus.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                    //            cmdInsertReRollingStatus.Parameters.AddWithValue("@BulkRollsPending", "X");
                    //            cmdInsertReRollingStatus.Parameters.AddWithValue("@BulkRollsCompleted", "X");
                    //            cmdInsertReRollingStatus.Parameters.AddWithValue("@RollsCompleted", "X");
                    //            cmdInsertReRollingStatus.ExecuteNonQuery();
                    //            cmdInsertReRollingStatus.Parameters.Clear();
                    //        }
                    //        else
                    //        {
                    //            cmdInsertSlittingStatus.Transaction = trans;
                    //            cmdInsertSlittingStatus.Parameters.AddWithValue("@OrderNo", order.OrderNo);
                    //            cmdInsertSlittingStatus.Parameters.AddWithValue("@RawProductID", item.Product.RawProduct.RawProductID);
                    //            cmdInsertSlittingStatus.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                    //            cmdInsertSlittingStatus.Parameters.AddWithValue("@BlocksPending", "X");
                    //            cmdInsertSlittingStatus.Parameters.AddWithValue("@BlocksCompleted", "X");
                    //            cmdInsertSlittingStatus.Parameters.AddWithValue("@TileCompleted", "X");
                    //            cmdInsertSlittingStatus.ExecuteNonQuery();
                    //            cmdInsertSlittingStatus.Parameters.Clear();
                    //        }

                    //        //Peeling
                    //        if (item.Product.Type == "Bulk" || item.Product.Type == "Roll" || item.Product.Type == "Standard")
                    //        {
                    //            cmdInsertPeelingStatus.Transaction = trans;
                    //            cmdInsertPeelingStatus.Parameters.AddWithValue("@OrderNo", order.OrderNo);
                    //            cmdInsertPeelingStatus.Parameters.AddWithValue("@RawProductID", item.Product.RawProduct.RawProductID);
                    //            cmdInsertPeelingStatus.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                    //            cmdInsertPeelingStatus.Parameters.AddWithValue("@LogsPending", 0);
                    //            cmdInsertPeelingStatus.Parameters.AddWithValue("@LogsCompleted", 0);
                    //            cmdInsertPeelingStatus.Parameters.AddWithValue("@BulkRollsCompleted", 0);
                    //            cmdInsertPeelingStatus.ExecuteNonQuery();
                    //            cmdInsertPeelingStatus.Parameters.Clear();

                    //            cmdInsertSlittingStatus.Transaction = trans;
                    //            cmdInsertSlittingStatus.Parameters.AddWithValue("@OrderNo", order.OrderNo);
                    //            cmdInsertSlittingStatus.Parameters.AddWithValue("@RawProductID", item.Product.RawProduct.RawProductID);
                    //            cmdInsertSlittingStatus.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                    //            cmdInsertSlittingStatus.Parameters.AddWithValue("@BlocksPending", "X");
                    //            cmdInsertSlittingStatus.Parameters.AddWithValue("@BlocksCompleted", "X");
                    //            cmdInsertSlittingStatus.Parameters.AddWithValue("@TileCompleted", "X");
                    //            cmdInsertSlittingStatus.ExecuteNonQuery();
                    //            cmdInsertSlittingStatus.Parameters.Clear();

                    //            //Re Rolling
                    //            if (order.OrderPriority == 1 && (item.Product.Type == "Roll" || item.Product.Type == "Standard"))
                    //            {
                    //                cmdInsertReRollingStatus.Transaction = trans;
                    //                cmdInsertReRollingStatus.Parameters.AddWithValue("@OrderNo", order.OrderNo);
                    //                cmdInsertReRollingStatus.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                    //                cmdInsertReRollingStatus.Parameters.AddWithValue("@BulkRollsPending", 0);
                    //                cmdInsertReRollingStatus.Parameters.AddWithValue("@BulkRollsCompleted", 0);
                    //                cmdInsertReRollingStatus.Parameters.AddWithValue("@RollsCompleted", 0);
                    //                cmdInsertReRollingStatus.ExecuteNonQuery();
                    //                cmdInsertReRollingStatus.Parameters.Clear();
                    //            }
                    //            else
                    //            {
                    //                cmdInsertReRollingStatus.Transaction = trans;
                    //                cmdInsertReRollingStatus.Parameters.AddWithValue("@OrderNo", order.OrderNo);
                    //                cmdInsertReRollingStatus.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                    //                cmdInsertReRollingStatus.Parameters.AddWithValue("@BulkRollsPending", "X");
                    //                cmdInsertReRollingStatus.Parameters.AddWithValue("@BulkRollsCompleted", "X");
                    //                cmdInsertReRollingStatus.Parameters.AddWithValue("@RollsCompleted", "X");
                    //                cmdInsertReRollingStatus.ExecuteNonQuery();
                    //                cmdInsertReRollingStatus.Parameters.Clear();
                    //            }
                    //        }
                    //    }
                    //}                  




                    //Warehouse

                    trans.Commit();
                }

                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("SQL Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }


            return res;

        }

        public static Int32 CreateSalesOrder(int customerId, int freightId, string salesOrderNo, OrderStatus orderStatus, DateTime requiredDate,
            DateTime freightArrivTime, bool freightTimeAvailable, DateTime createdDate, string comment, bool isProductionDateAvailable)
        {
            Int32 salesNo = 0;
            int result = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                //GET ID
                SqlCommand cmdGetId = new SqlCommand("SELECT TOP 1 * FROM SalesOrder ORDER BY id DESC", conn);

                //INSERT SALES ORDER
                SqlCommand cmdInsertSalesOrder = new SqlCommand("INSERT INTO SalesOrder(id,customer_id,freight_id,sales_order_no, order_status, required_date,freight_arr_time,freight_time_available,created_date,comment,required_date_selected) " +
                                                                "VALUES (@SalesIDParam,@customerIDParam,@freightIDParam,@salesOrderNoParam,@statusParam,@reqDateParam,@freightTimeParam,@freightTimeEnabledParam,@createdDateParam,@commentParam,@IsProdDateAvailable)", conn);
                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {
                    cmdGetId.Transaction = trans;
                    salesNo = (Int32)cmdGetId.ExecuteScalar();

                    if (salesNo > 0)
                    {
                        salesNo += 1;
                        cmdInsertSalesOrder.Transaction = trans;
                        cmdInsertSalesOrder.Parameters.AddWithValue("@SalesIDParam", salesNo);
                        cmdInsertSalesOrder.Parameters.AddWithValue("@customerIDParam", customerId);
                        cmdInsertSalesOrder.Parameters.AddWithValue("@freightIDParam", freightId);
                        cmdInsertSalesOrder.Parameters.AddWithValue("@salesOrderNoParam", salesOrderNo ?? (object)DBNull.Value);
                        cmdInsertSalesOrder.Parameters.AddWithValue("@statusParam", orderStatus.ToString());
                        cmdInsertSalesOrder.Parameters.AddWithValue("@reqDateParam", requiredDate);
                        cmdInsertSalesOrder.Parameters.AddWithValue("@freightTimeParam", freightArrivTime.ToString("HH:mm:ss"));
                        cmdInsertSalesOrder.Parameters.AddWithValue("@freightTimeEnabledParam", freightTimeAvailable);
                        cmdInsertSalesOrder.Parameters.AddWithValue("@createdDateParam", createdDate);
                        cmdInsertSalesOrder.Parameters.AddWithValue("@commentParam", comment ?? (object)DBNull.Value);
                        cmdInsertSalesOrder.Parameters.AddWithValue("@IsProdDateAvailable", isProductionDateAvailable);
                        result = cmdInsertSalesOrder.ExecuteNonQuery();
                    }

                    trans.Commit();
                }

                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("SQL Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return salesNo;
        }

        public static int AddToMixing(List<MixingCapacity> mixingList, GradingProductionDetails gradingProductionDetails, int orderType, int currentShift, Int64 currentProdTimeTable, 
            List<GradingCompleted> ggList, string pcName, Int32 realProdTimeTableID, DateTime realDateTime,bool gradingCompleted)
        {
            int result = 0, tmpShiftId = 0, upgs=0, upCC1 = 0, upCC2 = 0, gc = 0;
            decimal totBlockLogGS = 0, mixCCBlockTot = 0, kgTot = 0;           
            OrderStatus orderStatus = OrderStatus.Grading;
            List<MixingOnly> mixingOnlyList = GetMixingOnly();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                //DEDUCT FROM GRADING
                SqlCommand cmdSelectGS = new SqlCommand("SELECT blocklog_qty FROM GradingScheduling " +
                                                       "WHERE production_time_table_id=@ProdTimeTableID AND raw_product_id = @rawProdId AND sales_id=@SalesID AND shift = @shiftParam " +
                                                       "AND status = @statusParam AND order_type=@OrderType", conn);

                //Update Grading Scheduling
                SqlCommand cmdUpdateStatus = new SqlCommand("UPDATE GradingScheduling SET blocklog_qty = @logBlockParam " +
                                                            "WHERE production_time_table_id=@ProdTimeTableID AND raw_product_id = @rawProdId AND sales_id=@SalesID AND shift = @shiftParam " +
                                                            "AND status = @statusParam AND order_type=@OrderType", conn);

                //Update Current Capacity
                SqlCommand cmdUpdateCC = new SqlCommand("UPDATE CurrentCapacity SET capacity_kg=capacity_kg-@CapacityKg,blocks_logs = blocks_logs+@BlockSLogs " +
                                                        "WHERE prod_timetable_id=@ProdTimeTableID AND product_capacity_id=@ProdCapacityId AND sales_id=@SalesId  AND raw_product_id = @RawproductId AND shift = @Shift  AND order_type=@OrderType", conn);

                //GradingCompleted
                SqlCommand cmdGradingCompleted = new SqlCommand("INSERT INTO GradingCompleted VALUES(@ProdTimeTableID,@SalesID,@RawProductID,@Qty,@Shift,@OrderType,@CompletedBy,@CreatedDateTime,@CreatedTime,@Status)", conn);

                //GradingGradesCompleted
                SqlCommand cmdGGCompletedSel = new SqlCommand("SELECT kg_completed FROM GradingGradesCompleted " +
                                                              "WHERE prod_time_table_id=@ProdTimeTableID AND grading_id=@GradingID AND shift=@Shift AND order_type=@OrderType", conn);


                SqlCommand cmdGGCompleted = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM GradingGradesCompleted WHERE prod_time_table_id=@ProdTimeTableID AND grading_id=@GradingID AND shift=@Shift AND order_type=@OrderType) " +
                                                           "INSERT INTO GradingGradesCompleted VALUES(@ProdTimeTableID,@GradingID,@KgCompleted,@Shift,@CreatedDate,@OrderType) " +
                                                           "ELSE " +
                                                           "UPDATE GradingGradesCompleted SET kg_completed = @KgCompleted WHERE prod_time_table_id=@ProdTimeTableID AND grading_id=@GradingID AND shift=@Shift AND order_type=@OrderType", conn);
                //Update GradingScheduling Active to false
                SqlCommand cmdUpdateGradingSchedulingActvie = new SqlCommand("UPDATE GradingScheduling SET active_order = @Active " +
                                                                             "WHERE production_time_table_id=@ProdTimeTableID AND raw_product_id = @rawProdId AND sales_id=@SalesID AND shift = @shiftParam " +
                                                                             "AND status = @statusParam AND order_type=@OrderType AND active_order=@ActiveCurrent", conn);

                SqlCommand cmdDeleteGradSched = new SqlCommand("DELETE FROM GradingScheduling WHERE id = @GradingSchedulingID AND blocklog_qty <= 0", conn);

                SqlCommand cmdDeleteCurrCap = new SqlCommand("DELETE FROM CurrentCapacity " +
                                                             "WHERE blocks_logs <= 0 AND prod_timetable_id=@ProdTimeTableID AND product_capacity_id=@ProdCapacityId AND sales_id=@SalesId AND " +
                                                             "raw_product_id = @RawproductId AND shift = @Shift AND order_type=@OrderType", conn);



                //INSERT INTO MIXING
                //Check if MixingCurrentCapacity exists
                SqlCommand cmdSelectMCC = new SqlCommand("SELECT blockLog_qty FROM MixingCurrentCapacity " +
                                                         "WHERE raw_product_id = @RawProdId AND sales_id=@SalesId AND prod_time_table_id=@ProdTimeTableId AND mixing_time_table_id=@MixingTimeTableId AND order_type=@Ordertype AND rank=@Rank", conn);

                SqlCommand cmdInsertMCC = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM MixingCurrentCapacity WHERE raw_product_id = @RawProdId AND sales_id=@SalesId AND prod_time_table_id=@ProdTimeTableId AND mixing_time_table_id=@MixingTimeTableId  AND order_type=@Ordertype AND rank=@Rank) " +
                                                         "INSERT INTO MixingCurrentCapacity VALUES(@ProdTimeTableId,@MixingTimeTableId,@SalesId,@RawProdId,@BlockLogsQty,@Status,@OrderType,@Rank,@Active) " +
                                                         "ELSE " +
                                                         "UPDATE MixingCurrentCapacity SET blockLog_qty=@BlockLogsQty WHERE " +
                                                         "raw_product_id = @RawProdId AND sales_id=@SalesId AND prod_time_table_id=@ProdTimeTableId AND mixing_time_table_id=@MixingTimeTableId  AND order_type=@Ordertype AND rank=@Rank", conn);

                SqlCommand cmdTransaction = new SqlCommand("INSERT INTO Transactions(transaction_datetime, transaction_type, sales_order_id, raw_product_id,qty,created_by) " +
                                                           "VALUES (@TDateTime,@TType,@SalesOrderID,@RawProductID,@Qty,@CreatedBy)", conn); 

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {
                    /********************************************GRADING**************************************************/
                    if (gradingProductionDetails != null)
                    {
                        cmdSelectGS.Transaction = trans;
                        cmdSelectGS.Parameters.AddWithValue("@ProdTimeTableID", gradingProductionDetails.RawProDetailsID);
                        cmdSelectGS.Parameters.AddWithValue("@SalesID", gradingProductionDetails.SalesOrderId);
                        cmdSelectGS.Parameters.AddWithValue("@rawProdId", gradingProductionDetails.RawProduct.RawProductID);
                        cmdSelectGS.Parameters.AddWithValue("@shiftParam", gradingProductionDetails.Shift);
                        cmdSelectGS.Parameters.AddWithValue("@statusParam", orderStatus.ToString());
                        cmdSelectGS.Parameters.AddWithValue("@OrderType", orderType);

                        using (SqlDataReader dr = cmdSelectGS.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                if (dr.HasRows)
                                {
                                    while (dr.Read())
                                    {
                                        totBlockLogGS = Convert.ToDecimal(dr["blocklog_qty"]);
                                    }
                                }
                            }
                        }

                        cmdUpdateStatus.Transaction = trans;
                        cmdUpdateStatus.Parameters.AddWithValue("@ProdTimeTableID", gradingProductionDetails.RawProDetailsID);
                        cmdUpdateStatus.Parameters.AddWithValue("@SalesID", gradingProductionDetails.SalesOrderId);
                        cmdUpdateStatus.Parameters.AddWithValue("@rawProdId", gradingProductionDetails.RawProduct.RawProductID);
                        cmdUpdateStatus.Parameters.AddWithValue("@logBlockParam", totBlockLogGS - 1);
                        cmdUpdateStatus.Parameters.AddWithValue("@shiftParam", gradingProductionDetails.Shift);
                        cmdUpdateStatus.Parameters.AddWithValue("@statusParam", orderStatus.ToString());
                        cmdUpdateStatus.Parameters.AddWithValue("@OrderType", orderType);
                        upgs = cmdUpdateStatus.ExecuteNonQuery();

                        //Update GradingSchedulingActive to false
                        cmdUpdateGradingSchedulingActvie.Transaction = trans;
                        cmdUpdateGradingSchedulingActvie.Parameters.AddWithValue("@ProdTimeTableID", gradingProductionDetails.RawProDetailsID);
                        cmdUpdateGradingSchedulingActvie.Parameters.AddWithValue("@SalesID", gradingProductionDetails.SalesOrderId);
                        cmdUpdateGradingSchedulingActvie.Parameters.AddWithValue("@rawProdId", gradingProductionDetails.RawProduct.RawProductID);
                        cmdUpdateGradingSchedulingActvie.Parameters.AddWithValue("@shiftParam", gradingProductionDetails.Shift);
                        cmdUpdateGradingSchedulingActvie.Parameters.AddWithValue("@statusParam", "Grading");
                        cmdUpdateGradingSchedulingActvie.Parameters.AddWithValue("@OrderType", orderType);
                        cmdUpdateGradingSchedulingActvie.Parameters.AddWithValue("@ActiveCurrent", gradingProductionDetails.GradingActive);
                        cmdUpdateGradingSchedulingActvie.Parameters.AddWithValue("@Active", false);
                        cmdUpdateGradingSchedulingActvie.ExecuteNonQuery();

                        List<Formulas> fList = GetFormulaDetailsByRawProdID(gradingProductionDetails.RawProduct.RawProductID);
                        if (fList.Count > 0)
                        {
                            if (fList[0].ProductCapacity1 > 0)
                            {
                                cmdUpdateCC.Transaction = trans;
                                cmdUpdateCC.Parameters.AddWithValue("@ProdTimeTableID", gradingProductionDetails.RawProDetailsID);
                                cmdUpdateCC.Parameters.AddWithValue("@ProdCapacityId", fList[0].ProductCapacity1);
                                cmdUpdateCC.Parameters.AddWithValue("@SalesId", gradingProductionDetails.SalesOrderId);
                                cmdUpdateCC.Parameters.AddWithValue("@RawproductId", gradingProductionDetails.RawProduct.RawProductID);
                                cmdUpdateCC.Parameters.AddWithValue("@productId", 0);
                                cmdUpdateCC.Parameters.AddWithValue("@Shift", gradingProductionDetails.Shift);
                                cmdUpdateCC.Parameters.AddWithValue("@CapacityKg", fList[0].GradingWeight1);
                                cmdUpdateCC.Parameters.AddWithValue("@BlockSLogs", -1);
                                cmdUpdateCC.Parameters.AddWithValue("@OrderType", orderType);
                                upCC1 = cmdUpdateCC.ExecuteNonQuery();
                            }

                            if (fList[0].ProductCapacity2 > 0)
                            {
                                cmdUpdateCC.Parameters.Clear();

                                cmdUpdateCC.Transaction = trans;
                                cmdUpdateCC.Parameters.AddWithValue("@ProdTimeTableID", gradingProductionDetails.RawProDetailsID);
                                cmdUpdateCC.Parameters.AddWithValue("@ProdCapacityId", fList[0].ProductCapacity2);
                                cmdUpdateCC.Parameters.AddWithValue("@SalesId", gradingProductionDetails.SalesOrderId);
                                cmdUpdateCC.Parameters.AddWithValue("@RawproductId", gradingProductionDetails.RawProduct.RawProductID);
                                cmdUpdateCC.Parameters.AddWithValue("@productId", 0);
                                cmdUpdateCC.Parameters.AddWithValue("@Shift", gradingProductionDetails.Shift);
                                cmdUpdateCC.Parameters.AddWithValue("@CapacityKg", fList[0].GradingWeight2);
                                cmdUpdateCC.Parameters.AddWithValue("@BlockSLogs", -1);
                                cmdUpdateCC.Parameters.AddWithValue("@OrderType", orderType);
                                upCC2 = cmdUpdateCC.ExecuteNonQuery();
                            }
                        }

                        if ((DateTime.Now.TimeOfDay >= new TimeSpan(5, 30, 0)) && (DateTime.Now.TimeOfDay <= new TimeSpan(11, 29, 58)))
                        {
                            tmpShiftId = 1;
                        }
                        else if ((DateTime.Now.TimeOfDay >= new TimeSpan(11, 30, 0)) && (DateTime.Now.TimeOfDay <= new TimeSpan(17, 14, 58)))
                        {
                            tmpShiftId = 2;
                        }
                        else
                        {
                            tmpShiftId = 3;
                        }

                        //GradingCompleted                  
                        cmdGradingCompleted.Transaction = trans;
                        cmdGradingCompleted.Parameters.AddWithValue("@ProdTimeTableID", realProdTimeTableID);
                        cmdGradingCompleted.Parameters.AddWithValue("@SalesID", gradingProductionDetails.SalesOrderId);
                        cmdGradingCompleted.Parameters.AddWithValue("@RawProductID", gradingProductionDetails.RawProduct.RawProductID);
                        cmdGradingCompleted.Parameters.AddWithValue("@Qty", 1);
                        if (DateTime.Now.DayOfWeek == DayOfWeek.Friday)
                        {
                            cmdGradingCompleted.Parameters.AddWithValue("@Shift", tmpShiftId);
                        }
                        else
                        {
                            cmdGradingCompleted.Parameters.AddWithValue("@Shift", currentShift);
                        }
                        cmdGradingCompleted.Parameters.AddWithValue("@OrderType", orderType);
                        cmdGradingCompleted.Parameters.AddWithValue("@CompletedBy", pcName);
                        cmdGradingCompleted.Parameters.AddWithValue("@CreatedDateTime", realDateTime);
                        cmdGradingCompleted.Parameters.AddWithValue("@CreatedTime", DateTime.Now.TimeOfDay);
                        cmdGradingCompleted.Parameters.AddWithValue("@Status", "Completed");
                        gc = cmdGradingCompleted.ExecuteNonQuery();

                        //GradingGradesCompleted     
                        foreach (var item in ggList)
                        {
                            kgTot = 0;
                            cmdGGCompletedSel.Transaction = trans;
                            cmdGGCompletedSel.Parameters.AddWithValue("@ProdTimeTableID", item.ProdTimeTableID);
                            cmdGGCompletedSel.Parameters.AddWithValue("@GradingID", item.GradingID);
                            if (DateTime.Now.DayOfWeek == DayOfWeek.Friday)
                            {
                                cmdGGCompletedSel.Parameters.AddWithValue("@Shift", tmpShiftId);
                            }
                            else
                            {
                                cmdGGCompletedSel.Parameters.AddWithValue("@Shift", item.Shift);
                            }
                            cmdGGCompletedSel.Parameters.AddWithValue("@OrderType", orderType);
                            using (SqlDataReader dr = cmdGGCompletedSel.ExecuteReader())
                            {
                                if (dr != null)
                                {
                                    if (dr.HasRows)
                                    {
                                        while (dr.Read())
                                        {
                                            kgTot = Convert.ToDecimal(dr["kg_completed"]);
                                        }
                                    }
                                }
                            }
                            cmdGGCompletedSel.Parameters.Clear();

                            cmdGGCompleted.Transaction = trans;
                            cmdGGCompleted.Parameters.AddWithValue("@ProdTimeTableID", item.ProdTimeTableID);
                            cmdGGCompleted.Parameters.AddWithValue("@GradingID", item.GradingID);
                            cmdGGCompleted.Parameters.AddWithValue("@KgCompleted", item.KGCompleted + kgTot);
                            if (DateTime.Now.DayOfWeek == DayOfWeek.Friday)
                            {
                                cmdGGCompleted.Parameters.AddWithValue("@Shift", tmpShiftId);
                            }
                            else
                            {
                                cmdGGCompleted.Parameters.AddWithValue("@Shift", item.Shift);
                            }
                            cmdGGCompleted.Parameters.AddWithValue("@CreatedDate", item.CreatedDate);
                            cmdGGCompleted.Parameters.AddWithValue("@OrderType", orderType);
                            cmdGGCompleted.ExecuteNonQuery();
                            cmdGGCompleted.Parameters.Clear();
                        }


                        cmdDeleteGradSched.Transaction = trans;
                        cmdDeleteGradSched.Parameters.AddWithValue("@GradingSchedulingID", gradingProductionDetails.GradingSchedulingID);
                        int a = cmdDeleteGradSched.ExecuteNonQuery();
                        if (a > 0)
                        {
                            if (fList[0].ProductCapacity1 > 0)
                            {
                                cmdDeleteCurrCap.Transaction = trans;
                                cmdDeleteCurrCap.Parameters.AddWithValue("@ProdTimeTableID", gradingProductionDetails.RawProDetailsID);
                                cmdDeleteCurrCap.Parameters.AddWithValue("@ProdCapacityId", fList[0].ProductCapacity1);
                                cmdDeleteCurrCap.Parameters.AddWithValue("@SalesId", gradingProductionDetails.SalesOrderId);
                                cmdDeleteCurrCap.Parameters.AddWithValue("@RawproductId", gradingProductionDetails.RawProduct.RawProductID);
                                cmdDeleteCurrCap.Parameters.AddWithValue("@Shift", gradingProductionDetails.Shift);
                                cmdDeleteCurrCap.Parameters.AddWithValue("@CapacityKg", fList[0].GradingWeight1);
                                cmdDeleteCurrCap.Parameters.AddWithValue("@OrderType", orderType);
                                int b = cmdDeleteCurrCap.ExecuteNonQuery();
                                cmdDeleteCurrCap.Parameters.Clear();
                            }

                            if (fList[0].ProductCapacity2 > 0)
                            {
                                cmdDeleteCurrCap.Transaction = trans;
                                cmdDeleteCurrCap.Parameters.AddWithValue("@ProdTimeTableID", gradingProductionDetails.RawProDetailsID);
                                cmdDeleteCurrCap.Parameters.AddWithValue("@ProdCapacityId", fList[0].ProductCapacity2);
                                cmdDeleteCurrCap.Parameters.AddWithValue("@SalesId", gradingProductionDetails.SalesOrderId);
                                cmdDeleteCurrCap.Parameters.AddWithValue("@RawproductId", gradingProductionDetails.RawProduct.RawProductID);
                                cmdDeleteCurrCap.Parameters.AddWithValue("@Shift", gradingProductionDetails.Shift);
                                cmdDeleteCurrCap.Parameters.AddWithValue("@CapacityKg", fList[0].GradingWeight1);
                                cmdDeleteCurrCap.Parameters.AddWithValue("@OrderType", orderType);
                                int c = cmdDeleteCurrCap.ExecuteNonQuery();
                            }
                        }

                        if (upgs > 0 && gc > 0 && (upCC1 > 0 || upCC2 > 0))
                        {
                            gradingCompleted = true;

                            cmdTransaction.Transaction = trans;
                            cmdTransaction.Parameters.AddWithValue("@TDateTime", DateTime.Now);
                            cmdTransaction.Parameters.AddWithValue("@TType", "Completed (Grading)");
                            cmdTransaction.Parameters.AddWithValue("@SalesOrderID", gradingProductionDetails.SalesOrderId);
                            cmdTransaction.Parameters.AddWithValue("@RawProductID", gradingProductionDetails.RawProduct.RawProductID);
                            cmdTransaction.Parameters.AddWithValue("@Qty", 1);
                            cmdTransaction.Parameters.AddWithValue("@CreatedBy", pcName);
                            cmdTransaction.ExecuteNonQuery();
                        }
                    }
                    /********************************************MIXING**************************************************/
                    if (gradingCompleted ==true)
                    {
                        foreach (var item in mixingList)
                        {
                            int ot = item.OrderType;
                            if (item.OrderType == 2)
                            {
                                ot = 1;
                            }
                            else if (item.OrderType == 4)
                            {
                                ot = 3;
                            }

                            //Mixing Current Capacity
                            cmdSelectMCC.Transaction = trans;
                            cmdSelectMCC.Parameters.AddWithValue("@RawProdId", item.RawProductID);
                            cmdSelectMCC.Parameters.AddWithValue("@SalesId", item.SalesId);
                            cmdSelectMCC.Parameters.AddWithValue("@ProdTimeTableId", item.ProdTimeTableID);
                            cmdSelectMCC.Parameters.AddWithValue("@MixingTimeTableId", item.MixingTimeTableID);
                            cmdSelectMCC.Parameters.AddWithValue("@OrderType", ot);
                            cmdSelectMCC.Parameters.AddWithValue("@Rank", 4);

                            using (SqlDataReader dr = cmdSelectMCC.ExecuteReader())
                            {
                                if (dr != null)
                                {
                                    if (dr.HasRows)
                                    {
                                        while (dr.Read())
                                        {
                                            mixCCBlockTot += Convert.ToDecimal(dr["blockLog_qty"]);
                                        }
                                        mixCCBlockTot += item.BlockLogQty;
                                    }
                                    else
                                    {
                                        mixCCBlockTot = item.BlockLogQty;
                                    }
                                }
                            }

                            cmdSelectMCC.Parameters.Clear();

                            cmdInsertMCC.Transaction = trans;
                            cmdInsertMCC.Parameters.AddWithValue("@ProdTimeTableId", item.ProdTimeTableID);
                            cmdInsertMCC.Parameters.AddWithValue("@MixingTimeTableId", item.MixingTimeTableID);
                            cmdInsertMCC.Parameters.AddWithValue("@SalesId", item.SalesId);
                            cmdInsertMCC.Parameters.AddWithValue("@RawProdId", item.RawProductID);
                            cmdInsertMCC.Parameters.AddWithValue("@BlockLogsQty", mixCCBlockTot);
                            cmdInsertMCC.Parameters.AddWithValue("@Status", "Mixing");
                            cmdInsertMCC.Parameters.AddWithValue("@OrderType", ot);
                            cmdInsertMCC.Parameters.AddWithValue("@Rank", 4);
                            cmdInsertMCC.Parameters.AddWithValue("@Active", false);
                            result = cmdInsertMCC.ExecuteNonQuery();
                            cmdInsertMCC.Parameters.Clear();

                            if(result > 0)
                            {
                                trans.Commit();
                            }
                            else
                            {
                                trans.Rollback();
                                result = -2;
                            }
                        } 
                    }
                    else
                    {
                        //GRADING NOT COMPLETED SO ORDER IS NOT SENT TO MIXING
                        trans.Rollback();
                        result = -1;
                    }                    
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("SQL Error: " + e);
                }
                finally
                {
                    conn.Close();
                }

            }
            return result;

        }

        public static int AllocateCapacity(ObservableCollection<CurrentCapacity> capData, List<CurrentCapacity> gradingList, Int64 salesId, string salesNo)
        {
            int result = 0;
            decimal totCapKg = 0;
            decimal totBlocksLogs = 0;
            decimal totBlocksLogsGS = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                //CHECK EXISTING VALUES IN CURRENT CAPACITY
                SqlCommand cmdSelect = new SqlCommand("SELECT capacity_kg, blocks_logs FROM CurrentCapacity " +
                                                      "WHERE prod_timetable_id = @ProdTimeTableId AND product_capacity_id = @ProductCapacityId AND raw_product_id =@RawproductId AND product_id = @productId AND shift=@Shift AND sales_id = @SalesId AND order_type  =@OrderType", conn);
                //INSERT INTO CURRENT CAPACITY
                SqlCommand cmdCurrCap = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM CurrentCapacity WHERE " +
                                                       "prod_timetable_id=@ProdTimeTableId AND product_capacity_id = @ProdCapacityId AND raw_product_id =@RawproductId AND product_id = @productId AND shift=@Shift AND sales_id = @SalesId AND order_type=@OrderType) " +
                                                       "INSERT INTO CurrentCapacity VALUES(@ProdTimeTableId,@ProdCapacityId,@SalesId,@RawproductId,@productId,@Shift,@CapacityKg,@BlockSLogs,@OrderType) " +
                                                       "ELSE " +
                                                       "UPDATE CurrentCapacity SET capacity_kg=@CapacityKg, blocks_logs=@BlockSLogs WHERE prod_timetable_id = @ProdTimeTableId AND product_capacity_id = @ProdCapacityId AND sales_id=@SalesId AND raw_product_id=@RawproductId AND product_id = @productId AND shift=@Shift", conn);

                //CHECK EXISTING VAUES IN THE GRADING SCHEDULE
                SqlCommand cmdSelectGS = new SqlCommand("SELECT blocklog_qty FROM GradingScheduling " +
                                                       "WHERE production_time_table_id=@ProdTimeTableId AND raw_product_id =@RawproductId AND shift=@Shift AND sales_id = @SalesId AND status=@Status AND order_type=@OrderType", conn);

                //INSERT INTO GRADING
                SqlCommand cmdGradingSched = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM GradingScheduling WHERE " +
                                                            "production_time_table_id=@ProdTimeTableId AND raw_product_id =@RawproductId AND shift=@Shift AND sales_id = @SalesId AND order_type=@OrderType) " +
                                                            "INSERT INTO GradingScheduling VALUES(@ProdTimeTableId,@RawproductId,@SalesId,@BlockSLogs,@Shift,@Status,@OrderType,@Active,@PrintCounter) " +
                                                            "ELSE " +
                                                            "UPDATE GradingScheduling SET blocklog_qty=@BlockSLogs WHERE production_time_table_id=@ProdTimeTableId AND raw_product_id =@RawproductId AND shift=@Shift AND sales_id = @SalesId", conn);
                //Update Raw Stock Status
                SqlCommand cmdUpdate = new SqlCommand("UPDATE RawStock SET status=@UpdateStatus WHERE rs_raw_product_id = @RawProdID AND status=@Status", conn);

                //Grading Status               

                //SqlCommand cmdInsertGradingStatus = new SqlCommand("UPDATE GradingStatus SET qty_rem+=@Pending WHERE order_no=@OrderNo AND raw_product_id =@RawProductID", conn);

                //SqlCommand cmdInsertGradingStatus = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM GradingStatus WHERE " +
                //                                                   "order_no=@OrderNo AND raw_product_id =@RawProductID) " +
                //                                                   "INSERT INTO GradingStatus VALUES(@OrderNo,@RawProductID,@Pending,@Completed) " +
                //                                                   "ELSE " +
                //                                                   "UPDATE GradingStatus SET pending=@Pending WHERE order_no=@OrderNo AND raw_product_id =@RawProductID", conn);
                ////Mixing Status               
                //SqlCommand cmdInsertMixingStatus = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM MixingStatus WHERE " +
                //                                                  "order_no=@OrderNo AND raw_product_id =@RawProductID) " +
                //                                                  "INSERT INTO MixingStatus VALUES(@OrderNo,@RawProductID,@Pending,@Completed) " +
                //                                                  "ELSE " +
                //                                                  "UPDATE MixingStatus SET pending=@Pending WHERE order_no=@OrderNo AND raw_product_id =@RawProductID", conn);



                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {
                    foreach (var item in capData)
                    {
                        //Grading Only

                        cmdSelect.Transaction = trans;
                        cmdSelect.Parameters.AddWithValue("@ProdTimeTableId", item.ProdTimeTableID);
                        cmdSelect.Parameters.AddWithValue("@ProductCapacityId", item.ProductCapacityID);
                        cmdSelect.Parameters.AddWithValue("@RawproductId", item.RawProductID);
                        cmdSelect.Parameters.AddWithValue("@productId", item.ProductID);
                        cmdSelect.Parameters.AddWithValue("@SalesId", salesId);
                        cmdSelect.Parameters.AddWithValue("@Shift", item.Shift);
                        cmdSelect.Parameters.AddWithValue("@OrderType", item.OrderType);
                        using (SqlDataReader dr = cmdSelect.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                if (dr.HasRows)
                                {
                                    totCapKg = 0;
                                    totBlocksLogs = 0;
                                    while (dr.Read())
                                    {
                                        totCapKg += Convert.ToDecimal(dr["capacity_kg"]);
                                        totBlocksLogs += Convert.ToDecimal(dr["blocks_logs"]);
                                    }
                                    totCapKg += item.CapacityKG;
                                    totBlocksLogs += item.BlocksLogs;
                                }
                                else
                                {
                                    totCapKg = item.CapacityKG;
                                    totBlocksLogs = item.BlocksLogs;
                                }
                            }
                        }
                        cmdSelect.Parameters.Clear();
                        //INSERT INTO CURRENT CAPACITY
                        cmdCurrCap.Transaction = trans;
                        cmdCurrCap.Parameters.AddWithValue("@ProdTimeTableId", item.ProdTimeTableID);
                        cmdCurrCap.Parameters.AddWithValue("@ProdCapacityId", item.ProductCapacityID);
                        cmdCurrCap.Parameters.AddWithValue("@SalesId", salesId);
                        cmdCurrCap.Parameters.AddWithValue("@RawproductId", item.RawProductID);
                        cmdCurrCap.Parameters.AddWithValue("@productId", item.ProductID);
                        cmdCurrCap.Parameters.AddWithValue("@Shift", item.Shift);
                        cmdCurrCap.Parameters.AddWithValue("@CapacityKg", totCapKg);
                        cmdCurrCap.Parameters.AddWithValue("@BlockSLogs", totBlocksLogs);
                        //cmdCurrCap.Parameters.AddWithValue("@InsBlockSLogs", 0);
                        cmdCurrCap.Parameters.AddWithValue("@OrderType", item.OrderType);

                        result = cmdCurrCap.ExecuteNonQuery();
                        cmdCurrCap.Parameters.Clear();

                        if (salesNo == "Stock Filling")
                        {
                            cmdUpdate.Transaction = trans;
                            cmdUpdate.Parameters.AddWithValue("@RawProdID", item.RawProductID);
                            cmdUpdate.Parameters.AddWithValue("@Status", "NF");
                            cmdUpdate.Parameters.AddWithValue("@UpdateStatus", "SF");
                            cmdUpdate.ExecuteNonQuery();
                            cmdUpdate.Parameters.Clear();
                        }
                    }

                    foreach (var item in gradingList)
                    {

                        cmdSelectGS.Transaction = trans;
                        cmdSelectGS.Parameters.AddWithValue("@ProdTimeTableId", item.ProdTimeTableID);
                        cmdSelectGS.Parameters.AddWithValue("@RawproductId", item.RawProductID);
                        cmdSelectGS.Parameters.AddWithValue("@SalesId", salesId);
                        cmdSelectGS.Parameters.AddWithValue("@Shift", item.Shift);
                        cmdSelectGS.Parameters.AddWithValue("@Status", "Grading");
                        cmdSelectGS.Parameters.AddWithValue("@OrderType", item.OrderType);
                        using (SqlDataReader dr = cmdSelectGS.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                if (dr.HasRows)
                                {
                                    totBlocksLogsGS = 0;
                                    while (dr.Read())
                                    {
                                        totBlocksLogsGS += Convert.ToDecimal(dr["blocklog_qty"]);
                                    }
                                    totBlocksLogsGS += item.BlocksLogs;
                                }
                                else
                                {
                                    totBlocksLogsGS = item.BlocksLogs;
                                }
                            }
                        }
                        cmdSelectGS.Parameters.Clear();

                        cmdGradingSched.Transaction = trans;
                        cmdGradingSched.Parameters.AddWithValue("@ProdTimeTableId", item.ProdTimeTableID);
                        cmdGradingSched.Parameters.AddWithValue("@RawproductId", item.RawProductID);
                        cmdGradingSched.Parameters.AddWithValue("@SalesId", salesId);
                        cmdGradingSched.Parameters.AddWithValue("@Shift", item.Shift);
                        cmdGradingSched.Parameters.AddWithValue("@BlockSLogs", totBlocksLogsGS);
                        cmdGradingSched.Parameters.AddWithValue("@Status", "Grading");
                        cmdGradingSched.Parameters.AddWithValue("@OrderType", item.OrderType);
                        cmdGradingSched.Parameters.AddWithValue("@Active", false);
                        cmdGradingSched.Parameters.AddWithValue("@PrintCounter", 0);
                        result = cmdGradingSched.ExecuteNonQuery();
                        cmdGradingSched.Parameters.Clear();


                        //cmdInsertGradingStatus.Transaction = trans;
                        //cmdInsertGradingStatus.Parameters.AddWithValue("@OrderNo", salesId);
                        //cmdInsertGradingStatus.Parameters.AddWithValue("@RawProductID", item.RawProductID);
                        //cmdInsertGradingStatus.Parameters.AddWithValue("@Pending", totBlocksLogsGS);
                        //cmdInsertGradingStatus.Parameters.AddWithValue("@Completed", 0);
                        //cmdInsertGradingStatus.ExecuteNonQuery();
                        //cmdInsertGradingStatus.Parameters.Clear();

                        //cmdInsertMixingStatus.Transaction = trans;
                        //cmdInsertMixingStatus.Parameters.AddWithValue("@OrderNo", salesId);
                        //cmdInsertMixingStatus.Parameters.AddWithValue("@RawProductID", item.RawProductID);
                        //cmdInsertMixingStatus.Parameters.AddWithValue("@Pending", 0);
                        //cmdInsertMixingStatus.Parameters.AddWithValue("@Completed", 0);
                        //cmdInsertMixingStatus.ExecuteNonQuery();
                        //cmdInsertMixingStatus.Parameters.Clear();
                    }
                    //if (String.IsNullOrEmpty(GradingComments))
                    //{
                    //    GradingComments = "No Comment";
                    //}
                    //cmdInsertNote.Transaction = trans;
                    //cmdInsertNote.Parameters.AddWithValue("@SalesOrderId", salesId);
                    //cmdInsertNote.Parameters.AddWithValue("@Type", "Grading");
                    //cmdInsertNote.Parameters.AddWithValue("@Comment", GradingComments);
                    //cmdInsertNote.ExecuteNonQuery();

                    trans.Commit();
                }

                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("SQL Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return result;
        }

        public static int CheckDateAvailable(DateTime date)
        {
            int result = 0;
            string newDate = date.ToString("yyyy-MM-dd");

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    using (SqlCommand cmd = new SqlCommand("SELECT COUNT(*) FROM ProductionTimeTable WHERE date=@newDate", conn))
                    {
                        conn.Open();

                        cmd.Parameters.AddWithValue("@newDate", newDate);
                        result = (int)cmd.ExecuteScalar();
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL Checking production date existance ERROR : " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return result;
        }

       
        public static List<ProductionTimeTable> GetTimeTableData(DateTime prodDate)
        {
            List<ProductionTimeTable> prodTimeTable = new List<ProductionTimeTable>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdSelect = new SqlCommand("SELECT * FROM ProductionTimeTable " +
                                                      "WHERE date = @dateParam", conn);

                conn.Open();
                try
                {

                    cmdSelect.Parameters.AddWithValue("@dateParam", prodDate);

                    using (SqlDataReader dr = cmdSelect.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    ProductionTimeTable ptt = new ProductionTimeTable();
                                    ptt.ID = Convert.ToInt32(dr["id"]);
                                    ptt.MachineID = Convert.ToInt32(dr["machine_id"]);
                                    ptt.ProductionDate = Convert.ToDateTime(dr["date"]);
                                    ptt.IsMachineActive = Convert.ToBoolean(dr["machine_active"]);
                                    ptt.IsDayShiftActive = Convert.ToBoolean(dr["day_shift"]);
                                    ptt.IsEveningShiftActive = Convert.ToBoolean(dr["evening_shift"]);
                                    ptt.IsNightShiftActive = Convert.ToBoolean(dr["night_shift"]);
                                    prodTimeTable.Add(ptt);
                                }
                            }
                        }
                    }

                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL UPDATE COMMAND ERROR OCCURED :  Updating Orders table" + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return prodTimeTable;
        }



        public static List<Formulas> GetFormulaDetailsByRawProdID(int rawProdId)
        {

            List<Formulas> formulaList = new List<Formulas>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT * FROM Formulas WHERE raw_product_id = @RawProductID", conn))
                    {
                        cmdGetData.Parameters.AddWithValue("@RawProductID", rawProdId);

                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    Formulas formulas = new Formulas();
                                    formulas.RawProductID = Convert.ToInt16(dr["raw_product_id"]);
                                    formulas.ProductCapacity1 = Convert.ToInt16(dr["product_capacity1"]);
                                    formulas.ProductCapacity2 = Convert.ToInt16(dr["product_capacity2"]);
                                    formulas.GradingWeight1 = Convert.ToDecimal(dr["grading_weight1"]);
                                    formulas.GradingWeight2 = Convert.ToDecimal(dr["grading_weight2"]);
                                    formulas.GradingWeight3 = Convert.ToDecimal(dr["grading_weight3"]);
                                    formulas.NoOfMixes = Convert.ToInt16(dr["no_of_mixes"]);
                                    formulas.MachineID = Convert.ToInt16(dr["machine_id"]);
                                    formulas.GradingFormula = dr["grading"].ToString();
                                    formulas.MixingFormula = dr["mixing"].ToString();
                                    formulaList.Add(formulas);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading Product Capacity: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return formulaList;
        }

        public static List<ProductCapacity> GetCapacityLimitationsById(int prodTimeTableId, List<int> gradingList, int shift)
        {

            List<ProductCapacity> capLimList = new List<ProductCapacity>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT rubber_grading_id,capacity_kg FROM ProductCapacity " +
                                                                  "WHERE production_time_table_id=@ProdTimeTableId AND rubber_grading_id=@RubberGradingId AND shift=@Shift", conn))
                    {
                        foreach (var item in gradingList)
                        {


                            cmdGetData.Parameters.AddWithValue("@ProdTimeTableId", prodTimeTableId);
                            cmdGetData.Parameters.AddWithValue("@RubberGradingId", item);
                            cmdGetData.Parameters.AddWithValue("@Shift", shift);
                            using (SqlDataReader dr = cmdGetData.ExecuteReader())
                            {
                                if (dr != null)
                                {
                                    while (dr.Read())
                                    {
                                        ProductCapacity productCapacity = new ProductCapacity();
                                        productCapacity.RubberGradingID = Convert.ToInt16(dr["rubber_grading_id"]);
                                        productCapacity.CapacityKG = Convert.ToDecimal(dr["capacity_kg"]);
                                        capLimList.Add(productCapacity);
                                    }
                                }
                            }

                            cmdGetData.Parameters.Clear();
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading Product Capacity: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return capLimList;
        }

        public static int AddToGradingCapacity(List<CurrentCapacity> newCurrCap, int oldProductionTimeTableID, int oldShift)
        {
            int result = 0;
            decimal capacityKg1 = 0;
            decimal blocklog1 = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdSelect1 = new SqlCommand("SELECT capacity_kg, blocks_logs FROM CurrentCapacity " +
                                                       "WHERE prod_timetable_id = @prodTimeTableIdParam AND product_capacity_id=@prodCapIdparam AND sales_id = @salesIdParam AND raw_product_id = @rawProductIdParam AND shift = @shiftParam", conn);

                SqlCommand cmdInsUp1 = new SqlCommand("UPDATE CurrentCapacity SET capacity_kg=@CapacityKg, blocks_logs=@BlockSLogs WHERE prod_timetable_id = @ProdTimeTableId AND product_capacity_id = @ProdCapacityId AND sales_id=@SalesId AND raw_product_id=@RawproductId AND shift=@Shift", conn);

                SqlCommand cmdInsert = new SqlCommand("INSERT INTO CurrentCapacity(prod_timetable_id, product_capacity_id, sales_id, raw_product_id, product_id,shift,capacity_kg,blocks_logs) " +
                                                      "VALUES (@prodTimeTableIdParam,@prodCapIdparam,@salesIdParam,@RawProdIdParam,@ProductIdParam,@ShiftParam,@CapacityKgParam,@BlockLogsParam)", conn);

                SqlCommand cmdDelete = new SqlCommand("DELETE FROM CurrentCapacity " +
                                                      "WHERE prod_timetable_id = @oldProdTimeTableId AND product_capacity_id=@prodCapId AND sales_id = @salesIdParam AND raw_product_id = @rawProductIdParam AND shift = @oldShift", conn);

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {
                    foreach (var item in newCurrCap)
                    {
                        capacityKg1 = 0;
                        blocklog1 = 0;
                        cmdSelect1.Transaction = trans;
                        cmdSelect1.Parameters.AddWithValue("@prodTimeTableIdParam", item.ProdTimeTableID);
                        cmdSelect1.Parameters.AddWithValue("@prodCapIdparam", item.ProductCapacityID);
                        cmdSelect1.Parameters.AddWithValue("@salesIdParam", item.SalesID);
                        cmdSelect1.Parameters.AddWithValue("@rawProductIdParam", item.RawProductID);
                        cmdSelect1.Parameters.AddWithValue("@shiftParam", item.Shift);

                        using (SqlDataReader dr = cmdSelect1.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                if (dr.HasRows)
                                {
                                    while (dr.Read())
                                    {
                                        capacityKg1 = item.CapacityKG + Convert.ToDecimal(dr["capacity_kg"]);
                                        blocklog1 = item.BlocksLogs + Convert.ToDecimal(dr["blocks_logs"]);
                                    }
                                }
                                else
                                {
                                    capacityKg1 = 0;
                                    blocklog1 = 0;
                                }
                            }
                        }

                        cmdSelect1.Parameters.Clear();

                        if (capacityKg1 != 0)
                        {
                            cmdInsUp1.Transaction = trans;
                            cmdInsUp1.Parameters.AddWithValue("@ProdTimeTableId", item.ProdTimeTableID);
                            cmdInsUp1.Parameters.AddWithValue("@ProdCapacityId", item.ProductCapacityID);
                            cmdInsUp1.Parameters.AddWithValue("@SalesId", item.SalesID);
                            cmdInsUp1.Parameters.AddWithValue("@RawproductId", item.RawProductID);
                            cmdInsUp1.Parameters.AddWithValue("@productId", item.ProductID);
                            cmdInsUp1.Parameters.AddWithValue("@Shift", item.Shift);
                            cmdInsUp1.Parameters.AddWithValue("@CapacityKg", capacityKg1);
                            cmdInsUp1.Parameters.AddWithValue("@BlockSLogs", blocklog1);
                            cmdInsUp1.ExecuteNonQuery();
                            cmdInsUp1.Parameters.Clear();

                            cmdDelete.Transaction = trans;
                            cmdDelete.Parameters.AddWithValue("@oldProdTimeTableId", oldProductionTimeTableID);
                            cmdDelete.Parameters.AddWithValue("@prodCapId", item.ProductCapacityID);
                            cmdDelete.Parameters.AddWithValue("@salesIdParam", item.SalesID);
                            cmdDelete.Parameters.AddWithValue("@rawProductIdParam", item.RawProductID);
                            cmdDelete.Parameters.AddWithValue("@oldShift", oldShift);
                            result = cmdDelete.ExecuteNonQuery();
                            cmdDelete.Parameters.Clear();
                        }
                        else
                        {
                            cmdInsert.Transaction = trans;
                            cmdInsert.Parameters.AddWithValue("@prodTimeTableIdParam", item.ProdTimeTableID);
                            cmdInsert.Parameters.AddWithValue("@prodCapIdparam", item.ProductCapacityID);
                            cmdInsert.Parameters.AddWithValue("@salesIdParam", item.SalesID);
                            cmdInsert.Parameters.AddWithValue("@RawProdIdParam", item.RawProductID);
                            cmdInsert.Parameters.AddWithValue("@ProductIdParam", item.ProductID);
                            cmdInsert.Parameters.AddWithValue("@ShiftParam", item.Shift);
                            cmdInsert.Parameters.AddWithValue("@CapacityKgParam", item.CapacityKG);
                            cmdInsert.Parameters.AddWithValue("@BlockLogsParam", item.BlocksLogs);
                            cmdInsert.ExecuteNonQuery();
                            cmdInsert.Parameters.Clear();

                            cmdDelete.Transaction = trans;
                            cmdDelete.Parameters.AddWithValue("@oldProdTimeTableId", oldProductionTimeTableID);
                            cmdDelete.Parameters.AddWithValue("@prodCapId", item.ProductCapacityID);
                            cmdDelete.Parameters.AddWithValue("@salesIdParam", item.SalesID);
                            cmdDelete.Parameters.AddWithValue("@rawProductIdParam", item.RawProductID);
                            cmdDelete.Parameters.AddWithValue("@oldShift", oldShift);
                            result = cmdDelete.ExecuteNonQuery();
                            cmdDelete.Parameters.Clear();
                        }

                    }
                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("SQL UPDATE COMMAND ERROR OCCURED :  Updating Orders table" + e);
                }
                finally
                {
                    conn.Close();
                }
            }


            return result;
        }

        public static int UpdateGradingCapacity(List<CurrentCapacity> newCurrCap, int oldProductionTimeTableID, int oldShift)
        {
            int result = 0;
            decimal capacityKg1 = 0;
            decimal capacityKg2 = 0;

            decimal blocklog1 = 0;
            decimal blocklog2 = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdSelect1 = new SqlCommand("SELECT capacity_kg, blocks_logs FROM CurrentCapacity " +
                                                       "WHERE prod_timetable_id = @prodTimeTableIdParam AND product_capacity_id=@prodCapIdparam AND sales_id = @salesIdParam AND raw_product_id = @rawProductIdParam AND shift = @shiftParam", conn);

                SqlCommand cmdSelect2 = new SqlCommand("SELECT capacity_kg, blocks_logs FROM CurrentCapacity " +
                                                       "WHERE prod_timetable_id = @prodTimeTableIdParam1 AND product_capacity_id=@prodCapIdparam1 AND sales_id <> @salesIdParam AND raw_product_id = @rawProductIdParam1 AND shift = @shiftParam1", conn);

                SqlCommand cmdInsUp1 = new SqlCommand("UPDATE CurrentCapacity SET capacity_kg=@CapacityKg, blocks_logs=@BlockSLogs WHERE prod_timetable_id = @ProdTimeTableId AND product_capacity_id = @ProdCapacityId AND sales_id=@SalesId AND raw_product_id=@RawproductId AND shift=@Shift", conn);

                SqlCommand cmdInsUp2 = new SqlCommand("UPDATE CurrentCapacity SET capacity_kg=@CapacityKg, blocks_logs=@BlockSLogs WHERE prod_timetable_id = @ProdTimeTableId AND product_capacity_id = @ProdCapacityId AND sales_id <> @SalesId AND raw_product_id=@RawproductId AND shift=@Shift", conn);

                SqlCommand cmdInsert = new SqlCommand("INSERT INTO CurrentCapacity(prod_timetable_id, product_capacity_id, sales_id, raw_product_id, product_id,shift,capacity_kg,blocks_logs) " +
                                                      "VALUES (@prodTimeTableIdParam,@prodCapIdparam,@salesIdParam,@RawProdIdParam,@ProductIdParam,@ShiftParam,@CapacityKgParam,@BlockLogsParam)", conn);

                SqlCommand cmdDelete = new SqlCommand("DELETE FROM CurrentCapacity " +
                                                      "WHERE prod_timetable_id = @oldProdTimeTableId AND product_capacity_id=@prodCapId AND sales_id = @salesIdParam AND raw_product_id = @rawProductIdParam AND shift = @oldShift", conn);

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {
                    foreach (var item in newCurrCap)
                    {
                        capacityKg1 = 0;
                        blocklog1 = 0;
                        cmdSelect1.Transaction = trans;
                        cmdSelect1.Parameters.AddWithValue("@prodTimeTableIdParam", item.ProdTimeTableID);
                        cmdSelect1.Parameters.AddWithValue("@prodCapIdparam", item.ProductCapacityID);
                        cmdSelect1.Parameters.AddWithValue("@salesIdParam", item.SalesID);
                        cmdSelect1.Parameters.AddWithValue("@rawProductIdParam", item.RawProductID);
                        cmdSelect1.Parameters.AddWithValue("@shiftParam", item.Shift);

                        using (SqlDataReader dr = cmdSelect1.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                if (dr.HasRows)
                                {
                                    while (dr.Read())
                                    {
                                        capacityKg1 = item.CapacityKG + Convert.ToDecimal(dr["capacity_kg"]);
                                        blocklog1 = item.BlocksLogs + Convert.ToDecimal(dr["blocks_logs"]);
                                    }
                                }
                                else
                                {
                                    capacityKg1 = 0;
                                    blocklog1 = 0;
                                }
                            }
                        }

                        cmdSelect1.Parameters.Clear();

                        if (capacityKg1 != 0)
                        {
                            cmdInsUp1.Transaction = trans;
                            cmdInsUp1.Parameters.AddWithValue("@ProdTimeTableId", item.ProdTimeTableID);
                            cmdInsUp1.Parameters.AddWithValue("@ProdCapacityId", item.ProductCapacityID);
                            cmdInsUp1.Parameters.AddWithValue("@SalesId", item.SalesID);
                            cmdInsUp1.Parameters.AddWithValue("@RawproductId", item.RawProductID);
                            cmdInsUp1.Parameters.AddWithValue("@productId", item.ProductID);
                            cmdInsUp1.Parameters.AddWithValue("@Shift", item.Shift);
                            cmdInsUp1.Parameters.AddWithValue("@CapacityKg", capacityKg1);
                            cmdInsUp1.Parameters.AddWithValue("@BlockSLogs", blocklog1);

                            result = cmdInsUp1.ExecuteNonQuery();
                            cmdInsUp1.Parameters.Clear();
                        }

                        capacityKg2 = 0;
                        blocklog2 = 0;
                        cmdSelect2.Transaction = trans;
                        cmdSelect2.Parameters.AddWithValue("@prodTimeTableIdParam1", item.ProdTimeTableID);
                        cmdSelect2.Parameters.AddWithValue("@prodCapIdparam1", item.ProductCapacityID);
                        cmdSelect2.Parameters.AddWithValue("@salesIdParam", item.SalesID);
                        cmdSelect2.Parameters.AddWithValue("@rawProductIdParam1", item.RawProductID);
                        cmdSelect2.Parameters.AddWithValue("@shiftParam1", item.Shift);

                        using (SqlDataReader dr = cmdSelect2.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                if (dr.HasRows)
                                {
                                    while (dr.Read())
                                    {
                                        capacityKg2 = item.CapacityKG + Convert.ToDecimal(dr["capacity_kg"]);
                                        blocklog2 = item.BlocksLogs + Convert.ToDecimal(dr["blocks_logs"]);
                                    }
                                }
                                else
                                {
                                    capacityKg2 = 0;
                                    blocklog2 = 0;
                                }
                            }
                        }

                        cmdSelect2.Parameters.Clear();

                        if (capacityKg2 != 0)
                        {
                            cmdInsUp2.Transaction = trans;
                            cmdInsUp2.Parameters.AddWithValue("@ProdTimeTableId", item.ProdTimeTableID);
                            cmdInsUp2.Parameters.AddWithValue("@ProdCapacityId", item.ProductCapacityID);
                            cmdInsUp2.Parameters.AddWithValue("@SalesId", item.SalesID);
                            cmdInsUp2.Parameters.AddWithValue("@RawproductId", item.RawProductID);
                            cmdInsUp2.Parameters.AddWithValue("@productId", item.ProductID);
                            cmdInsUp2.Parameters.AddWithValue("@Shift", item.Shift);
                            cmdInsUp2.Parameters.AddWithValue("@CapacityKg", capacityKg2);
                            cmdInsUp2.Parameters.AddWithValue("@BlockSLogs", blocklog2);

                            result = cmdInsUp2.ExecuteNonQuery();
                            cmdInsUp2.Parameters.Clear();
                        }

                        if (capacityKg1 == 0 && capacityKg2 == 0)
                        {
                            cmdInsert.Transaction = trans;
                            cmdInsert.Parameters.AddWithValue("@prodTimeTableIdParam", item.ProdTimeTableID);
                            cmdInsert.Parameters.AddWithValue("@prodCapIdparam", item.ProductCapacityID);
                            cmdInsert.Parameters.AddWithValue("@salesIdParam", item.SalesID);
                            cmdInsert.Parameters.AddWithValue("@RawProdIdParam", item.RawProductID);
                            cmdInsert.Parameters.AddWithValue("@ProductIdParam", item.ProductID);
                            cmdInsert.Parameters.AddWithValue("@ShiftParam", item.Shift);
                            cmdInsert.Parameters.AddWithValue("@CapacityKgParam", item.CapacityKG);
                            cmdInsert.Parameters.AddWithValue("@BlockLogsParam", item.BlocksLogs);
                            result = cmdInsert.ExecuteNonQuery();
                            cmdInsert.Parameters.Clear();

                            cmdDelete.Transaction = trans;
                            cmdDelete.Parameters.AddWithValue("@oldProdTimeTableId", oldProductionTimeTableID);
                            cmdDelete.Parameters.AddWithValue("@prodCapId", item.ProductCapacityID);
                            cmdDelete.Parameters.AddWithValue("@salesIdParam", item.SalesID);
                            cmdDelete.Parameters.AddWithValue("@rawProductIdParam", item.RawProductID);
                            cmdDelete.Parameters.AddWithValue("@oldShift", oldShift);
                            int res = cmdDelete.ExecuteNonQuery();
                            cmdDelete.Parameters.Clear();
                        }

                    }
                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("SQL UPDATE COMMAND ERROR OCCURED :  Updating Orders table" + e);
                }
                finally
                {
                    conn.Close();
                }
            }


            return result;
        }

        public static List<Machines> GetNumberOfMachines()
        {
            List<Machines> machineList = new List<Machines>();
            double x = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdSelect = new SqlCommand("SELECT * FROM Machines order by machine_id", conn);

                conn.Open();
                try
                {
                    using (SqlDataReader dr = cmdSelect.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    Machines machines = new Machines(x);
                                    machines.MachineID = Convert.ToInt16(dr["machine_id"]);
                                    machines.MachineName = dr["machine_name"].ToString();
                                    machines.MachineDescription = dr["machine_description"].ToString();
                                    machineList.Add(machines);
                                }
                            }
                        }
                    }

                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL UPDATE COMMAND ERROR OCCURED :  Updating Orders table" + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return machineList;
        }

        public static List<Machines> GetProductionMachines()
        {
            List<Machines> machineList = new List<Machines>();
            double x = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdSelect = new SqlCommand("SELECT * FROM Machines " +
                                                      "WHERE (machine_id = 1 OR machine_id = 2 OR machine_id = 3 OR machine_id = 4 OR machine_id = 5 OR machine_id = 6 OR machine_id = 7 OR machine_id = 8 OR machine_id = 18) " +
                                                      "ORDER BY machine_id", conn);

                conn.Open();
                try
                {
                    using (SqlDataReader dr = cmdSelect.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    Machines machines = new Machines(x);
                                    machines.MachineID = Convert.ToInt16(dr["machine_id"]);
                                    machines.MachineName = dr["machine_name"].ToString();
                                    machines.MachineDescription = dr["machine_description"].ToString();
                                    machineList.Add(machines);
                                }
                            }
                        }
                    }

                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL UPDATE COMMAND ERROR OCCURED :  Updating Orders table" + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return machineList;
        }

        public static ObservableCollection<Machines> GetMachinesByLocation(int id)
        {
            ObservableCollection<Machines> machineList = new ObservableCollection<Machines>();
            double x = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdSelect = new SqlCommand("SELECT Machines.machine_id,Machines.stock_location_id,StockLocation.stock_name,Machines.machine_name,Machines.type,Machines.machine_description " +
                                                      "FROM Machines " +
                                                      "INNER JOIN StockLocation ON Machines.stock_location_id = StockLocation.id " +
                                                      "WHERE Machines.stock_location_id = @LocId " +
                                                      "ORDER BY Machines.machine_name", conn);

                conn.Open();
                try
                {
                    cmdSelect.Parameters.AddWithValue("@LocId", id);
                    using (SqlDataReader dr = cmdSelect.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    Machines machines = new Machines(x);
                                    machines.MachineID = Convert.ToInt16(dr["machine_id"]);
                                    machines.MachineName = dr["machine_name"].ToString();
                                    machines.MachineDescription = dr["machine_description"].ToString();
                                    machines.StockLocation = new StockLocation() { ID = Convert.ToInt16(dr["stock_location_id"]), StockName = dr["stock_name"].ToString() };
                                    machines.MachineString = dr["machine_name"].ToString() + " | " + dr["type"].ToString();
                                    machineList.Add(machines);
                                }
                            }
                        }
                    }

                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL UPDATE COMMAND ERROR OCCURED :  Updating Orders table" + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return machineList;
        }

        public static int InsertGradedStock(List<GradedStock> gradedStockList,int shift,DateTime dateTime,bool addToGradedHistory)
        {
            int result = 0;
          
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmd = new SqlCommand("UPDATE GradedStock SET qty += @Qty WHERE id = @ID", conn);

                SqlCommand cmdInsUpGradedStockHis = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM GradedStockHistory WHERE " +
                                                                   "date=@Date AND grading_id=@GradingID AND shift=@Shift) " +
                                                                   "INSERT INTO GradedStockHistory VALUES(@Date,@GradingID,@Qty,@Shift) " +
                                                                   "ELSE " +
                                                                   "UPDATE GradedStockHistory SET qty+=@Qty WHERE date=@Date AND grading_id=@GradingID AND shift=@Shift", conn);
                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {
                    foreach (var item in gradedStockList)
                    {
                        cmd.Transaction = trans;
                        cmd.Parameters.AddWithValue("@ID", item.ID);
                        cmd.Parameters.AddWithValue("@QTY", item.Qty);
                        result = cmd.ExecuteNonQuery();
                        cmd.Parameters.Clear();
                      
                        if (addToGradedHistory)
                        {
                            cmdInsUpGradedStockHis.Transaction = trans;
                            cmdInsUpGradedStockHis.Parameters.AddWithValue("@Date", dateTime);
                            cmdInsUpGradedStockHis.Parameters.AddWithValue("@GradingID", item.ID);
                            cmdInsUpGradedStockHis.Parameters.AddWithValue("@Shift", shift);
                            cmdInsUpGradedStockHis.Parameters.AddWithValue("@Qty", item.Qty);
                            cmdInsUpGradedStockHis.ExecuteNonQuery();
                            cmdInsUpGradedStockHis.Parameters.Clear();
                        }
                    }                  

                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return result;
        }

        public static int UpdateGradedStock2(List<GradedStock> gradedStockList)
        {
            int result = 0;
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmd = new SqlCommand("UPDATE GradedStock SET qty = @Qty WHERE id = @ID", conn);

                conn.Open();
                try
                {
                    foreach (var item in gradedStockList)
                    {
                        cmd.Parameters.AddWithValue("@ID", item.ID);
                        cmd.Parameters.AddWithValue("@QTY", item.Qty);
                        result += cmd.ExecuteNonQuery();
                        cmd.Parameters.Clear();
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return result;
        }

        public static List<GradedStock> GetGradedStockByID(List<GradedStock> gradedStockList)
        {
            List<GradedStock> gStockList = new List<GradedStock>();
            double x = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdSelect = new SqlCommand("SELECT * FROM GradedStock WHERE id=@ID", conn);

                SqlCommand cmdShredStock = new SqlCommand("SELECT * FROM ShredStock WHERE shred_id=@ID", conn);

                conn.Open();
                try
                {
                    foreach (var item in gradedStockList)
                    {
                        //Graded stock
                        cmdSelect.Parameters.AddWithValue("@ID", item.ID);
                        using (SqlDataReader dr = cmdSelect.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                if (dr.HasRows)
                                {
                                    while (dr.Read())
                                    {
                                        GradedStock gs = new GradedStock();
                                        gs.ID = Convert.ToInt16(dr["id"]);
                                        gs.Qty = Convert.ToDecimal(dr["qty"]);
                                        gStockList.Add(gs);
                                    }
                                }
                            }
                        }
                        cmdSelect.Parameters.Clear();
                        //Shred Stock
                        cmdShredStock.Parameters.AddWithValue("@ID", item.ID);
                        using (SqlDataReader dr = cmdShredStock.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                if (dr.HasRows)
                                {
                                    while (dr.Read())
                                    {
                                        GradedStock gs = new GradedStock();
                                        gs.ID = Convert.ToInt16(dr["shred_id"]);
                                        gs.Qty = Convert.ToDecimal(dr["qty"]);
                                        gStockList.Add(gs);
                                    }
                                }
                            }
                        }
                        cmdShredStock.Parameters.Clear();
                    }

                    

                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL UPDATE COMMAND ERROR OCCURED :  Updating Orders table" + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return gStockList;
        }

        public static int UpdateGradedStock(List<GradedStock> gradedStockList)
        {
            int result = 0;
            decimal qty = 0;
            decimal gSR = 0;
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {

                SqlCommand cmdSelect = new SqlCommand("SELECT * FROM GradedStock WHERE id = @ID", conn);
                SqlCommand cmd = new SqlCommand("UPDATE GradedStock SET qty = @Qty WHERE id = @ID", conn);

                ////CHECK GRADEDSTOCKRESERVE
                //SqlCommand cmdSelectGradedStockReserve = new SqlCommand("SELECT * FROM GradedStockReserve WHERE row_id = @RowID AND grade_id = @GradedId", conn);
                ////INSERT INTO GRADEDSTOCKRESERVE
                //SqlCommand cmdGradedStockReserve = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM GradedStockReserve WHERE row_id = @RowID AND grade_id=@GradedId) " +
                //                                                  "INSERT INTO GradedStockReserve VALUES(@RowID,@GradedId,@ReserveQty) " +
                //                                                  "ELSE " +
                //                                                  "UPDATE GradedStockReserve SET reserve_qty=@ReserveQty WHERE row_id = @RowID AND grade_id=@GradedId", conn);



                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {
                    foreach (var item in gradedStockList)
                    {
                        cmdSelect.Transaction = trans;
                        cmdSelect.Parameters.AddWithValue("@ID", item.ID);

                        using (SqlDataReader dr = cmdSelect.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                if (dr.HasRows)
                                {
                                    while (dr.Read())
                                    {
                                        qty += Convert.ToDecimal(dr["qty"]);
                                    }
                                    qty -= item.Qty;
                                }
                                else
                                {
                                    qty = item.Qty;

                                }
                                if (qty < 0)
                                {
                                    qty = 0;
                                }
                            }
                        }
                        cmdSelect.Parameters.Clear();

                        cmd.Transaction = trans;
                        cmd.Parameters.AddWithValue("@ID", item.ID);
                        cmd.Parameters.AddWithValue("@QTY", qty);
                        result = cmd.ExecuteNonQuery();
                        cmd.Parameters.Clear();
                        qty = 0;
                    }

                    //foreach (var item in gradedStockList)
                    //{
                    //    cmdSelectGradedStockReserve.Transaction = trans;
                    //    cmdSelectGradedStockReserve.Parameters.AddWithValue("@GradedId", item.ID);
                    //    cmdSelectGradedStockReserve.Parameters.AddWithValue("@RowID", item.RowID);

                    //    using (SqlDataReader dr = cmdSelectGradedStockReserve.ExecuteReader())
                    //    {
                    //        if (dr != null)
                    //        {
                    //            if (dr.HasRows)
                    //            {
                    //                while (dr.Read())
                    //                {
                    //                    gSR += Convert.ToDecimal(dr["reserve_qty"]);
                    //                }
                    //                gSR += item.Qty;
                    //            }
                    //            else
                    //            {
                    //                gSR = item.Qty;
                    //            }

                    //        }
                    //    }
                    //    cmdSelectGradedStockReserve.Parameters.Clear();

                    //    cmdGradedStockReserve.Transaction = trans;
                    //    cmdGradedStockReserve.Parameters.AddWithValue("@RowID", item.RowID);
                    //    cmdGradedStockReserve.Parameters.AddWithValue("@GradedId", item.ID);
                    //    cmdGradedStockReserve.Parameters.AddWithValue("@ReserveQty", gSR);
                    //    result = cmdGradedStockReserve.ExecuteNonQuery();
                    //    cmdGradedStockReserve.Parameters.Clear();
                    //}

                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return result;
        }

        public static int ReAllocateToGradedStock(string rowId)
        {
            int result = 0;
            List<GradedStock> gsList = new List<GradedStock>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdSelectGSR = new SqlCommand("SELECT * FROM GradedStockReserve WHERE row_id = @RowID", conn);
                SqlCommand cmdSelect = new SqlCommand("SELECT COUNT(*) FROM GradedStockReserve WHERE row_id = @RowID", conn);
                SqlCommand cmdDelete = new SqlCommand("DELETE from GradedStockReserve where row_id = @RowID", conn);

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {
                    cmdSelectGSR.Transaction = trans;
                    cmdSelectGSR.Parameters.AddWithValue("@RowID", rowId);
                    using (SqlDataReader dr = cmdSelectGSR.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    GradedStock gs = new GradedStock();
                                    gs.ID = Convert.ToInt64(dr["grade_id"]);
                                    gs.Qty = Convert.ToDecimal(dr["reserve_qty"]);
                                    gsList.Add(gs);
                                }
                            }
                        }
                    }

                    if (gsList.Count != 0)
                    {
                        int res = InsertGradedStock(gsList,0,DateTime.Now,false);
                        if (res != 0)
                        {
                            cmdDelete.Transaction = trans;
                            cmdDelete.Parameters.AddWithValue("@RowID", rowId);
                            result = cmdDelete.ExecuteNonQuery();
                        }
                    }

                    //cmdSelect.Transaction = trans;
                    //cmdSelect.Parameters.AddWithValue("@RowID", rowId);
                    //using (SqlDataReader dr = cmdSelect.ExecuteReader())
                    //{
                    //    if (dr != null)
                    //    {
                    //        if (dr.HasRows)
                    //        {
                    //            while (dr.Read())
                    //            {
                    //                qty += Convert.ToDecimal(dr["reserve_qty"]);
                    //            }                             
                    //        }                          
                    //    }
                    //}

                    //if (qty != 0)
                    //{

                    //}

                    //cmdDelete.Transaction = trans;
                    //cmdDelete.Parameters.AddWithValue("@RowID", rowId);
                    //result = cmdDelete.ExecuteNonQuery();                      


                    //if (result != 0)
                    //{

                    //}
                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("SQL SELECT QUOTES ERROR : " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return result;
        }

        public static List<RawStock> CheckMinimumStock()
        {
            //NF = Not Filling
            //SF = Stock Filling
            List<RawStock> rawStockList = new List<RawStock>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdSelect = new SqlCommand("SELECT * FROM RawStock " +
                                                     "WHERE rs_qty < rs_re_order_qty AND status <> @Status", conn);

                conn.Open();
                try
                {
                    cmdSelect.Parameters.AddWithValue("@Status", "SF");
                    using (SqlDataReader dr = cmdSelect.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    RawStock rs = new RawStock();
                                    rs.RawProductID = Convert.ToInt16(dr["rs_raw_product_id"]);
                                    rs.Qty = Convert.ToDecimal(dr["rs_re_order_qty"]) - Convert.ToDecimal(dr["rs_qty"]);
                                    rawStockList.Add(rs);
                                }

                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return rawStockList;
        }

        public static List<StockAvailability> CheckRawStock(List<SlitPeel> slitPeelList)
        {
            int rows = 0;
            decimal totBlockLog = 0;
            decimal remaining = 0;
            decimal qtySlitPeel = 0;
            List<StockAvailability> saList = new List<StockAvailability>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdSelect = new SqlCommand("SELECT rs_qty FROM RawStock " +
                                                      "WHERE rs_raw_product_id = @rawProductIdParam", conn);

                SqlCommand cmdUpdate = new SqlCommand("UPDATE RawStock SET rs_qty=@qtyParam WHERE rs_raw_product_id = @productIdParam", conn);

                //Insert/Update RawStockReserve
                SqlCommand cmdInsUp = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM RawStockReserve WHERE " +
                                                     "sales_id =@SalesId AND raw_product_id =@RawproductId AND product_id = @ProductId) " +
                                                     "INSERT INTO RawStockReserve VALUES(@SalesId,@RawproductId,@ProductId,@BlockSLogs) " +
                                                     "ELSE " +
                                                     "UPDATE RawStockReserve SET qty=@BlockSLogs WHERE sales_id =@SalesId AND raw_product_id =@RawproductId AND product_id = @ProductId", conn);


                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {

                    foreach (var item in slitPeelList)
                    {
                        cmdSelect.Transaction = trans;
                        cmdSelect.Parameters.AddWithValue("@rawProductIdParam", item.Product.RawProduct.RawProductID);

                        using (SqlDataReader dr = cmdSelect.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                if (dr.HasRows)
                                {
                                    while (dr.Read())
                                    {
                                        totBlockLog = Convert.ToDecimal(dr["rs_qty"]);
                                    }

                                    if (totBlockLog >= item.OriginalBlockLogs)
                                    {
                                        remaining = 0;
                                        qtySlitPeel = item.OriginalBlockLogs;
                                    }
                                    else
                                    {
                                        remaining = item.OriginalBlockLogs - totBlockLog;
                                        qtySlitPeel = totBlockLog;
                                    }

                                    totBlockLog -= item.OriginalBlockLogs;
                                }
                                if (totBlockLog < 0)
                                {
                                    totBlockLog = 0;
                                }
                            }
                        }
                        cmdSelect.Parameters.Clear();

                        StockAvailability sa = new StockAvailability();
                        //sa.Product = new Product() { ProductID = item.Product.ProductID, ProductCode = item.Product.ProductCode, RawProduct = new RawProduct() { RawProductID = item.Product.RawProductID }, MaxItemsPer = item.Product.MaxItemsPer, ProductUnit = item.Product.ProductUnit, ProductPrice = item.Product.ProductPrice };
                        sa.QtyOriginal = item.OriginalQty;
                        //sa.QtyInStock = qtySlitPeel * item.Product.MaxItemsPer;
                        sa.BlkLogOriginal = item.OriginalBlockLogs;
                        sa.BlkLogInStock = qtySlitPeel;
                        sa.OrdertypeId = item.OrdertypeID;
                        sa.Type = item.Type;
                        saList.Add(sa);

                        //item.BlockLogQty = remaining;
                        //item.QuantityCompleted = qtySlitPeel;

                        //Update RawStock
                        cmdUpdate.Transaction = trans;
                        cmdUpdate.Parameters.AddWithValue("@productIdParam", item.Product.RawProduct.RawProductID);
                        cmdUpdate.Parameters.AddWithValue("@qtyParam", totBlockLog);
                        rows = cmdUpdate.ExecuteNonQuery();
                        cmdUpdate.Parameters.Clear();

                        if (qtySlitPeel > 0)
                        {
                            //SlitPeelNoStock - Update/Insert
                            cmdInsUp.Transaction = trans;
                            cmdInsUp.Parameters.AddWithValue("@SalesId", item.SalesOrderID);
                            cmdInsUp.Parameters.AddWithValue("@RawproductId", item.Product.RawProduct.RawProductID);
                            cmdInsUp.Parameters.AddWithValue("@ProductId", item.Product.ProductID);
                            cmdInsUp.Parameters.AddWithValue("@BlockSLogs", qtySlitPeel);
                            cmdInsUp.ExecuteNonQuery();
                            cmdInsUp.Parameters.Clear();
                        }
                    }

                    trans.Commit();

                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return saList;
        }

        //public static int AddToSlitPeel()
        //{
        //    int result = 0;

        //    using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
        //    {
        //        try
        //        {

        //        }
        //        catch (Exception e)
        //        {
        //            Debug.WriteLine("Error: " + e);
        //        }
        //        finally
        //        {
        //            conn.Close();
        //        }

        //    }


        //    return result;
        //}

        public static List<RawProductMachine> GetMachineIdByRawProdId(int rawProdId)
        {
            List<RawProductMachine> rawProdMaList = new List<RawProductMachine>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT * FROM RawProductMachine WHERE raw_product_id = @RawProductID", conn))
                    {
                        cmdGetData.Parameters.AddWithValue("@RawProductID", rawProdId);

                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    RawProductMachine rawProductMachine = new RawProductMachine();
                                    rawProductMachine.GradingMachineID = Convert.ToInt16(dr["grading_machine_id"]);
                                    rawProductMachine.MixingMachineID = Convert.ToInt16(dr["mixing_machine_id"]);
                                    rawProductMachine.SlitPeelMachineID = Convert.ToInt16(dr["slit_peel_machine_id"]);
                                    rawProductMachine.ReRollingMachineID = Convert.ToInt16(dr["re_rolling_machine_id"]);
                                    rawProdMaList.Add(rawProductMachine);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading Raw Product Machine: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return rawProdMaList;
        }

        public static List<RawProductMachine> GetAllRawProductMachines()
        {
            List<RawProductMachine> rawProdMaList = new List<RawProductMachine>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT * FROM RawProductMachine", conn))
                    {
                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    RawProductMachine rawProductMachine = new RawProductMachine();
                                    rawProductMachine.RawProductID = Convert.ToInt16(dr["raw_product_id"]);
                                    rawProductMachine.GradingMachineID = Convert.ToInt16(dr["grading_machine_id"]);
                                    rawProductMachine.MixingMachineID = Convert.ToInt16(dr["mixing_machine_id"]);
                                    rawProductMachine.SlitPeelMachineID = Convert.ToInt16(dr["slit_peel_machine_id"]);
                                    rawProductMachine.ReRollingMachineID = Convert.ToInt16(dr["re_rolling_machine_id"]);
                                    rawProdMaList.Add(rawProductMachine);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading Raw Product Machine: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return rawProdMaList;
        }

        public static List<SlitPeel> RouteProducts(List<StockAvailability> stockAvailabilitylist, int SalesId)
        {
            decimal price = 0;
            List<SlitPeel> SlitPeelList = new List<SlitPeel>();
            List<GradingProduction> gradingProductionlist = new List<GradingProduction>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT ProductPrice, max_items_per,ProductUnit FROM Products WHERE ProductID = @ProductID", conn))
                    {
                        foreach (var item in stockAvailabilitylist)
                        {
                            SlitPeel slitPeel = new SlitPeel();
                            if (item.QtyInStock != 0)
                            {

                                cmdGetData.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                                price = (decimal)cmdGetData.ExecuteScalar();

                                using (SqlDataReader dr = cmdGetData.ExecuteReader())
                                {
                                    if (dr != null)
                                    {
                                        while (dr.Read())
                                        {

                                            slitPeel.SalesOrderID = SalesId;
                                            slitPeel.RawProductID = item.Product.RawProduct.RawProductID;
                                            slitPeel.ProductID = item.Product.ProductID;
                                            slitPeel.OriginalQty = item.QtyOriginal;
                                            //slitPeel.QtyToMake = item.BlkLogInStock *item.Product.MaxItemsPer;
                                            slitPeel.QtyMade = 0;
                                            slitPeel.ProductPrice = Convert.ToDecimal(dr["ProductPrice"]);
                                            slitPeel.ProductUnit = dr["ProductUnit"].ToString();
                                            slitPeel.MaxItemsPer = Convert.ToDecimal(dr["max_items_per"]);
                                            slitPeel.DollarValue = Math.Round((item.BlkLogInStock * Convert.ToDecimal(dr["max_items_per"])) * Convert.ToDecimal(dr["ProductPrice"]), 4);
                                            slitPeel.OrdertypeID = item.OrdertypeId;
                                            slitPeel.Type = item.Type;
                                        }
                                    }
                                }
                                cmdGetData.Parameters.Clear();
                            }
                            if (item.QtyOriginal > item.QtyInStock)
                            {
                                //Add to Grading
                                slitPeel.GradingProduction = new List<GradingProduction>() 
                                { 
                                    new GradingProduction() 
                                    { 
                                        Product = new Product() 
                                        { 
                                            //ProductID = item.Product.ProductID, ProductCode = item.Product.ProductCode, RawProductID = item.Product.RawProductID, MaxItemsPer = item.Product.MaxItemsPer 
                                        },
                                        QtyOriginal = item.QtyOriginal,
                                        QtyToDo = item.QtyOriginal - item.QtyInStock,
                                        OrderTypeID = item.OrdertypeId
                                    }
                                };
                            }
                            SlitPeelList.Add(slitPeel);
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return SlitPeelList;
        }

        public static decimal GetCurrentShiftDollarValue(int prodTimeTableId, int shift)
        {
            decimal price = 0;
            List<SlitPeel> SlitPeelList = new List<SlitPeel>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdGetData = new SqlCommand("SELECT dollar_value FROM SlittingOrders WHERE prod_timetable_id = @ProdTimeTableID AND shift= @Shift", conn);

                conn.Open();

                try
                {
                    cmdGetData.Parameters.AddWithValue("@ProdTimeTableID", prodTimeTableId);
                    cmdGetData.Parameters.AddWithValue("@Shift", shift);

                    using (SqlDataReader dr = cmdGetData.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    price += Convert.ToDecimal(dr["dollar_value"]);
                                }

                            }
                        }
                    }


                    //using (SqlCommand cmdGetData = new SqlCommand("SELECT dollar_value FROM SlitPeel WHERE prod_time_table_id = @ProdTimeTableID AND shift= @Shift", conn))
                    //{

                    //    cmdGetData.Parameters.AddWithValue("@ProdTimeTableID", prodTimeTableId);
                    //    cmdGetData.Parameters.AddWithValue("@Shift", shift);
                    //    price += (decimal)cmdGetData.ExecuteScalar();

                    //}
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return price;
        }


        public static decimal GetCurrentShiftDollarValueByOrderType(int prodTimeTableId, int shift, int orderType)
        {
            decimal price = 0;
            List<SlitPeel> SlitPeelList = new List<SlitPeel>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdGetData = new SqlCommand("SELECT dollar_value FROM SlittingOrders WHERE prod_timetable_id = @ProdTimeTableID AND shift= @Shift AND order_type=@OrderType", conn);

                conn.Open();

                try
                {
                    cmdGetData.Parameters.AddWithValue("@ProdTimeTableID", prodTimeTableId);
                    cmdGetData.Parameters.AddWithValue("@Shift", shift);
                    cmdGetData.Parameters.AddWithValue("@OrderType", orderType);

                    using (SqlDataReader dr = cmdGetData.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    price += Convert.ToDecimal(dr["dollar_value"]);
                                }

                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return price;
        }

        public static decimal GetPeelingCurrentShiftDollarValue(int prodTimeTableId, int shift)
        {
            decimal price = 0;
            List<SlitPeel> SlitPeelList = new List<SlitPeel>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdGetData = new SqlCommand("SELECT dollar_value FROM PeelingOrders WHERE prod_timetable_id = @ProdTimeTableID AND shift= @Shift", conn);

                conn.Open();

                try
                {
                    cmdGetData.Parameters.AddWithValue("@ProdTimeTableID", prodTimeTableId);
                    cmdGetData.Parameters.AddWithValue("@Shift", shift);

                    using (SqlDataReader dr = cmdGetData.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    price += Convert.ToDecimal(dr["dollar_value"]);
                                }

                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return price;
        }


        public static List<PeelingOrder> GetPeelingOrderByID(Int32 id)
        {
            List<PeelingOrder> peelingOrderList = new List<PeelingOrder>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdGetData = new SqlCommand("SELECT * FROM PeelingOrders WHERE id = @Id", conn);

                conn.Open();

                try
                {
                    cmdGetData.Parameters.AddWithValue("@Id", id);

                    using (SqlDataReader dr = cmdGetData.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    PeelingOrder po = new PeelingOrder();
                                    po.ID = Convert.ToInt32(dr["id"]);
                                    po.ProdTimetableID = Convert.ToInt32(dr["prod_timetable_id"]);
                                    po.Order = new Order() { OrderNo = Convert.ToInt32(dr["order_no"]), OrderType = Convert.ToInt16(dr["order_type"]) };
                                    po.Product = new Product() { ProductID = Convert.ToInt16(dr["product_id"]), RawProduct = new RawProduct() { RawProductID = Convert.ToInt16(dr["raw_product_id"]) } };
                                    po.Shift = new Shift() { ShiftID = Convert.ToInt16(dr["product_id"]) };
                                    po.Qty = Convert.ToDecimal(dr["qty"]);
                                    po.Logs = Convert.ToDecimal(dr["logs"]);
                                    po.DollarValue = Convert.ToDecimal(dr["dollar_value"]);
                                    po.IsReRollingReq = Convert.ToBoolean(dr["is_re_rolling_req"]);
                                    peelingOrderList.Add(po);
                                }

                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return peelingOrderList;
        }


        public static List<PeelingOrder> GetAllPeelingOrderByID(Int64 orderNo, int productId, int rawProductId)
        {
            List<PeelingOrder> peelingOrderList = new List<PeelingOrder>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdGetData = new SqlCommand("SELECT * FROM PeelingOrders WHERE order_no = @OrderNo AND product_id=@ProductID AND raw_product_id=@RawProductID", conn);

                conn.Open();

                try
                {
                    cmdGetData.Parameters.AddWithValue("@OrderNo", orderNo);
                    cmdGetData.Parameters.AddWithValue("@ProductID", productId);
                    cmdGetData.Parameters.AddWithValue("@RawProductID", rawProductId);

                    using (SqlDataReader dr = cmdGetData.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    PeelingOrder po = new PeelingOrder();
                                    po.ID = Convert.ToInt32(dr["id"]);
                                    po.ProdTimetableID = Convert.ToInt32(dr["prod_timetable_id"]);
                                    po.Order = new Order() { OrderNo = Convert.ToInt32(dr["order_no"]), OrderType = Convert.ToInt16(dr["order_type"]) };
                                    po.Product = new Product() { ProductID = Convert.ToInt16(dr["product_id"]), RawProduct = new RawProduct() { RawProductID = Convert.ToInt16(dr["raw_product_id"]) } };
                                    po.Shift = new Shift() { ShiftID = Convert.ToInt16(dr["product_id"]) };
                                    po.Qty = Convert.ToDecimal(dr["qty"]);
                                    po.Logs = Convert.ToDecimal(dr["logs"]);
                                    po.DollarValue = Convert.ToDecimal(dr["dollar_value"]);
                                    po.IsReRollingReq = Convert.ToBoolean(dr["is_re_rolling_req"]);
                                    peelingOrderList.Add(po);
                                }

                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return peelingOrderList;
        }


        public static List<ReRollingOrder> GetReRollingOrdersByID(Int64 orderNo, int productId, int rawProductId)
        {
            List<ReRollingOrder> reRollingOrderList = new List<ReRollingOrder>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdGetData = new SqlCommand("SELECT * FROM ReRollingOrders WHERE order_no = @OrderNo AND product_id =@ProductID AND raw_product_id=@RawProductID", conn);

                conn.Open();

                try
                {
                    cmdGetData.Parameters.AddWithValue("@OrderNo", orderNo);
                    cmdGetData.Parameters.AddWithValue("@ProductID", productId);
                    cmdGetData.Parameters.AddWithValue("@RawProductID", rawProductId);


                    using (SqlDataReader dr = cmdGetData.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    ReRollingOrder rro = new ReRollingOrder();
                                    rro.ID = Convert.ToInt32(dr["id"]);
                                    rro.ProdTimetableID = Convert.ToInt32(dr["prod_timetable_id"]);
                                    rro.Order = new Order() { OrderNo = Convert.ToInt32(dr["order_no"]), OrderType = Convert.ToInt16(dr["order_type"]) };
                                    rro.Product = new Product() { ProductID = Convert.ToInt16(dr["product_id"]), RawProduct = new RawProduct() { RawProductID = Convert.ToInt16(dr["raw_product_id"]) } };
                                    rro.Shift = new Shift() { ShiftID = Convert.ToInt16(dr["product_id"]) };
                                    rro.Rolls = Convert.ToDecimal(dr["rolls"]);
                                    rro.DollarValue = Convert.ToDecimal(dr["dollar_value"]);
                                    rro.Qty = Convert.ToDecimal(dr["qty"]);
                                    reRollingOrderList.Add(rro);
                                }

                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return reRollingOrderList;
        }


        public static decimal GetSumOfReRollingOrders(Int64 orderNo, int productId, int rawProductId, string status)
        {
            decimal rolls = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdGetData = new SqlCommand("SELECT * FROM ReRollingOrders " +
                                                       "WHERE order_no = @OrderNo AND product_id =@ProductID AND raw_product_id=@RawProductID AND status=@Status", conn);

                conn.Open();

                try
                {
                    cmdGetData.Parameters.AddWithValue("@OrderNo", orderNo);
                    cmdGetData.Parameters.AddWithValue("@ProductID", productId);
                    cmdGetData.Parameters.AddWithValue("@RawProductID", rawProductId);
                    cmdGetData.Parameters.AddWithValue("@Status", status);

                    using (SqlDataReader dr = cmdGetData.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    rolls += Convert.ToDecimal(dr["rolls"]);
                                }

                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return rolls;
        }

        public static decimal GetReRollingCurrentShiftDollarValue(int prodTimeTableId, int shift)
        {
            decimal price = 0;
            List<SlitPeel> SlitPeelList = new List<SlitPeel>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdGetData = new SqlCommand("SELECT dollar_value FROM ReRollingOrders WHERE prod_timetable_id = @ProdTimeTableID AND shift= @Shift", conn);

                conn.Open();

                try
                {
                    cmdGetData.Parameters.AddWithValue("@ProdTimeTableID", prodTimeTableId);
                    cmdGetData.Parameters.AddWithValue("@Shift", shift);

                    using (SqlDataReader dr = cmdGetData.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    price += Convert.ToDecimal(dr["dollar_value"]);
                                }

                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return price;
        }

        public static decimal GetSlitPeelMaxCapacity(int prodTimeTableId, int shift, int machineId)
        {
            decimal price = 0;
            List<SlitPeel> SlitPeelList = new List<SlitPeel>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT dollar_value FROM SlittingCapacity WHERE prod_timetable_id = @ProdTimeTableID AND shift= @Shift AND machine_id=@MachineID", conn))
                    {

                        cmdGetData.Parameters.AddWithValue("@ProdTimeTableID", prodTimeTableId);
                        cmdGetData.Parameters.AddWithValue("@Shift", shift);
                        cmdGetData.Parameters.AddWithValue("@MachineID", machineId);
                        price = (decimal)cmdGetData.ExecuteScalar();

                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return price;
        }

        public static decimal GetPeelingMaxCapacity(int prodTimeTableId, int shift, int machineId)
        {
            decimal price = 0;
            List<SlitPeel> SlitPeelList = new List<SlitPeel>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT dollar_value FROM PeelingCapacity WHERE prod_timetable_id = @ProdTimeTableID AND shift= @Shift AND machine_id=@MachineID", conn))
                    {

                        cmdGetData.Parameters.AddWithValue("@ProdTimeTableID", prodTimeTableId);
                        cmdGetData.Parameters.AddWithValue("@Shift", shift);
                        cmdGetData.Parameters.AddWithValue("@MachineID", machineId);
                        price = (decimal)cmdGetData.ExecuteScalar();

                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return price;
        }


        public static decimal GetReRollingMaxCapacity(int prodTimeTableId, int shift, int machineId)
        {
            decimal price = 0;
            List<SlitPeel> SlitPeelList = new List<SlitPeel>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT dollar_value FROM ReRollingCapacity WHERE prod_timetable_id = @ProdTimeTableID AND shift= @Shift AND machine_id=@MachineID", conn))
                    {

                        cmdGetData.Parameters.AddWithValue("@ProdTimeTableID", prodTimeTableId);
                        cmdGetData.Parameters.AddWithValue("@Shift", shift);
                        cmdGetData.Parameters.AddWithValue("@MachineID", machineId);
                        price = (decimal)cmdGetData.ExecuteScalar();

                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return price;
        }


        public static int AddToSlitting(List<SlittingOrder> slitPeelList)
        {
            int rowCount = 0;
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdInsUpRSR = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM RawStockReserve WHERE " +
                                                         "sales_id =@SalesId AND raw_product_id =@RawproductId AND product_id = @ProductId) " +
                                                         "INSERT INTO RawStockReserve VALUES(@SalesId,@RawproductId,@ProductId,@BlockSLogs,@Qty) " +
                                                         "ELSE " +
                                                         "UPDATE RawStockReserve SET blocks_logs+=@BlockSLogs,qty+=@Qty WHERE sales_id =@SalesId AND raw_product_id =@RawproductId AND product_id = @ProductId", conn);


                SqlCommand cmdInsUp = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM SlittingOrders " +
                                                     "WHERE prod_timetable_id =@ProdTimeTableID AND order_no=@OrderNo AND product_id = @ProductID AND raw_product_id =@RawProdId AND shift=@Shift AND order_type=@OrderType) " +
                                                     "INSERT INTO SlittingOrders VALUES(@ProdTimeTableID,@OrderNo,@ProductID,@RawProdId,@Shift,@Qty,@Blocks,@DollarValue,@OrderType,@Status) " +
                                                     "ELSE " +
                                                     "UPDATE SlittingOrders SET qty+=@Qty,blocks+=@Blocks,dollar_value+=@DollarValue " +
                                                     "WHERE prod_timetable_id =@ProdTimeTableID AND order_no=@OrderNo AND product_id = @ProductID AND raw_product_id =@RawProdId AND shift=@Shift AND order_type=@OrderType", conn);

                SqlCommand cmdUpdateSlittingStatus = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM SlittingStatus " +
                                                     "WHERE order_no =@OrderNo AND product_id = @ProductID AND raw_product_id =@RawProdId) " +
                                                     "INSERT INTO SlittingStatus VALUES(@OrderNo,@RawProdId,@ProductID,@BlocksPending,@BlocksCompleted,@TilesCompleted) " +
                                                     "ELSE " +
                                                     "UPDATE SlittingStatus SET blocks_pending+=@BlocksPending " +
                                                     "WHERE order_no =@OrderNo AND product_id = @ProductID AND raw_product_id =@RawProdId", conn);

                //SqlCommand cmdDeleteSlittingOrder = new SqlCommand("DELETE FROM SlittingOrders", conn);

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {

                    //if (deleteSlittingOrder)
                    //{
                    //    cmdDeleteSlittingOrder.Transaction = trans;
                    //    cmdDeleteSlittingOrder.ExecuteNonQuery();
                    //    cmdDeleteSlittingOrder.Parameters.Clear();
                    //}

                    foreach (var item in slitPeelList)
                    {
                        cmdInsUpRSR.Transaction = trans;
                        cmdInsUpRSR.Parameters.AddWithValue("@SalesId", item.Order.OrderNo);
                        cmdInsUpRSR.Parameters.AddWithValue("@RawproductId", item.Product.RawProduct.RawProductID);
                        cmdInsUpRSR.Parameters.AddWithValue("@ProductId", item.Product.ProductID);
                        cmdInsUpRSR.Parameters.AddWithValue("@BlockSLogs", item.Blocks);
                        cmdInsUpRSR.Parameters.AddWithValue("@Qty", item.Qty);
                        cmdInsUpRSR.ExecuteNonQuery();
                        cmdInsUpRSR.Parameters.Clear();

                        cmdInsUp.Transaction = trans;
                        cmdInsUp.Parameters.AddWithValue("@ProdTimeTableID", item.ProdTimetableID);
                        cmdInsUp.Parameters.AddWithValue("@OrderNo", item.Order.OrderNo);
                        cmdInsUp.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                        cmdInsUp.Parameters.AddWithValue("@RawProdId", item.Product.RawProduct.RawProductID);
                        cmdInsUp.Parameters.AddWithValue("@Shift", item.Shift.ShiftID);
                        cmdInsUp.Parameters.AddWithValue("@Qty", item.Qty);
                        cmdInsUp.Parameters.AddWithValue("@Blocks", item.Blocks);
                        cmdInsUp.Parameters.AddWithValue("@DollarValue", item.DollarValue);
                        cmdInsUp.Parameters.AddWithValue("@OrderType", item.Order.OrderType);
                        cmdInsUp.Parameters.AddWithValue("@Status", "Slitting");
                        rowCount = cmdInsUp.ExecuteNonQuery();
                        cmdInsUp.Parameters.Clear();

                        //Slitting Status
                        cmdUpdateSlittingStatus.Transaction = trans;
                        cmdUpdateSlittingStatus.Parameters.AddWithValue("@OrderNo", item.Order.OrderNo);
                        cmdUpdateSlittingStatus.Parameters.AddWithValue("@RawProdId", item.Product.RawProduct.RawProductID);
                        cmdUpdateSlittingStatus.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                        cmdUpdateSlittingStatus.Parameters.AddWithValue("@BlocksPending", item.Blocks);
                        cmdUpdateSlittingStatus.Parameters.AddWithValue("@BlocksCompleted", 0);
                        cmdUpdateSlittingStatus.Parameters.AddWithValue("@TilesCompleted", 0);
                        cmdUpdateSlittingStatus.ExecuteNonQuery();
                        cmdUpdateSlittingStatus.Parameters.Clear();
                    }
                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("SQL ADDING COMMAND ERROR OCCURED :  Adding to Slit Peel table" + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return rowCount;
        }

        public static int AddToReRolling(List<ReRollingOrder> reRollingList)
        {
            int rowCount = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {

                //SqlCommand cmdInsUp = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM ReRollingOrders " +
                //                                     "WHERE prod_timetable_id =@ProdTimeTableID AND order_no=@OrderNo AND product_id = @ProductID AND raw_product_id =@RawProdId AND shift=@Shift AND order_type=@OrderType) " +
                //                                     "INSERT INTO ReRollingOrders VALUES(@ProdTimeTableID,@OrderNo,@ProductID,@RawProdId,@Shift,@Qty,@Rolls,@DollarValue,@OrderType,@Status) " +
                //                                     "ELSE " +
                //                                     "UPDATE ReRollingOrders SET qty=@Qty,rolls+=@Rolls,dollar_value+=@DollarValue " +
                //                                     "WHERE prod_timetable_id =@ProdTimeTableID AND order_no=@OrderNo AND product_id = @ProductID AND raw_product_id =@RawProdId AND shift=@Shift AND order_type=@OrderType", conn);

                SqlCommand cmdInsUp = new SqlCommand("INSERT INTO ReRollingOrders(prod_timetable_id,order_no,product_id,raw_product_id,shift,qty,rolls,dollar_value,order_type,status) " +
                                                     "VALUES(@ProdTimeTableID,@OrderNo,@ProductID,@RawProdId,@Shift,@Qty,@Rolls,@DollarValue,@OrderType,@Status)", conn);




                //    //SqlCommand cmdInsertToNotes = new SqlCommand("INSERT INTO Notes(sales_order_id, type, notes) " +
                //    //                                              "VALUES (@SalesOrderID,@Type,@Notes)", conn);
                conn.Open();
                try
                {
                    foreach (var item in reRollingList)
                    {

                        cmdInsUp.Parameters.AddWithValue("@ProdTimeTableID", item.ProdTimetableID);
                        cmdInsUp.Parameters.AddWithValue("@OrderNo", item.Order.OrderNo);
                        cmdInsUp.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                        cmdInsUp.Parameters.AddWithValue("@RawProdId", item.Product.RawProduct.RawProductID);
                        cmdInsUp.Parameters.AddWithValue("@Shift", item.Shift.ShiftID);
                        cmdInsUp.Parameters.AddWithValue("@Qty", 0);
                        cmdInsUp.Parameters.AddWithValue("@Rolls", item.Rolls);
                        cmdInsUp.Parameters.AddWithValue("@DollarValue", item.DollarValue);
                        cmdInsUp.Parameters.AddWithValue("@OrderType", item.Order.OrderType);
                        cmdInsUp.Parameters.AddWithValue("@Status", "ReRolling");
                        rowCount = cmdInsUp.ExecuteNonQuery();
                        cmdInsUp.Parameters.Clear();
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL ADDING COMMAND ERROR OCCURED :  Adding to ReRolling table" + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return rowCount;
        }

        public static int AddToPeeling(List<PeelingOrder> peelingList)
        {
            int rowCount = 0;
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdInsUpRSR = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM RawStockReserve WHERE " +
                                                         "sales_id =@SalesId AND raw_product_id =@RawproductId AND product_id = @ProductId) " +
                                                         "INSERT INTO RawStockReserve VALUES(@SalesId,@RawproductId,@ProductId,@BlockSLogs,@Qty) " +
                                                         "ELSE " +
                                                         "UPDATE RawStockReserve SET blocks_logs+=@BlockSLogs,qty=@Qty WHERE sales_id =@SalesId AND raw_product_id =@RawproductId AND product_id = @ProductId", conn);


                SqlCommand cmdInsUp = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM PeelingOrders " +
                                                     "WHERE prod_timetable_id =@ProdTimeTableID AND order_no=@OrderNo AND product_id = @ProductID AND raw_product_id =@RawProdId AND shift=@Shift AND order_type=@OrderType AND is_re_rolling_req=@ReRolling) " +
                                                     "INSERT INTO PeelingOrders VALUES(@ProdTimeTableID,@OrderNo,@ProductID,@RawProdId,@Shift,@Qty,@Logs,@DollarValue,@OrderType,@Status,@ReRolling) " +
                                                     "ELSE " +
                                                     "UPDATE PeelingOrders SET qty+=@Qty,logs+=@Logs,dollar_value+=@DollarValue " +
                                                     "WHERE prod_timetable_id =@ProdTimeTableID AND order_no=@OrderNo AND product_id = @ProductID AND raw_product_id =@RawProdId AND shift=@Shift AND order_type=@OrderType AND is_re_rolling_req=@ReRolling", conn);

                SqlCommand cmdUpdatePeelingStatus = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM PeelingStatus " +
                                                       "WHERE order_no =@OrderNo AND product_id = @ProductID AND raw_product_id =@RawProdId) " +
                                                       "INSERT INTO PeelingStatus VALUES(@OrderNo,@RawProdId,@ProductID,@LogsPending,@LogsCompleted,@BulkRollsCompleted) " +
                                                       "ELSE " +
                                                       "UPDATE PeelingStatus SET logs_pending+=@LogsPending " +
                                                       "WHERE order_no =@OrderNo AND product_id = @ProductID AND raw_product_id =@RawProdId", conn);


                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {
                    foreach (var item in peelingList)
                    {
                        cmdInsUpRSR.Transaction = trans;
                        cmdInsUpRSR.Parameters.AddWithValue("@SalesId", item.Order.OrderNo);
                        cmdInsUpRSR.Parameters.AddWithValue("@RawproductId", item.Product.RawProduct.RawProductID);
                        cmdInsUpRSR.Parameters.AddWithValue("@ProductId", item.Product.ProductID);
                        cmdInsUpRSR.Parameters.AddWithValue("@BlockSLogs", item.Logs);
                        cmdInsUpRSR.Parameters.AddWithValue("@Qty", 0);
                        cmdInsUpRSR.ExecuteNonQuery();
                        cmdInsUpRSR.Parameters.Clear();

                        cmdInsUp.Transaction = trans;
                        cmdInsUp.Parameters.AddWithValue("@ProdTimeTableID", item.ProdTimetableID);
                        cmdInsUp.Parameters.AddWithValue("@OrderNo", item.Order.OrderNo);
                        cmdInsUp.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                        cmdInsUp.Parameters.AddWithValue("@RawProdId", item.Product.RawProduct.RawProductID);
                        cmdInsUp.Parameters.AddWithValue("@Shift", item.Shift.ShiftID);
                        cmdInsUp.Parameters.AddWithValue("@Qty", item.Qty);
                        cmdInsUp.Parameters.AddWithValue("@Logs", item.Logs);
                        cmdInsUp.Parameters.AddWithValue("@DollarValue", item.DollarValue);
                        cmdInsUp.Parameters.AddWithValue("@OrderType", item.Order.OrderType);
                        cmdInsUp.Parameters.AddWithValue("@Status", "Peeling");
                        cmdInsUp.Parameters.AddWithValue("@ReRolling", item.IsReRollingReq);
                        rowCount = cmdInsUp.ExecuteNonQuery();
                        cmdInsUp.Parameters.Clear();

                        //Peeling Status
                        cmdUpdatePeelingStatus.Transaction = trans;
                        cmdUpdatePeelingStatus.Parameters.AddWithValue("@OrderNo", item.Order.OrderNo);
                        cmdUpdatePeelingStatus.Parameters.AddWithValue("@RawProdId", item.Product.RawProduct.RawProductID);
                        cmdUpdatePeelingStatus.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                        cmdUpdatePeelingStatus.Parameters.AddWithValue("@LogsPending", item.Logs);
                        cmdUpdatePeelingStatus.Parameters.AddWithValue("@LogsCompleted", 0);
                        cmdUpdatePeelingStatus.Parameters.AddWithValue("@BulkRollsCompleted", 0);
                        rowCount = cmdUpdatePeelingStatus.ExecuteNonQuery();
                        cmdUpdatePeelingStatus.Parameters.Clear();
                    }

                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("SQL ADDING COMMAND ERROR OCCURED :  Adding to Peeling table" + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return rowCount;
        }


        public static List<MixingCapacity> GetMixingCapacity(int id)
        {
            //decimal maxMix = 0;
            List<MixingCapacity> mixingCapacityList = new List<MixingCapacity>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT * FROM MixingCapacity " +
                                                                  "WHERE mixing_time_table_id=@id", conn))
                    {
                        cmdGetData.Parameters.AddWithValue("@id", id);

                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    MixingCapacity mc = new MixingCapacity();
                                    mc.ID = Convert.ToInt32(dr["id"]);
                                    mc.ProdTimeTableID = Convert.ToInt32(dr["production_time_table_id"]);
                                    mc.MixingTimeTableID = Convert.ToInt32(dr["mixing_time_table_id"]);
                                    mc.MaxMixes = Convert.ToDecimal(dr["max_mixes"]);
                                    mixingCapacityList.Add(mc);
                                    //maxMix = Convert.ToDecimal(dr["max_mixes"]);                
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading Mixing Capacity: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return mixingCapacityList;
        }


        public static decimal GetCurrentMixingCapacity(int mTTID)
        {
            decimal capacity = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdSelect = new SqlCommand("SELECT blockLog_qty FROM MixingCurrentCapacity " +
                                                       "WHERE mixing_time_table_id = @MixingTimeTableId", conn);

                conn.Open();
                try
                {

                    capacity = 0;
                    cmdSelect.Parameters.AddWithValue("@MixingTimeTableId", mTTID);


                    using (SqlDataReader dr = cmdSelect.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    capacity += Convert.ToDecimal(dr["blockLog_qty"]);
                                }
                            }
                            else
                            {
                                capacity = 0;
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL MixingCurrentCapacity ERROR OCCURED : " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return capacity;
        }

        public static decimal GetCurrentMixingCapacityByProdID(int mTTID)
        {
            decimal capacity = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdSelect = new SqlCommand("SELECT blockLog_qty FROM MixingCurrentCapacity " +
                                                       "WHERE prod_time_table_id = @ProdTimeTableId", conn);

                conn.Open();
                try
                {

                    capacity = 0;
                    cmdSelect.Parameters.AddWithValue("@ProdTimeTableId", mTTID);


                    using (SqlDataReader dr = cmdSelect.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    capacity += Convert.ToDecimal(dr["blockLog_qty"]);
                                }
                            }
                            else
                            {
                                capacity = 0;
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL MixingCurrentCapacity ERROR OCCURED : " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return capacity;
        }

        public static List<GradedStock> GetGradedStock()
        {
            List<GradedStock> gStockList = new List<GradedStock>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdSelect = new SqlCommand("SELECT * FROM GradedStock", conn);

                conn.Open();
                try
                {
                    using (SqlDataReader dr = cmdSelect.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    GradedStock gs = new GradedStock();
                                    gs.ID = Convert.ToInt16(dr["id"]);
                                    gs.GradeName = dr["grade_name"].ToString();
                                    gs.Qty = Convert.ToDecimal(dr["qty"]);
                                    gs.ReOrderQty = CheckNull<decimal>(dr["re_order_qty"]);
                                    gStockList.Add(gs);
                                }
                            }
                        }
                    }

                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL UPDATE COMMAND ERROR OCCURED :  Updating Orders table" + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return gStockList;
        }


        public static decimal GetCurrentBlockLogTotal(int prodTimeTableId)
        {

            decimal tot = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT ISNULL(SUM(blocklog_qty),0) AS bl FROM GradingScheduling " +
                                                                  "WHERE production_time_table_id=@ProdTimeTableID", conn))
                    {
                        cmdGetData.Parameters.AddWithValue("ProdTimeTableID", prodTimeTableId);

                        //object result = cmdGetData.ExecuteScalar();

                        //tot = Convert.ToDecimal(result);
                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    tot = Convert.ToDecimal(dr["bl"]);

                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading production line: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return tot;

        }

        public static decimal GetMaxMixes(int id)
        {
            decimal maxMix = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT max_mixes FROM MixingCapacity " +
                                                                  "WHERE mixing_time_table_id=@id", conn))
                    {
                        cmdGetData.Parameters.AddWithValue("@id", id);

                        object result = cmdGetData.ExecuteScalar();

                        maxMix = (decimal)cmdGetData.ExecuteScalar();
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading Mixing Capacity: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return maxMix;
        }

        public static int AddToProductionOrderInfo(BindingList<OrderDetails> rawMaterialDetails, Int32 salesId)
        {
            int rowCount = 0;
            //Transaction Transaction = null;
            //string userName = System.Security.Principal.WindowsIdentity.GetCurrent().Name;
            //if (String.IsNullOrEmpty(userName))
            //{
            //    userName = "Unknown";
            //}

            //using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            //{                                                              
            //    SqlCommand cmdInsertOrderProd = new SqlCommand("INSERT INTO ProductionOrderInfo(sales_order_id, raw_product_id, product_id,qty,description,blocks_logs,type,order_type) " +
            //                                                   "VALUES (@SalesOrderID,@RawProductID,@ProductID,@Qty,@Description,@BlocksLogs,@Type,@OrderType)", conn);

            //    //SqlCommand cmdInsertToNotes = new SqlCommand("INSERT INTO Notes(sales_order_id, type, notes) " +
            //    //                                              "VALUES (@SalesOrderID,@Type,@Notes)", conn);

            //    conn.Open();
            //    try
            //    {
            //        foreach (var item in rawMaterialDetails)
            //        {
            //            cmdInsertOrderProd.Parameters.AddWithValue("@SalesOrderID", salesId);
            //            cmdInsertOrderProd.Parameters.AddWithValue("@RawProductID", item.Product.RawProduct.RawProductID);
            //            cmdInsertOrderProd.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
            //            cmdInsertOrderProd.Parameters.AddWithValue("@Qty", item.Quantity);
            //            cmdInsertOrderProd.Parameters.AddWithValue("@Description", item.Product.ProductDescription);
            //            cmdInsertOrderProd.Parameters.AddWithValue("@BlocksLogs",item.BlockLogQty);
            //            cmdInsertOrderProd.Parameters.AddWithValue("@Type", item.Product.ProductUnit);
            //            cmdInsertOrderProd.Parameters.AddWithValue("@OrderType", item.SelectedOrderType.OrderTypeID);
            //            rowCount = cmdInsertOrderProd.ExecuteNonQuery();
            //            cmdInsertOrderProd.Parameters.Clear();

            //            Transaction = new Transaction()
            //            {
            //                TransDateTime = DateTime.Now,
            //                Transtype = "New Product",
            //                SalesOrderID = salesId,
            //                Products = new List<RawStock>()
            //                    {
            //                      new RawStock(){RawProductID = item.Product.RawProduct.RawProductID,Qty=item.Quantity},  
            //                    },
            //                CreatedBy = userName
            //            };
            //            int r = DBAccess.InsertTransaction(Transaction);
            //        }

            //    }
            //    catch (Exception e)
            //    {
            //        Debug.WriteLine("Error: " + e);
            //    }
            //    finally
            //    {
            //        conn.Close();
            //    }
            //}

            return rowCount;

        }

        public static Int32 GenerateNewOrderID()
        {
            Int32 firstSalesId = 0;
            Int32 orderId = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdGetIdFree = new SqlCommand("SELECT TOP 1 * FROM OrderID WHERE status = 'FREE' ORDER BY id DESC", conn);
                //SqlCommand cmdGetIdTaken = new SqlCommand("SELECT TOP 1 * FROM SalesID WHERE status = 'TAKEN' ORDER BY id DESC", conn);
                SqlCommand cmdCrateNewSalesId = new SqlCommand("INSERT INTO OrderID(id,status) VALUES (@SalesID,@Status)", conn);
                SqlCommand cmdUpdateStatus = new SqlCommand("UPDATE OrderID SET status ='TAKEN' WHERE id = @SalesID AND status = 'FREE'", conn);

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {
                    cmdGetIdFree.Transaction = trans;
                    firstSalesId = (Int32)cmdGetIdFree.ExecuteScalar();

                    if (firstSalesId > 0)
                    {
                        orderId = firstSalesId + 1;
                        cmdCrateNewSalesId.Transaction = trans;
                        cmdCrateNewSalesId.Parameters.AddWithValue("@SalesID", orderId);
                        cmdCrateNewSalesId.Parameters.AddWithValue("@Status", "FREE");
                        cmdCrateNewSalesId.ExecuteNonQuery();

                        cmdUpdateStatus.Transaction = trans;
                        cmdUpdateStatus.Parameters.AddWithValue("@SalesID", firstSalesId);
                        cmdUpdateStatus.ExecuteNonQuery();
                    }
                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("SQL Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return firstSalesId;
        }

        public static int AddToSlitPeelNoStock(List<SlitPeel> slitPeelList)
        {
            int rowCount = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdInsert = new SqlCommand("INSERT INTO SlitPeelNoStock(sales_order_id,product_id,raw_product_id, qty_to_make,  dollar_value, blocks_logs, type, order_type, status) " +
                                                      "VALUES (@SalesID,@ProductID,@RawProdId,@QtyToMake,@DollarValue,@BlocksLogs,@Type,@OrderType,@Status)", conn);

                conn.Open();
                try
                {
                    foreach (var item in slitPeelList)
                    {
                        cmdInsert.Parameters.AddWithValue("@SalesID", item.SalesOrderID);
                        cmdInsert.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                        cmdInsert.Parameters.AddWithValue("@RawProdId", item.Product.RawProduct.RawProductID);
                        cmdInsert.Parameters.AddWithValue("@QtyToMake", item.OriginalQty);
                        cmdInsert.Parameters.AddWithValue("@DollarValue", item.DollarValue);
                        cmdInsert.Parameters.AddWithValue("@BlocksLogs", item.OriginalBlockLogs);
                        cmdInsert.Parameters.AddWithValue("@Type", item.Type);
                        cmdInsert.Parameters.AddWithValue("@OrderType", item.OrdertypeID);
                        cmdInsert.Parameters.AddWithValue("@Status", "SlitPeel");
                        rowCount = cmdInsert.ExecuteNonQuery();
                        cmdInsert.Parameters.Clear();
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL ADDING COMMAND ERROR OCCURED :  Adding to Slit Peel table" + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return rowCount;
        }

        public static bool GetSystemParameter(string parCode)
        {
            bool res = false;
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT value FROM SystemParameter " +
                                                                  "WHERE parameter_code=@ParaCode", conn))
                    {
                        cmdGetData.Parameters.AddWithValue("@ParaCode", parCode);

                        object result = cmdGetData.ExecuteScalar();

                        res = (bool)cmdGetData.ExecuteScalar();
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading System Parameter Table: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return res;
        }


        public static List<SystemParameters> GetAllSystemParametersByValue(bool value)
        {
            List<SystemParameters> systemParameters = new List<SystemParameters>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdSelect = new SqlCommand("SELECT * FROM SystemParameter WHERE value=@Value", conn);
                cmdSelect.Parameters.AddWithValue("@Value", value);
                conn.Open();
                try
                {
                    using (SqlDataReader dr = cmdSelect.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    SystemParameters sp = new SystemParameters();
                                    sp.ParameterCode = (dr["parameter_Code"]).ToString();
                                    sp.Ddescription = dr["description"].ToString();
                                    sp.Value = Convert.ToBoolean(dr["value"]);
                                    systemParameters.Add(sp);
                                }
                            }
                        }
                    }

                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL UPDATE COMMAND ERROR OCCURED :  Updating Orders table" + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return systemParameters;
        }



        public static int UpdateSystemParameter(string paraCode, bool value)
        {
            int rows = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {

                using (SqlCommand cmdUpdate = new SqlCommand("UPDATE SystemParameter SET value = @Value " +
                                                             "WHERE parameter_code=@ParameterCode", conn))
                {
                    conn.Open();
                    try
                    {

                        cmdUpdate.Parameters.AddWithValue("@ParameterCode", paraCode);
                        cmdUpdate.Parameters.AddWithValue("@Value", value);
                        rows = cmdUpdate.ExecuteNonQuery();
                    }
                    catch (Exception e)
                    {
                        Debug.WriteLine("SQL UPDATE COMMAND ERROR OCCURED :  Updating System Parameter Table" + e);
                    }
                    finally
                    {
                        conn.Close();
                    }
                }
            }
            return rows;
        }

        /******************UPDATE GRADING PRODUCTION*************/
        public static int UpdateGradingActive(GradingProductionDetails gpd, bool active)
        {
            int result = 0;
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {

                //Update Grading Scheduling
                SqlCommand cmdUpdateStatus = new SqlCommand("UPDATE GradingScheduling SET active_order = @Active " +
                                                            "WHERE production_time_table_id=@ProdTimeTableID AND raw_product_id = @rawProdId AND sales_id=@SalesID AND shift = @shiftParam " +
                                                            "AND status = @statusParam AND order_type=@OrderType AND active_order=@ActiveCurrent", conn);
                conn.Open();
                try
                {

                    cmdUpdateStatus.Parameters.AddWithValue("@ProdTimeTableID", gpd.ProdTimeTableID);
                    cmdUpdateStatus.Parameters.AddWithValue("@SalesID", gpd.SalesOrderId);
                    cmdUpdateStatus.Parameters.AddWithValue("@rawProdId", gpd.RawProduct.RawProductID);
                    cmdUpdateStatus.Parameters.AddWithValue("@shiftParam", gpd.Shift);
                    cmdUpdateStatus.Parameters.AddWithValue("@statusParam", "Grading");
                    cmdUpdateStatus.Parameters.AddWithValue("@OrderType", gpd.OrderType);
                    cmdUpdateStatus.Parameters.AddWithValue("@ActiveCurrent", gpd.GradingActive);
                    cmdUpdateStatus.Parameters.AddWithValue("@Active", active);
                    result = cmdUpdateStatus.ExecuteNonQuery();
                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL UPDATE COMMAND ERROR OCCURED :  Updating Grading Scheduling Active" + e);
                }
                finally
                {
                    conn.Close();
                }

            }
            return result;
        }

        public static int UpdateMixingActive(MixingProductionDetails mpd, bool active)
        {
            int result = 0;
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {

                //Update Grading Scheduling
                SqlCommand cmdUpdateStatus = new SqlCommand("UPDATE MixingCurrentCapacity SET active_order = @Active " +
                                                            "WHERE prod_time_table_id=@ProdTimeTableID AND mixing_time_table_id=@MixingTimeTableID AND raw_product_id = @rawProdId AND sales_id=@SalesID AND order_type=@OrderType AND rank=@Rank", conn);
                conn.Open();
                try
                {
                    cmdUpdateStatus.Parameters.AddWithValue("@ProdTimeTableID", mpd.ProdTimeTableID);
                    cmdUpdateStatus.Parameters.AddWithValue("@MixingTimeTableID", mpd.MixingTimeTableID);
                    cmdUpdateStatus.Parameters.AddWithValue("@SalesID", mpd.SalesOrderId);
                    cmdUpdateStatus.Parameters.AddWithValue("@rawProdId", mpd.RawProduct.RawProductID);
                    cmdUpdateStatus.Parameters.AddWithValue("@OrderType", mpd.OrderType);
                    cmdUpdateStatus.Parameters.AddWithValue("@Rank", mpd.Rank);
                    cmdUpdateStatus.Parameters.AddWithValue("@Active", active);
                    result = cmdUpdateStatus.ExecuteNonQuery();
                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL UPDATE COMMAND ERROR OCCURED :  Updating Mixing Current Capacity Active" + e);
                }
                finally
                {
                    conn.Close();
                }

            }
            return result;
        }

        public static bool CheckGradingOrderActive(GradingProductionDetails gpd)
        {
            bool res = false;
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT active_order FROM GradingScheduling " +
                                                                  "WHERE production_time_table_id=@ProdTimeTableID AND raw_product_id = @rawProdId AND sales_id=@SalesID AND shift = @shiftParam " +
                                                                  "AND status = @statusParam AND order_type=@OrderType AND active_order=@ActiveCurrent", conn))
                    {
                        cmdGetData.Parameters.AddWithValue("@ProdTimeTableID", gpd.ProdTimeTableID);
                        cmdGetData.Parameters.AddWithValue("@SalesID", gpd.SalesOrderId);
                        cmdGetData.Parameters.AddWithValue("@rawProdId", gpd.RawProduct.RawProductID);
                        cmdGetData.Parameters.AddWithValue("@shiftParam", gpd.Shift);
                        cmdGetData.Parameters.AddWithValue("@statusParam", "Grading");
                        cmdGetData.Parameters.AddWithValue("@OrderType", gpd.OrderType);
                        cmdGetData.Parameters.AddWithValue("@ActiveCurrent", gpd.GradingActive);

                        object result = cmdGetData.ExecuteScalar();
                        res = (bool)cmdGetData.ExecuteScalar();
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading System Parameter Table: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return res;
        }

        public static bool CheckMixingOrderActive(MixingProductionDetails mpd)
        {
            bool res = false;
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT active_order FROM MixingCurrentCapacity " +
                                                                  "WHERE prod_time_table_id=@ProdTimeTableID AND mixing_time_table_id=@MixingTimeTableID AND raw_product_id = @rawProdId " +
                                                                  "AND sales_id=@SalesID AND order_type=@OrderType AND rank=@Rank AND blockLog_qty=@BlockLogQty", conn))
                    {
                        cmdGetData.Parameters.AddWithValue("@ProdTimeTableID", mpd.ProdTimeTableID);
                        cmdGetData.Parameters.AddWithValue("@MixingTimeTableID", mpd.MixingTimeTableID);
                        cmdGetData.Parameters.AddWithValue("@SalesID", mpd.SalesOrderId);
                        cmdGetData.Parameters.AddWithValue("@rawProdId", mpd.RawProduct.RawProductID);
                        cmdGetData.Parameters.AddWithValue("@BlockLogQty", mpd.BlockLogQty);
                        cmdGetData.Parameters.AddWithValue("@OrderType", mpd.OrderType);
                        cmdGetData.Parameters.AddWithValue("@Rank", mpd.Rank);
                        cmdGetData.Parameters.AddWithValue("@Active", mpd.ActiveOrder);

                        object result = cmdGetData.ExecuteScalar();
                        res = (bool)cmdGetData.ExecuteScalar();
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading CheckMixingOrderActive: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return res;
        }



        public static List<ProductionHistory> GetGradingHistory(DateTime createdDateTime, string tabName)
        {
            string newDate = createdDateTime.ToString("yyyy-MM-dd");
            List<ProductionHistory> prodHistList = new List<ProductionHistory>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdSelect = null;


                if (createdDateTime.Date >= new DateTime(2022, 12, 8))
                {
                    cmdSelect = new SqlCommand("SELECT RawProducts.RawProductCode, RawProducts.Description,RawProducts.RawProductType, GradingCompleted.id,GradingCompleted.prod_time_table_id,GradingCompleted.sales_id, " +
                                                          "GradingCompleted.raw_product_id,GradingCompleted.qty,GradingCompleted.shift,GradingCompleted.order_type,GradingCompleted.completed_by,GradingCompleted.status, " +
                                                          "GradingCompleted.created_date,GradingCompleted.created_time, " +
                                                          "Orders.sales_no,Orders.required_date AS OrderRequiredDate,Orders.comments,Orders.mixing_date " +
                                                          "FROM A1CONSOLEDB7.dbo.RawProducts " +
                                                          "INNER JOIN A1CONSOLEDB7.dbo.GradingCompleted ON A1CONSOLEDB7.dbo.RawProducts.RawProductID = A1CONSOLEDB7.dbo.GradingCompleted.raw_product_id " +
                                                          "INNER JOIN A1CONSOLEDB7.dbo.Orders ON A1CONSOLEDB7.dbo.GradingCompleted.sales_id = A1CONSOLEDB7.dbo.Orders.order_id " +
                                                          "WHERE A1CONSOLEDB7.dbo.GradingCompleted.created_date=@CreatedDateTime " +
                                                          "ORDER BY A1CONSOLEDB7.dbo.GradingCompleted.created_time", conn);
                }
                else if (createdDateTime.Date < new DateTime(2022, 12, 8))
                {
                    cmdSelect = new SqlCommand("SELECT RawProducts.RawProductCode, RawProducts.Description,RawProducts.RawProductType, GradingCompleted.id,GradingCompleted.prod_time_table_id,GradingCompleted.sales_id, " +
                                                          "GradingCompleted.raw_product_id,GradingCompleted.qty,GradingCompleted.shift,GradingCompleted.order_type,GradingCompleted.completed_by,GradingCompleted.status, " +
                                                          "GradingCompleted.created_date,GradingCompleted.created_time, " +
                                                          "Orders.sales_no,Orders.required_date AS OrderRequiredDate,Orders.comments,Orders.mixing_date " +
                                                          "FROM [A1CONSOLEDB7_2017-2022].dbo.RawProducts " +
                                                          "INNER JOIN [A1CONSOLEDB7_2017-2022].dbo.GradingCompleted ON [A1CONSOLEDB7_2017-2022].dbo.RawProducts.RawProductID = [A1CONSOLEDB7_2017-2022].dbo.GradingCompleted.raw_product_id " +
                                                          "INNER JOIN [A1CONSOLEDB7_2017-2022].dbo.Orders ON [A1CONSOLEDB7_2017-2022].dbo.GradingCompleted.sales_id = [A1CONSOLEDB7_2017-2022].dbo.Orders.order_id " +
                                                          "WHERE [A1CONSOLEDB7_2017-2022].dbo.GradingCompleted.created_date=@CreatedDateTime " +
                                                          "ORDER BY [A1CONSOLEDB7_2017-2022].dbo.GradingCompleted.created_time", conn);
                }
                
                conn.Open();
                try
                {
                    cmdSelect.Parameters.AddWithValue("@CreatedDateTime", newDate);

                    using (SqlDataReader dr = cmdSelect.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    ProductionHistory ph = new ProductionHistory();
                                    ph.ID = Convert.ToInt32(dr["id"]);
                                    ph.ProdTimeTableID = Convert.ToInt32(dr["prod_time_table_id"]);
                                    ph.SalesOrder = new SalesOrder() { ID = Convert.ToInt32(dr["sales_id"]), SalesOrderNo = dr["sales_no"].ToString(), Comment = dr["comments"].ToString(), RequiredDate = Convert.ToDateTime(dr["OrderRequiredDate"]), MixingDate = Convert.ToDateTime(dr["mixing_date"]) };
                                    ph.RawProduct = new RawProduct() { RawProductID = Convert.ToInt16(dr["raw_product_id"]), RawProductCode = dr["RawProductCode"].ToString(), Description = dr["Description"].ToString(), RawProductType = dr["RawProductType"].ToString() };
                                    ph.Qty = Math.Ceiling(Convert.ToDecimal(dr["qty"]));
                                    ph.Shift = Convert.ToInt16(dr["shift"]);
                                    ph.OrderType = Convert.ToInt16(dr["order_type"]);
                                    ph.CompletedBy = dr["completed_by"].ToString();
                                    ph.CreatedDateTime = Convert.ToDateTime(dr["created_date"]);
                                    ph.CompletedTime = (TimeSpan)dr["created_time"];
                                    ph.Status = dr["status"].ToString();
                                    prodHistList.Add(ph);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return prodHistList;
        }

        public static List<ProductionHistory> GetMixingGradingHistory(DateTime createdDateTime)
        {
            string newDate = createdDateTime.ToString("yyyy-MM-dd");
            List<ProductionHistory> prodHistList = new List<ProductionHistory>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdSelect = null;

                if (createdDateTime >= new DateTime(2022, 12, 08))
                {
                    cmdSelect = new SqlCommand("SELECT RawProducts.RawProductCode, RawProducts.Description,RawProducts.RawProductType, MixingCompleted.id,MixingCompleted.mixing_time_table_id,MixingCompleted.sales_id, " +
                                                          "MixingCompleted.raw_product_id,MixingCompleted.qty,MixingCompleted.shift,MixingCompleted.order_type,MixingCompleted.completed_by,MixingCompleted.status, " +
                                                          "MixingCompleted.created_date,MixingCompleted.created_time, " +
                                                          "Orders.sales_no,Orders.required_date AS OrderRequiredDate,Orders.comments,Orders.mixing_date " +
                                                          "FROM A1CONSOLEDB7.dbo.RawProducts " +
                                                          "INNER JOIN A1CONSOLEDB7.dbo.MixingCompleted ON A1CONSOLEDB7.dbo.RawProducts.RawProductID = A1CONSOLEDB7.dbo.MixingCompleted.raw_product_id " +
                                                          "INNER JOIN A1CONSOLEDB7.dbo.Orders ON A1CONSOLEDB7.dbo.MixingCompleted.sales_id = A1CONSOLEDB7.dbo.Orders.order_id " +
                                                          "WHERE A1CONSOLEDB7.dbo.MixingCompleted.created_date=@CreatedDateTime AND (A1CONSOLEDB7.dbo.MixingCompleted.status <> 'Unfinished' OR A1CONSOLEDB7.dbo.MixingCompleted.status <> 'Cleared') " +
                                                          "ORDER BY A1CONSOLEDB7.dbo.MixingCompleted.shift,A1CONSOLEDB7.dbo.MixingCompleted.created_time desc", conn);
                }
                else if (createdDateTime < new DateTime(2022, 12, 08))
                {
                    cmdSelect = new SqlCommand("SELECT RawProducts.RawProductCode, RawProducts.Description,RawProducts.RawProductType, MixingCompleted.id,MixingCompleted.mixing_time_table_id,MixingCompleted.sales_id, " +
                                                          "MixingCompleted.raw_product_id,MixingCompleted.qty,MixingCompleted.shift,MixingCompleted.order_type,MixingCompleted.completed_by,MixingCompleted.status, " +
                                                          "MixingCompleted.created_date,MixingCompleted.created_time, " +
                                                          "Orders.sales_no,Orders.required_date AS OrderRequiredDate,Orders.comments,Orders.mixing_date " +
                                                          "FROM [A1CONSOLEDB7_2017-2022].dbo.RawProducts " +
                                                          "INNER JOIN [A1CONSOLEDB7_2017-2022].dbo.MixingCompleted ON [A1CONSOLEDB7_2017-2022].dbo.RawProducts.RawProductID = [A1CONSOLEDB7_2017-2022].dbo.MixingCompleted.raw_product_id " +
                                                          "INNER JOIN [A1CONSOLEDB7_2017-2022].dbo.Orders ON [A1CONSOLEDB7_2017-2022].dbo.MixingCompleted.sales_id = [A1CONSOLEDB7_2017-2022].dbo.Orders.order_id " +
                                                          "WHERE [A1CONSOLEDB7_2017-2022].dbo.MixingCompleted.created_date=@CreatedDateTime AND ([A1CONSOLEDB7_2017-2022].dbo.MixingCompleted.status <> 'Unfinished' OR [A1CONSOLEDB7_2017-2022].dbo.MixingCompleted.status <> 'Cleared') " +
                                                          "ORDER BY [A1CONSOLEDB7_2017-2022].dbo.MixingCompleted.shift,[A1CONSOLEDB7_2017-2022].dbo.MixingCompleted.created_time desc", conn);
                }
                
                conn.Open();
                try
                {
                    cmdSelect.Parameters.AddWithValue("@CreatedDateTime", newDate);

                    using (SqlDataReader dr = cmdSelect.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    ProductionHistory ph = new ProductionHistory();
                                    ph.ID = Convert.ToInt32(dr["id"]);
                                    ph.ProdTimeTableID = Convert.ToInt32(dr["mixing_time_table_id"]);
                                    ph.SalesOrder = new SalesOrder() { ID = Convert.ToInt32(dr["sales_id"]), SalesOrderNo = dr["sales_no"].ToString(), Comment = dr["comments"].ToString(), RequiredDate = Convert.ToDateTime(dr["OrderRequiredDate"]), MixingDate = Convert.ToDateTime(dr["mixing_date"]) };
                                    ph.RawProduct = new RawProduct() { RawProductID = Convert.ToInt16(dr["raw_product_id"]), RawProductCode = dr["RawProductCode"].ToString(), Description = dr["Description"].ToString(), RawProductType = dr["RawProductType"].ToString() };
                                    ph.Qty = Math.Ceiling(Convert.ToDecimal(dr["qty"]));
                                    ph.Shift = Convert.ToInt16(dr["shift"]);
                                    ph.OrderType = Convert.ToInt16(dr["order_type"]);
                                    ph.CompletedBy = dr["completed_by"].ToString();
                                    ph.CreatedDateTime = Convert.ToDateTime(dr["created_date"]);
                                    ph.CompletedTime = (TimeSpan)dr["created_time"];
                                    ph.Status = dr["status"].ToString();
                                    prodHistList.Add(ph);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return prodHistList;
        }

        public static List<ProductionHistory> GetMixingUnCompletedList(DateTime createdDateTime,bool avoidDate)
        {
            string newDate = createdDateTime.AddDays(1).ToString("yyyy-MM-dd");
            string where = " MixingCompleted.status = 'Unfinished'";
            List<ProductionHistory> prodHistList = new List<ProductionHistory>();

            if(!avoidDate)
            {
                where = " MixingCompleted.created_date=@CreatedDateTime AND MixingCompleted.status = 'Unfinished'";
            }

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdSelect = new SqlCommand("SELECT RawProducts.RawProductCode, RawProducts.Description,RawProducts.RawProductType, MixingCompleted.id,MixingCompleted.mixing_time_table_id,MixingCompleted.sales_id, " +
                                                      "MixingCompleted.raw_product_id,MixingCompleted.qty,MixingCompleted.shift,MixingCompleted.order_type,MixingCompleted.completed_by,MixingCompleted.status, " +
                                                      "MixingCompleted.created_date,MixingCompleted.created_time, " +
                                                      "Orders.sales_no,Orders.required_date AS OrderRequiredDate,Orders.comments,Orders.mixing_date " +
                                                      "FROM RawProducts " +
                                                      "INNER JOIN MixingCompleted ON RawProducts.RawProductID = MixingCompleted.raw_product_id " +
                                                      "INNER JOIN Orders ON MixingCompleted.sales_id = Orders.order_id " +
                                                      "WHERE " + where + "" +
                                                      "ORDER BY Orders.mixing_date desc", conn);
                conn.Open();
                try
                {
                    cmdSelect.Parameters.AddWithValue("@CreatedDateTime", newDate);

                    using (SqlDataReader dr = cmdSelect.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    ProductionHistory ph = new ProductionHistory();
                                    ph.ID = Convert.ToInt32(dr["id"]);
                                    ph.ProdTimeTableID = Convert.ToInt32(dr["mixing_time_table_id"]);
                                    ph.SalesOrder = new SalesOrder() { ID = Convert.ToInt32(dr["sales_id"]), SalesOrderNo = dr["sales_no"].ToString(), Comment = dr["comments"].ToString(), RequiredDate = Convert.ToDateTime(dr["OrderRequiredDate"]), MixingDate = Convert.ToDateTime(dr["mixing_date"]) };
                                    ph.RawProduct = new RawProduct() { RawProductID = Convert.ToInt16(dr["raw_product_id"]), RawProductCode = dr["RawProductCode"].ToString(), Description = dr["Description"].ToString(), RawProductType = dr["RawProductType"].ToString() };
                                    ph.Qty = Math.Ceiling(Convert.ToDecimal(dr["qty"]));
                                    ph.Shift = Convert.ToInt16(dr["shift"]);
                                    ph.OrderType = Convert.ToInt16(dr["order_type"]);
                                    ph.CompletedBy = dr["completed_by"].ToString();
                                    ph.CreatedDateTime = Convert.ToDateTime(dr["created_date"]);
                                    ph.CompletedTime = (TimeSpan)dr["created_time"];
                                    ph.Status = dr["status"].ToString();
                                    prodHistList.Add(ph);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return prodHistList;
        }

        public static Tuple<List<GradingCompleted>, List<GradedStockHistory>> GetGradingGradedHistory(DateTime createdDateTime, int shift)
        {
            string newDate = createdDateTime.ToString("yyyy-MM-dd");
            List<GradingCompleted> prodHistList = new List<GradingCompleted>();
            List<GradedStockHistory> gradedStockHistory = new List<GradedStockHistory>();
            List<ShreddingHistory> shreddingHistory = new List<ShreddingHistory>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdSelect = null;

                if (createdDateTime.Date >= new DateTime(2022, 12, 8))
                {
                    cmdSelect = new SqlCommand("SELECT GradingGradesCompleted.id,GradingGradesCompleted.prod_time_table_id, GradingGradesCompleted.grading_id,GradingGradesCompleted.kg_completed, " +
                                                      "GradingGradesCompleted.shift,GradingGradesCompleted.created_date,GradingGradesCompleted.order_type, GradedStock.grade_name,Shred.name AS shred_name " +
                                                      "FROM A1CONSOLEDB7.dbo.GradingGradesCompleted " +
                                                      "LEFT JOIN A1CONSOLEDB7.dbo.GradedStock ON A1CONSOLEDB7.dbo.GradingGradesCompleted.grading_id = A1CONSOLEDB7.dbo.GradedStock.id " +
                                                      "LEFT JOIN A1CONSOLEDB7.dbo.ShredStock ON A1CONSOLEDB7.dbo.GradingGradesCompleted.grading_id = A1CONSOLEDB7.dbo.ShredStock.shred_id " +
                                                      "LEFT JOIN A1CONSOLEDB7.dbo.Shred ON A1CONSOLEDB7.dbo.ShredStock.shred_id = A1CONSOLEDB7.dbo.Shred.id " +
                                                      "WHERE created_date=@CreatedDate AND shift=@Shift", conn);
                }
                else if (createdDateTime.Date < new DateTime(2022, 12, 8))
                {
                    cmdSelect = new SqlCommand("SELECT GradingGradesCompleted.id,GradingGradesCompleted.prod_time_table_id, GradingGradesCompleted.grading_id,GradingGradesCompleted.kg_completed, " +
                                                      "GradingGradesCompleted.shift,GradingGradesCompleted.created_date,GradingGradesCompleted.order_type, GradedStock.grade_name,Shred.name AS shred_name " +
                                                      "FROM [A1CONSOLEDB7_2017-2022].dbo.GradingGradesCompleted " +
                                                      "LEFT JOIN [A1CONSOLEDB7_2017-2022].dbo.GradedStock ON [A1CONSOLEDB7_2017-2022].dbo.GradingGradesCompleted.grading_id = [A1CONSOLEDB7_2017-2022].dbo.GradedStock.id " +
                                                      "LEFT JOIN [A1CONSOLEDB7_2017-2022].dbo.ShredStock ON [A1CONSOLEDB7_2017-2022].dbo.GradingGradesCompleted.grading_id = [A1CONSOLEDB7_2017-2022].dbo.ShredStock.shred_id " +
                                                      "LEFT JOIN [A1CONSOLEDB7_2017-2022].dbo.Shred ON [A1CONSOLEDB7_2017-2022].dbo.ShredStock.shred_id = [A1CONSOLEDB7_2017-2022].dbo.Shred.id " +
                                                      "WHERE created_date=@CreatedDate AND shift=@Shift", conn);
                }
                

                SqlCommand cmdGetGradedHistory = new SqlCommand("SELECT GradedStockHistory.date,GradedStockHistory.grading_id,GradedStock.grade_name,GradedStockHistory.qty,GradedStockHistory.shift,Shifts.shift_name  " +
                                                                "FROM GradedStockHistory " +
                                                                "INNER JOIN GradedStock ON GradedStockHistory.grading_id = GradedStock.id " +
                                                                "INNER JOIN Shifts ON GradedStockHistory.shift = Shifts.shift_id " +
                                                                "WHERE date=@Date AND shift=@Shift", conn);

                //SqlCommand cmdGetShredHistory = new SqlCommand("SELECT CONVERT(date,ShreddingHistory.date_time) AS Date,ShreddingHistory.shred_id,GradedStock.grade_name,ShreddingHistory.qty,ShreddingHistory.shift,Shifts.shift_name " +
                //                                               "FROM ShreddingHistory " +
                //                                               "INNER JOIN GradedStock ON ShreddingHistory.shred_id = GradedStock.id " +
                //                                               "INNER JOIN Shifts ON ShreddingHistory.shift = Shifts.shift_id " +
                //                                               "WHERE CONVERT(date,ShreddingHistory.date_time)=@Date AND shift=@Shift", conn);


                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {
                    cmdSelect.Transaction = trans;
                    cmdSelect.Parameters.AddWithValue("@CreatedDate", newDate);
                    cmdSelect.Parameters.AddWithValue("@Shift", shift);

                    using (SqlDataReader dr = cmdSelect.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    string gname=string.Empty;
                                    GradingCompleted ph = new GradingCompleted();
                                    ph.ID = Convert.ToInt32(dr["id"]);
                                    ph.ProdTimeTableID = Convert.ToInt32(dr["prod_time_table_id"]);
                                    ph.GradingID = Convert.ToInt32(dr["grading_id"]);

                                    if (string.IsNullOrWhiteSpace(dr["grade_name"].ToString()) && !string.IsNullOrWhiteSpace(dr["shred_name"].ToString()))
                                    {
                                        gname = dr["shred_name"].ToString();
                                    }
                                    if (!string.IsNullOrWhiteSpace(dr["grade_name"].ToString()) && string.IsNullOrWhiteSpace(dr["shred_name"].ToString()))
                                    {
                                        gname = dr["grade_name"].ToString();
                                    }


                                    ph.GradingName = gname;
                                    ph.KGCompleted = Math.Ceiling(Convert.ToDecimal(dr["kg_completed"]));
                                    ph.Shift = Convert.ToInt16(dr["shift"]);
                                    ph.CreatedDate = Convert.ToDateTime(dr["created_date"]);
                                    ph.OrderType = Convert.ToInt16(dr["order_type"]);
                                    prodHistList.Add(ph);
                                }
                            }
                        }
                    }

                    cmdGetGradedHistory.Transaction = trans;
                    cmdGetGradedHistory.Parameters.AddWithValue("@Date", newDate);
                    cmdGetGradedHistory.Parameters.AddWithValue("@Shift", shift);
                    using (SqlDataReader dr = cmdGetGradedHistory.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    GradedStockHistory gsh = new GradedStockHistory();
                                    gsh.Date = Convert.ToDateTime(dr["date"]);
                                    gsh.RubberGrades = new RubberGrades() { GradeID = Convert.ToInt16(dr["grading_id"]), GradeName = dr["grade_name"].ToString() };
                                    gsh.Qty = Convert.ToDecimal(dr["qty"]);
                                    gsh.Shift = new Shift() { ShiftID = Convert.ToInt16(dr["shift"]), ShiftName = dr["shift_name"].ToString() };
                                    gradedStockHistory.Add(gsh);
                                }
                            }
                        }
                    }

                    //cmdGetShredHistory.Transaction = trans;
                    //cmdGetShredHistory.Parameters.AddWithValue("@Date", newDate);
                    //cmdGetShredHistory.Parameters.AddWithValue("@Shift", shift);
                    //using (SqlDataReader dr = cmdGetShredHistory.ExecuteReader())
                    //{
                    //    if (dr != null)
                    //    {
                    //        if (dr.HasRows)
                    //        {
                    //            while (dr.Read())
                    //            {
                    //                ShreddingHistory sh = new ShreddingHistory();
                    //                sh.DateTime = Convert.ToDateTime(dr["Date"]);
                    //                sh.ShredStock = new ShredStock() { Shred = new Shred() { ID = Convert.ToInt16(dr["shred_id"]), Name = dr["grade_name"].ToString() }, Qty = Convert.ToDecimal(dr["qty"]) };
                    //                sh.Shift = Convert.ToInt16(dr["shift"]);
                    //                shreddingHistory.Add(sh);
                    //            }
                    //        }
                    //    }
                    //}
                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return Tuple.Create(prodHistList, gradedStockHistory);
        }

        public static List<GradingCompleted> GetMixingGradedHistory(DateTime createdDateTime, int shift)
        {
            string newDate = createdDateTime.ToString("yyyy-MM-dd");
            List<GradingCompleted> prodHistList = new List<GradingCompleted>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdSelect = null;

                if (createdDateTime.Date >= new DateTime(2022, 12, 8))
                {

                    cmdSelect = new SqlCommand("SELECT MixingGradesCompleted.id,MixingGradesCompleted.mixing_time_table_id, MixingGradesCompleted.grading_id,MixingGradesCompleted.kg_completed, " +
                                                      "MixingGradesCompleted.shift,MixingGradesCompleted.created_date,MixingGradesCompleted.order_type,GradedStock.grade_name,Shred.name AS shred_name " +
                                                      "FROM A1CONSOLEDB7.dbo.MixingGradesCompleted " +
                                                      "LEFT JOIN A1CONSOLEDB7.dbo.GradedStock ON A1CONSOLEDB7.dbo.MixingGradesCompleted.grading_id = A1CONSOLEDB7.dbo.GradedStock.id " +
                                                      "LEFT JOIN A1CONSOLEDB7.dbo.ShredStock ON A1CONSOLEDB7.dbo.MixingGradesCompleted.grading_id = A1CONSOLEDB7.dbo.ShredStock.shred_id " +
                                                      "LEFT JOIN A1CONSOLEDB7.dbo.Shred ON A1CONSOLEDB7.dbo.ShredStock.shred_id = A1CONSOLEDB7.dbo.Shred.id " +
                                                      "WHERE created_date=@CreatedDate AND shift=@Shift", conn);

                }
                else if (createdDateTime.Date < new DateTime(2022, 12, 8))
                {
                    cmdSelect = new SqlCommand("SELECT MixingGradesCompleted.id,MixingGradesCompleted.mixing_time_table_id, MixingGradesCompleted.grading_id,MixingGradesCompleted.kg_completed, " +
                                                      "MixingGradesCompleted.shift,MixingGradesCompleted.created_date,MixingGradesCompleted.order_type,GradedStock.grade_name,Shred.name AS shred_name " +
                                                      "FROM [A1CONSOLEDB7_2017-2022].dbo.MixingGradesCompleted " +
                                                      "LEFT JOIN [A1CONSOLEDB7_2017-2022].dbo.GradedStock ON [A1CONSOLEDB7_2017-2022].dbo.MixingGradesCompleted.grading_id = [A1CONSOLEDB7_2017-2022].dbo.GradedStock.id " +
                                                      "LEFT JOIN [A1CONSOLEDB7_2017-2022].dbo.ShredStock ON [A1CONSOLEDB7_2017-2022].dbo.MixingGradesCompleted.grading_id = [A1CONSOLEDB7_2017-2022].dbo.ShredStock.shred_id " +
                                                      "LEFT JOIN [A1CONSOLEDB7_2017-2022].dbo.Shred ON [A1CONSOLEDB7_2017-2022].dbo.ShredStock.shred_id = [A1CONSOLEDB7_2017-2022].dbo.Shred.id " +
                                                      "WHERE created_date=@CreatedDate AND shift=@Shift", conn);

                }
                
                conn.Open();
                try
                {
                    cmdSelect.Parameters.AddWithValue("@CreatedDate", newDate);
                    cmdSelect.Parameters.AddWithValue("@Shift", shift);

                    using (SqlDataReader dr = cmdSelect.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    string gname = string.Empty;
                                    GradingCompleted ph = new GradingCompleted();
                                    ph.ID = Convert.ToInt32(dr["id"]);
                                    //ph.ProdTimeTableID = Convert.ToInt32(dr["prod_time_table_id"]);
                                    ph.GradingID = Convert.ToInt32(dr["grading_id"]);
                                    if (string.IsNullOrWhiteSpace(dr["grade_name"].ToString()) && !string.IsNullOrWhiteSpace(dr["shred_name"].ToString()))
                                    {
                                        gname = dr["shred_name"].ToString();
                                    }
                                    if (!string.IsNullOrWhiteSpace(dr["grade_name"].ToString()) && string.IsNullOrWhiteSpace(dr["shred_name"].ToString()))
                                    {
                                        gname = dr["grade_name"].ToString();
                                    }

                                    ph.GradingName = gname;
                                    ph.KGCompleted = Math.Ceiling(Convert.ToDecimal(dr["kg_completed"]));
                                    ph.Shift = Convert.ToInt16(dr["shift"]);
                                    ph.CreatedDate = Convert.ToDateTime(dr["created_date"]);
                                    ph.OrderType = Convert.ToInt16(dr["order_type"]);
                                    prodHistList.Add(ph);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return prodHistList;
        }


        public static List<ReRollingHistory> GetReRollingHistory(DateTime createdDateTime)
        {
            string newDate = createdDateTime.ToString("yyyy-MM-dd");
            List<ReRollingHistory> prodHistList = new List<ReRollingHistory>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdSelect = new SqlCommand("SELECT ReRollingCompleted.id,ReRollingCompleted.production_timetable_id,ReRollingCompleted.sales_id,ReRollingCompleted.product_id,Products.product_code,Products.product_description,ReRollingCompleted.rolls,ReRollingCompleted.short_rolls,ReRollingCompleted.off_spec_rolls,ReRollingCompleted.completed_by,ReRollingCompleted.created_date,ReRollingCompleted.created_time, " +
                                                      "Shifts.shift_id,Shifts.shift_name " +
                                                      "FROM ReRollingCompleted " +
                                                      "INNER JOIN Products ON ReRollingCompleted.product_id = Products.id " +
                                                      "INNER JOIN Shifts ON ReRollingCompleted.shift = Shifts.shift_id " +
                                                      "WHERE ReRollingCompleted.created_date=@CreatedDateTime " +
                                                      "ORDER BY Shifts.shift_id desc", conn);
                conn.Open();
                try
                {
                    cmdSelect.Parameters.AddWithValue("@CreatedDateTime", newDate);

                    using (SqlDataReader dr = cmdSelect.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    ReRollingHistory rrh = new ReRollingHistory();
                                    rrh.ID = Convert.ToInt32(dr["id"]);
                                    rrh.ProdTimeTableID = Convert.ToInt32(dr["production_timetable_id"]);
                                    rrh.Order = new Order() { OrderNo = Convert.ToInt32(dr["sales_id"]) };
                                    rrh.Product = new Product() { ProductID = Convert.ToInt16(dr["product_id"]), ProductCode = dr["product_code"].ToString(), ProductDescription = dr["product_description"].ToString() };
                                    rrh.Rolls = Convert.ToInt16(dr["rolls"]);
                                    rrh.ShortRolls = Convert.ToInt16(dr["short_rolls"]);
                                    rrh.OffSpecRolls = Convert.ToInt16(dr["off_spec_rolls"]);
                                    rrh.CompletedBy = dr["completed_by"].ToString();
                                    rrh.CreatedDate = Convert.ToDateTime(dr["created_date"]);
                                    rrh.CreatedTime = (TimeSpan)dr["created_time"];
                                    rrh.Shift = new Shift() { ShiftID = Convert.ToInt16(dr["shift_id"]), ShiftName = dr["shift_name"].ToString() };
                                    prodHistList.Add(rrh);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return prodHistList;
        }

        public static List<PeelingHistory> GetPeelingHistory(DateTime createdDateTime)
        {
            string newDate = createdDateTime.ToString("yyyy-MM-dd");
            List<PeelingHistory> prodHistList = new List<PeelingHistory>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdSelect = new SqlCommand("SELECT peelingCompleted.id,peelingCompleted.peeling_timetable_id,peelingCompleted.order_no,peelingCompleted.product_id,Products.product_code,Products.product_description,peelingCompleted.no_of_logs,peelingCompleted.tot_yield_cut,peelingCompleted.completed_by,peelingCompleted.created_date,peelingCompleted.created_time, " +
                                                      "Shifts.shift_id,Shifts.shift_name " +
                                                      "FROM peelingCompleted " +
                                                      "INNER JOIN Products ON peelingCompleted.product_id = Products.id " +
                                                      "INNER JOIN Shifts ON peelingCompleted.shift = Shifts.shift_id " +
                                                      "WHERE peelingCompleted.created_date=@CreatedDateTime " +
                                                      "ORDER BY Shifts.shift_id desc", conn);
                conn.Open();
                try
                {
                    cmdSelect.Parameters.AddWithValue("@CreatedDateTime", newDate);

                    using (SqlDataReader dr = cmdSelect.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    PeelingHistory rrh = new PeelingHistory();
                                    rrh.ID = Convert.ToInt32(dr["id"]);
                                    rrh.ProdTimeTableID = Convert.ToInt32(dr["peeling_timetable_id"]);
                                    rrh.Order = new Order() { OrderNo = Convert.ToInt32(dr["order_no"]) };
                                    rrh.Product = new Product() { ProductID = Convert.ToInt16(dr["product_id"]), ProductCode = dr["product_code"].ToString(), ProductDescription = dr["product_description"].ToString() };
                                    rrh.Logs = Convert.ToInt16(dr["no_of_logs"]);
                                    rrh.YieldCut = Convert.ToInt16(dr["tot_yield_cut"]);
                                    rrh.CompletedBy = dr["completed_by"].ToString();
                                    rrh.CreatedDate = Convert.ToDateTime(dr["created_date"]);
                                    rrh.CreatedTime = (TimeSpan)dr["created_time"];
                                    rrh.Shift = new Shift() { ShiftID = Convert.ToInt16(dr["shift_id"]), ShiftName = dr["shift_name"].ToString() };
                                    prodHistList.Add(rrh);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return prodHistList;
        }


        public static List<SlittingHistory> GetSlittingHistory(DateTime createdDateTime, string machine)
        {
            int m1 = 0;
            int m2 = 0;
            string newDate = createdDateTime.ToString("yyyy-MM-dd");
            List<SlittingHistory> slittingHistory = new List<SlittingHistory>();

            switch (machine)
            {
                case "Carousel": m1 = 8; m2 = 8;
                    break;
                case "Flat Bed": m1 = 4; m2 = 4;
                    break;
                case "All": m1 = 8; m2 = 4;
                    break;
                default:
                    break;
            }


            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdSelect = new SqlCommand("SELECT SlittingCompleted.id,SlittingCompleted.slitting_timetable_id,SlittingCompleted.order_no,SlittingCompleted.no_of_blocks,SlittingCompleted.tot_yield_cut,SlittingCompleted.off_spec_tiles,SlittingCompleted.shredding,SlittingCompleted.completed_by,SlittingCompleted.created_date,SlittingCompleted.created_time, " +
                                                      "Products.id AS product_id,Products.product_code,Products.product_description, " +
                                                      "Shifts.shift_id,Shifts.shift_name, " +
                                                      "ProductionTimeTable.machine_id, " +
                                                      "Machines.machine_name " +
                                                      "FROM SlittingCompleted " +
                                                      "INNER JOIN Products ON SlittingCompleted.product_id = Products.id " +
                                                      "INNER JOIN Shifts ON SlittingCompleted.shift = Shifts.shift_id " +
                                                      "INNER JOIN ProductionTimeTable ON SlittingCompleted.slitting_timetable_id = ProductionTimeTable.id " +
                                                      "INNER JOIN Machines ON ProductionTimeTable.machine_id = Machines.machine_id " +
                                                      "WHERE SlittingCompleted.created_date =@CreatedDateTime AND (Machines.machine_id = @MachineID1 or Machines.machine_id = @MachineID2) " +
                                                      "ORDER BY Shifts.shift_id desc ", conn);
                conn.Open();
                try
                {
                    cmdSelect.Parameters.AddWithValue("@CreatedDateTime", newDate);
                    cmdSelect.Parameters.AddWithValue("@MachineID1", m1);
                    cmdSelect.Parameters.AddWithValue("@MachineID2", m2);

                    using (SqlDataReader dr = cmdSelect.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    SlittingHistory sh = new SlittingHistory();
                                    sh.ID = Convert.ToInt32(dr["id"]);
                                    sh.ProdTimeTableID = Convert.ToInt32(dr["slitting_timetable_id"]);
                                    sh.Order = new Order() { OrderNo = Convert.ToInt32(dr["order_no"]) };
                                    sh.Product = new Product() { ProductID = Convert.ToInt16(dr["product_id"]), ProductCode = dr["product_code"].ToString(), ProductDescription = dr["product_description"].ToString() };
                                    sh.Blocks = Convert.ToInt16(dr["no_of_blocks"]);
                                    sh.Yield = Convert.ToInt16(dr["tot_yield_cut"]);
                                    sh.OffSpec = Convert.ToInt16(dr["off_spec_tiles"]);
                                    sh.Shredding = Convert.ToInt16(dr["shredding"]);
                                    sh.CompletedBy = dr["completed_by"].ToString();
                                    sh.CreatedDate = Convert.ToDateTime(dr["created_date"]);
                                    sh.CreatedTime = (TimeSpan)dr["created_time"];
                                    sh.Shift = new Shift() { ShiftID = Convert.ToInt16(dr["shift_id"]), ShiftName = dr["shift_name"].ToString() };
                                    sh.Machine = new Machines(0) { MachineID = Convert.ToInt32(dr["machine_id"]), MachineName = dr["machine_name"].ToString().Replace("Slitter", "") };
                                    slittingHistory.Add(sh);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return slittingHistory;
        }


        public static int InsertErrorLog(string message)
        {
            int result = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmd = new SqlCommand("INSERT INTO ErrorLog(message) VALUES (@message)", conn))
                    {
                        cmd.Parameters.AddWithValue("@message", message);
                        result = cmd.ExecuteNonQuery();
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return result;
        }

        public static int DeleteGradingOrder(int gradingSchedulingID,List<ShredStock> shredStock)
        {
            int res = 0;
            int prodTimeTableId = 0;
            int rawProductId = 0;
            int salesId = 0;
            int shift = 0;
            int orderType = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdSelectGS = new SqlCommand("SELECT * FROM GradingScheduling " +
                                                        "WHERE ID = @idParam", conn);

                SqlCommand cmdDeleteGS = new SqlCommand("DELETE FROM GradingScheduling " +
                                                        "WHERE ID = @idParam", conn);

                SqlCommand cmdDeleteCC = new SqlCommand("DELETE FROM CurrentCapacity " +
                                                        "WHERE prod_timetable_id = @prodTimeTableIdParam AND raw_product_id = @rawProductIdParam AND sales_id =@salesIdParam AND shift = @shiftParam AND order_type = @orderTypeParam", conn);

                SqlCommand cmdUpdateShredStock = new SqlCommand("UPDATE ShredStock SET qty =@Qty " +
                                                                "WHERE shred_id = @ShredID", conn);

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {
                    cmdSelectGS.Transaction = trans;
                    cmdSelectGS.Parameters.AddWithValue("@idParam", gradingSchedulingID);

                    using (SqlDataReader dr = cmdSelectGS.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    prodTimeTableId = Convert.ToInt32(dr["production_time_table_id"]);
                                    rawProductId = Convert.ToInt16(dr["raw_product_id"]);
                                    salesId = Convert.ToInt32(dr["sales_id"]);
                                    shift = Convert.ToInt32(dr["shift"]);
                                    orderType = Convert.ToInt16(dr["order_type"]);
                                }
                            }
                        }
                    }

                    cmdDeleteGS.Transaction = trans;
                    cmdDeleteGS.Parameters.AddWithValue("@idParam", gradingSchedulingID);
                    cmdDeleteGS.ExecuteNonQuery();

                    cmdDeleteCC.Transaction = trans;
                    cmdDeleteCC.Parameters.AddWithValue("@prodTimeTableIdParam", prodTimeTableId);
                    cmdDeleteCC.Parameters.AddWithValue("@rawProductIdParam", rawProductId);
                    cmdDeleteCC.Parameters.AddWithValue("@salesIdParam", salesId);
                    cmdDeleteCC.Parameters.AddWithValue("@shiftParam", shift);
                    cmdDeleteCC.Parameters.AddWithValue("@orderTypeParam", orderType);
                    cmdDeleteCC.ExecuteNonQuery();

                    foreach (var item in shredStock)
                    {
                        cmdUpdateShredStock.Transaction = trans;
                        cmdUpdateShredStock.Parameters.AddWithValue("@ShredID", item.Shred.ID);
                        cmdUpdateShredStock.Parameters.AddWithValue("@Qty", item.Qty);
                        cmdUpdateShredStock.ExecuteNonQuery();
                        cmdUpdateShredStock.Parameters.Clear();
                    }

                    res = 1;
                    trans.Commit();
                }
                catch (Exception e)
                {
                    res = 0;
                    trans.Rollback();
                    Debug.WriteLine("SQL DELETE COMMAND ERROR OCCURED :  Can't delete records from GradingScheduling and CurrentCapacity!" + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return res;
        }

        public static int DeleteSlittingOrder(SlittingOrder slittingOrder)
        {
            int res = 0;
            
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdDeleteCC = new SqlCommand("DELETE FROM SlittingOrders " +
                                                        "WHERE id = @Id", conn);

                
                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {                    

                    cmdDeleteCC.Transaction = trans;
                    cmdDeleteCC.Parameters.AddWithValue("@Id", slittingOrder.ID);
                    res=cmdDeleteCC.ExecuteNonQuery();
                                        
                    trans.Commit();
                }
                catch (Exception e)
                {
                    res = 0;
                    trans.Rollback();
                    Debug.WriteLine("SQL DELETE COMMAND ERROR OCCURED :  Can't delete records from GradingScheduling and CurrentCapacity!" + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return res;
        }


        public static int InsertTransaction(Transaction transaction)
        {
            int result = 0;
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmd = new SqlCommand("INSERT INTO Transactions(transaction_datetime, transaction_type, sales_order_id, raw_product_id,qty,created_by) " +
                                                           "VALUES (@TDateTime,@TType,@SalesOrderID,@RawProductID,@Qty,@CreatedBy)", conn))
                    {
                        foreach (var item in transaction.Products)
                        {
                            cmd.Parameters.AddWithValue("@TDateTime", transaction.TransDateTime);
                            cmd.Parameters.AddWithValue("@TType", transaction.Transtype);
                            cmd.Parameters.AddWithValue("@SalesOrderID", transaction.SalesOrderID);
                            cmd.Parameters.AddWithValue("@RawProductID", item.RawProductID);
                            cmd.Parameters.AddWithValue("@Qty", item.Qty);
                            cmd.Parameters.AddWithValue("@CreatedBy", transaction.CreatedBy);
                            result = cmd.ExecuteNonQuery();
                        }

                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return result;
        }

        public static int EnableDisableShift(DateTime date, List<int> machineIds, bool machineEnDis, bool dayEnDis, bool eveEnDis, bool nightEnDis)
        {
            int result = 0;
            BackgroundWorker worker = new BackgroundWorker();
            ChildWindowView LoadingScreen = new ChildWindowView();
            LoadingScreen.ShowWaitingScreen("Processing");

            worker.DoWork += (_, __) =>
            {

                
                using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("UPDATE ProductionTimeTable SET machine_active = @MachineActive, day_shift = @DayShift, evening_shift = @EveningShift, night_shift = @NightShift " +
                                                    " WHERE machine_id = @MachineID AND date = @Date", conn);

                    conn.Open();
                    cmd.CommandTimeout = 0;
                    try
                    {
                        foreach (var item in machineIds)
                        {
                            cmd.Parameters.AddWithValue("@MachineID", item);
                            cmd.Parameters.AddWithValue("@Date", date);
                            cmd.Parameters.AddWithValue("@MachineActive", machineEnDis);
                            cmd.Parameters.AddWithValue("@DayShift", dayEnDis);
                            cmd.Parameters.AddWithValue("@EveningShift", eveEnDis);
                            cmd.Parameters.AddWithValue("@NightShift", nightEnDis);
                            result = cmd.ExecuteNonQuery();
                            cmd.Parameters.Clear();
                        
                        }                   

                    }
                    catch (Exception e)
                    {
                        Debug.WriteLine("Error: Updating ProductionTimeTable " + e);
                    }
                    finally
                    {
                        conn.Close();
                    }
                }

                };

                worker.RunWorkerCompleted += delegate(object s, RunWorkerCompletedEventArgs args)
                {
                    LoadingScreen.CloseWaitingScreen();

                };
                worker.RunWorkerAsync();

            return result;
        }


        public static int EnableDisableSingleShift(DateTime date, int MachineID, bool value, int shift)
        {
            int result = 0;
            string colName = string.Empty;

            if (shift == 1)
            {
                colName = "day_shift";
            }
            else if (shift == 2)
            {
                colName = "evening_shift";
            }
            else if (shift == 3)
            {
                colName = "night_shift";
            }

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmd = new SqlCommand("UPDATE ProductionTimeTable SET " + colName + " = @val " +
                                                " WHERE machine_id = @MachineID AND date = @Date", conn);

                conn.Open();
                try
                {
                    cmd.Parameters.AddWithValue("@MachineID", MachineID);
                    cmd.Parameters.AddWithValue("@Date", date);
                    cmd.Parameters.AddWithValue("@val", value);
                    result = cmd.ExecuteNonQuery();
                    cmd.Parameters.Clear();

                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error: Updating ProductionTimeTable " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return result;
        }


        public static Tuple<List<GradingScheduling>, List<CurrentCapacity>> GetAllGradingCapacitesToMove(int id, DateTime date, string type, int shift, string btnType)
        {
            int count = 0;
            string nDate = date.ToString("yyyy-MM-dd");
            DateTime currDate = DateTime.Now;
            List<CurrentCapacity> ccList = new List<CurrentCapacity>();
            List<GradingScheduling> gsList = new List<GradingScheduling>();
            //Day Disable only
            if (shift == 0)
            {
                shift = 1;
            }
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    List<ProductionTimeTable> pttList = GetProductionTimeTableByID(1, date);

                    using (SqlCommand cmdSelectExistance = new SqlCommand("SELECT COUNT(*) FROM GradingScheduling " +
                                                                          "WHERE production_time_table_id = @ProdTimeTableId AND shift =@Shift", conn))


                    using (SqlCommand cmdSelectCC = new SqlCommand("SELECT CurrentCapacity.id,CurrentCapacity.prod_timetable_id,CurrentCapacity.product_capacity_id,CurrentCapacity.sales_id,CurrentCapacity.raw_product_id,CurrentCapacity.product_id,CurrentCapacity.prod_timetable_id,CurrentCapacity.shift,CurrentCapacity.capacity_kg,CurrentCapacity.blocks_logs,CurrentCapacity.order_type, " +
                                                                   "ProductionTimeTable.date, " +
                                                                   "Orders.required_date,Orders.required_date_selected " +
                                                                   "FROM CurrentCapacity " +
                                                                   "INNER JOIN ProductionTimeTable ON CurrentCapacity.prod_timetable_id = ProductionTimeTable.id " +
                                                                   "INNER JOIN Orders ON CurrentCapacity.sales_id = Orders.order_id " +
                                                                   "WHERE ((ProductionTimeTable.date > @Date AND shift >= 1) or (shift >= @Shift AND ProductionTimeTable.date = @Date)) " +
                                                                   "ORDER BY CurrentCapacity.order_type, Orders.required_date_selected desc, Orders.required_date, ProductionTimeTable.date", conn))


                    using (SqlCommand cmdSelectGS = new SqlCommand("SELECT GradingScheduling.id,GradingScheduling.production_time_table_id,GradingScheduling.raw_product_id,GradingScheduling.sales_id,GradingScheduling.blocklog_qty,GradingScheduling.shift,GradingScheduling.status,GradingScheduling.order_type,GradingScheduling.active_order,GradingScheduling.print_counter, " +
                                                                   "ProductionTimeTable.date, " +
                                                                   "Orders.required_date,Orders.required_date_selected " +
                                                                   "FROM GradingScheduling  " +
                                                                   "INNER JOIN ProductionTimeTable ON GradingScheduling.production_time_table_id = ProductionTimeTable.id " +
                                                                   "INNER JOIN Orders ON GradingScheduling.sales_id = Orders.order_id " +
                                                                   "WHERE ((ProductionTimeTable.date > @Date AND shift >= 1) or (shift >= @Shift AND ProductionTimeTable.date = @Date)) " +
                                                                   "ORDER BY GradingScheduling.order_type, Orders.required_date_selected desc, Orders.required_date, ProductionTimeTable.date", conn))
                    {


                        cmdSelectExistance.Parameters.AddWithValue("@ProdTimeTableId", pttList[0].ID);
                        cmdSelectExistance.Parameters.AddWithValue("@Shift", shift);
                        count = (int)cmdSelectExistance.ExecuteScalar();


                        if (count > 0 || type == "Enable" || btnType == "DayButton")
                        {

                            cmdSelectCC.Parameters.AddWithValue("@MachineId", id);
                            cmdSelectCC.Parameters.AddWithValue("@Date", nDate);
                            cmdSelectCC.Parameters.AddWithValue("@Shift", shift);
                            using (SqlDataReader dr = cmdSelectCC.ExecuteReader())
                            {
                                if (dr.HasRows)
                                {
                                    while (dr.Read())
                                    {
                                        DateTime requiredDate = Convert.ToDateTime(dr["required_date"]);
                                        DateTime prodTimeTableDate = Convert.ToDateTime(dr["date"]);
                                        bool isReqDateSelected = Convert.ToBoolean(dr["required_date_selected"]);

                                        //if (type == "Enable")
                                        //{
                                        //    if (((date.Date < prodTimeTableDate) && isReqDateSelected == false) || (isReqDateSelected == true && (requiredDate.Date > prodTimeTableDate || requiredDate.Date < prodTimeTableDate)))
                                        //    {
                                        //        CurrentCapacity cc = new CurrentCapacity();
                                        //        cc.ProdTimeTableID = Convert.ToInt32(dr["prod_timetable_id"]);
                                        //        cc.ProductCapacityID = Convert.ToInt16(dr["product_capacity_id"]);
                                        //        cc.SalesID = Convert.ToInt32(dr["sales_id"]);
                                        //        cc.RawProductID = Convert.ToInt16(dr["raw_product_id"]);
                                        //        cc.ProductID = Convert.ToInt16(dr["product_id"]);
                                        //        cc.Shift = Convert.ToInt16(dr["shift"]);
                                        //        cc.CapacityKG = Convert.ToDecimal(dr["capacity_kg"]);
                                        //        cc.BlocksLogs = Convert.ToDecimal(dr["blocks_logs"]);
                                        //        cc.OrderType = Convert.ToInt16(dr["order_type"]);
                                        //        ccList.Add(cc);
                                        //    }
                                        //}
                                        //else if (type == "Disable")
                                        //{
                                        if ((date.Date == prodTimeTableDate) || (date.Date < prodTimeTableDate && isReqDateSelected == false) || (isReqDateSelected == true && (requiredDate.Date > prodTimeTableDate || requiredDate.Date < prodTimeTableDate)))
                                        {
                                            CurrentCapacity cc = new CurrentCapacity();
                                            cc.ID = Convert.ToInt32(dr["id"]);
                                            cc.ProdTimeTableID = Convert.ToInt32(dr["prod_timetable_id"]);
                                            cc.ProductCapacityID = Convert.ToInt16(dr["product_capacity_id"]);
                                            cc.SalesID = Convert.ToInt32(dr["sales_id"]);
                                            cc.RawProductID = Convert.ToInt16(dr["raw_product_id"]);
                                            cc.ProductID = Convert.ToInt16(dr["product_id"]);
                                            cc.Shift = Convert.ToInt16(dr["shift"]);
                                            cc.CapacityKG = Convert.ToDecimal(dr["capacity_kg"]);
                                            cc.BlocksLogs = Convert.ToDecimal(dr["blocks_logs"]);
                                            cc.OrderType = Convert.ToInt16(dr["order_type"]);
                                            ccList.Add(cc);
                                        }
                                        //}
                                    }
                                }
                            }

                            cmdSelectGS.Parameters.AddWithValue("@MachineId", id);
                            cmdSelectGS.Parameters.AddWithValue("@date", nDate);
                            cmdSelectGS.Parameters.AddWithValue("@Shift", shift);
                            using (SqlDataReader dr = cmdSelectGS.ExecuteReader())
                            {
                                if (dr.HasRows)
                                {
                                    while (dr.Read())
                                    {

                                        DateTime requiredDate = Convert.ToDateTime(dr["required_date"]);
                                        DateTime prodTimeTableDate = Convert.ToDateTime(dr["date"]);
                                        bool isReqDateSelected = Convert.ToBoolean(dr["required_date_selected"]);

                                        //if (type == "Enable")
                                        //{
                                        //    if ((date.Date == prodTimeTableDate) || (date.Date < prodTimeTableDate && isReqDateSelected == false) || (isReqDateSelected == true && (requiredDate.Date > prodTimeTableDate || requiredDate.Date < prodTimeTableDate)))
                                        //    {
                                        //        GradingScheduling gs = new GradingScheduling();
                                        //        gs.ProductionTimeTableID = Convert.ToInt32(dr["production_time_table_id"]);
                                        //        gs.RawProductID = Convert.ToInt16(dr["raw_product_id"]);
                                        //        gs.SalesID = Convert.ToInt32(dr["sales_id"]);
                                        //        gs.BlocklogQty = Convert.ToDecimal(dr["blocklog_qty"]);
                                        //        gs.Shift = Convert.ToInt16(dr["shift"]);
                                        //        gs.Status = dr["status"].ToString();
                                        //        gs.OrderType = Convert.ToInt16(dr["order_type"]);
                                        //        gs.ActiveOrder = Convert.ToBoolean(dr["active_order"]);
                                        //        gs.PrintCounter = Convert.ToInt16(dr["print_counter"]);
                                        //        gsList.Add(gs);
                                        //    }
                                        //}
                                        //else if (type == "Disable")
                                        //{
                                        if ((date.Date == prodTimeTableDate) || (date.Date < prodTimeTableDate && isReqDateSelected == false) || (isReqDateSelected == true && (requiredDate.Date > prodTimeTableDate || requiredDate.Date < prodTimeTableDate)))
                                        {

                                            GradingScheduling gs = new GradingScheduling();
                                            gs.ID = Convert.ToInt32(dr["id"]);
                                            gs.ProductionTimeTableID = Convert.ToInt32(dr["production_time_table_id"]);
                                            gs.RawProductID = Convert.ToInt16(dr["raw_product_id"]);
                                            gs.SalesID = Convert.ToInt32(dr["sales_id"]);
                                            gs.BlocklogQty = Convert.ToDecimal(dr["blocklog_qty"]);
                                            gs.Shift = Convert.ToInt16(dr["shift"]);
                                            gs.Status = dr["status"].ToString();
                                            gs.OrderType = Convert.ToInt16(dr["order_type"]);
                                            gs.ActiveOrder = Convert.ToBoolean(dr["active_order"]);
                                            gs.PrintCounter = Convert.ToInt16(dr["print_counter"]);
                                            gsList.Add(gs);
                                        }
                                        //}
                                    }
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading Product Capacity: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            foreach (var item in gsList)
            {
                Console.WriteLine(item.ProductionTimeTableID + " " + item.Shift + " " + item.RawProductID + " " + item.BlocklogQty + " " + item.RequiredDateSelected + " " + item.SalesID);
            }
            return Tuple.Create(gsList, ccList);
        }

        public static int InsertCapacityAndGradingSchedulingBackUp(DateTime backUpDate, List<CurrentCapacity> CurrentCap, List<GradingScheduling> GradingScheduling, string type)
        {
            int result = 0;
            DateTime backUpDateTime = DateTime.Now.Date;
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {

                SqlCommand cmdCurrCapInsert = new SqlCommand("INSERT INTO CurrentCapacityBackUp(backup_date,backup_shift_id,backup_type,id,prod_timetable_id,product_capacity_id,sales_id,raw_product_id,product_id,shift,capacity_kg,blocks_logs,order_type) " +
                                                      "VALUES (@backup_date,@backup_shift,@backup_type,@id,@prodTimeTableIdParam,@prodCapIdparam,@salesIdParam,@RawProdIdParam,@ProductIdParam,@ShiftParam,@CapacityKgParam,@BlockLogsParam,@OrderTypeParam)", conn);

                SqlCommand cmdGradingSchInsert = new SqlCommand("INSERT INTO GradingSchedulingBackUp(backup_date,backup_shift_id,backup_type,id,production_time_table_id,raw_product_id,sales_id,blocklog_qty,shift,status,order_type,active_order,print_counter) VALUES " +
                                                      "(@backup_date,@backup_shift,@backup_type,@id,@newProdTimeTableIdParam,@rawProductIdParam,@salesIdParam,@newBlock,@newShift,@statusParam,@orderTypeParam,@activeParam,@printCounterParam)", conn);

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {
                    backUpDateTime = backUpDate.Add(new TimeSpan(DateTime.Now.Hour, DateTime.Now.Minute, DateTime.Now.Second));

                    foreach (var item in CurrentCap)
                    {
                        cmdCurrCapInsert.Transaction = trans;
                        cmdCurrCapInsert.Parameters.AddWithValue("@backup_date", backUpDateTime);
                        cmdCurrCapInsert.Parameters.AddWithValue("@backup_shift", item.Shift);
                        cmdCurrCapInsert.Parameters.AddWithValue("@backup_type", type);
                        cmdCurrCapInsert.Parameters.AddWithValue("@id", item.ID);
                        cmdCurrCapInsert.Parameters.AddWithValue("@prodTimeTableIdParam", item.ProdTimeTableID);
                        cmdCurrCapInsert.Parameters.AddWithValue("@prodCapIdparam", item.ProductCapacityID);
                        cmdCurrCapInsert.Parameters.AddWithValue("@salesIdParam", item.SalesID);
                        cmdCurrCapInsert.Parameters.AddWithValue("@RawProdIdParam", item.RawProductID);
                        cmdCurrCapInsert.Parameters.AddWithValue("@ProductIdParam", item.ProductID);
                        cmdCurrCapInsert.Parameters.AddWithValue("@ShiftParam", item.Shift);
                        cmdCurrCapInsert.Parameters.AddWithValue("@CapacityKgParam", item.CapacityKG);
                        cmdCurrCapInsert.Parameters.AddWithValue("@BlockLogsParam", item.BlocksLogs);
                        cmdCurrCapInsert.Parameters.AddWithValue("@OrderTypeParam", item.OrderType);
                        result = cmdCurrCapInsert.ExecuteNonQuery();
                        cmdCurrCapInsert.Parameters.Clear();
                    }

                    foreach (var item in GradingScheduling)
                    {
                        cmdGradingSchInsert.Transaction = trans;
                        cmdGradingSchInsert.Parameters.AddWithValue("@backup_date", backUpDateTime);
                        cmdGradingSchInsert.Parameters.AddWithValue("@backup_shift", item.Shift);
                        cmdGradingSchInsert.Parameters.AddWithValue("@backup_type", type);
                        cmdGradingSchInsert.Parameters.AddWithValue("@id", item.ID);
                        cmdGradingSchInsert.Parameters.AddWithValue("@newProdTimeTableIdParam", item.ProductionTimeTableID);
                        cmdGradingSchInsert.Parameters.AddWithValue("@rawProductIdParam", item.RawProductID);
                        cmdGradingSchInsert.Parameters.AddWithValue("@salesIdParam", item.SalesID);
                        cmdGradingSchInsert.Parameters.AddWithValue("@newBlock", item.BlocklogQty);
                        cmdGradingSchInsert.Parameters.AddWithValue("@newShift", item.Shift);
                        cmdGradingSchInsert.Parameters.AddWithValue("@statusParam", item.Status);
                        cmdGradingSchInsert.Parameters.AddWithValue("@orderTypeParam", item.OrderType);
                        cmdGradingSchInsert.Parameters.AddWithValue("@activeParam", item.ActiveOrder);
                        cmdGradingSchInsert.Parameters.AddWithValue("@printCounterParam", item.PrintCounter);
                        result = cmdGradingSchInsert.ExecuteNonQuery();
                        cmdGradingSchInsert.Parameters.Clear();
                    }

                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("SQL UPDATE COMMAND ERROR OCCURED :  Backup both CurrentCapacityBackUp and GradingSchedulingBackUp tables" + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return result;
        }


        public static int DeleteCapacity(List<CurrentCapacity> capList, List<GradingScheduling> gradingList)
        {

            int result = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                //INSERT INTO CURRENT CAPACITY
                SqlCommand cmdDeleteCurrCap = new SqlCommand("DELETE FROM CurrentCapacity " +
                                                       "WHERE prod_timetable_id=@prod_timetable_id AND product_capacity_id=@product_capacity_id and shift=@shift and sales_id=@sales_id and raw_product_id=@raw_product_id and order_type = @orderType", conn);

                //INSERT INTO GRADING
                SqlCommand cmdDeleteGradingSched = new SqlCommand("DELETE FROM GradingScheduling " +
                                                       "WHERE production_time_table_id=@production_time_table_id and shift=@shift and sales_id=@sales_id and raw_product_id=@raw_product_id and order_type = @orderType", conn);

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {
                    foreach (var item in capList)
                    {
                        //DELETE CURRENT CAPACITY
                        cmdDeleteCurrCap.Transaction = trans;
                        cmdDeleteCurrCap.Parameters.AddWithValue("@prod_timetable_id", item.ProdTimeTableID);
                        cmdDeleteCurrCap.Parameters.AddWithValue("@product_capacity_id", item.ProductCapacityID);
                        cmdDeleteCurrCap.Parameters.AddWithValue("@shift", item.Shift);
                        cmdDeleteCurrCap.Parameters.AddWithValue("@sales_id", item.SalesID);
                        cmdDeleteCurrCap.Parameters.AddWithValue("@raw_product_id", item.RawProductID);
                        cmdDeleteCurrCap.Parameters.AddWithValue("@orderType", item.OrderType);

                        result = cmdDeleteCurrCap.ExecuteNonQuery();
                        cmdDeleteCurrCap.Parameters.Clear();
                    }

                    foreach (var item in gradingList)
                    {
                        //DELETE GRADING SCHEDULING
                        cmdDeleteGradingSched.Transaction = trans;
                        cmdDeleteGradingSched.Parameters.AddWithValue("@production_time_table_id", item.ProductionTimeTableID);
                        cmdDeleteGradingSched.Parameters.AddWithValue("@raw_product_id", item.RawProductID);
                        cmdDeleteGradingSched.Parameters.AddWithValue("@sales_id", item.SalesID);
                        cmdDeleteGradingSched.Parameters.AddWithValue("@shift", item.Shift);
                        cmdDeleteGradingSched.Parameters.AddWithValue("@orderType", item.OrderType);

                        result = cmdDeleteGradingSched.ExecuteNonQuery();
                        cmdDeleteGradingSched.Parameters.Clear();
                    }

                    trans.Commit();
                }

                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("SQL Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return result;
        }

        public static int AllocateGradingCapacity(List<CurrentCapacity> capList, List<GradingScheduling> gradingList)
        {
            int result = 0;
            decimal totCapKg = 0;
            decimal totBlocksLogs = 0;
            decimal totBlocksLogsGS = 0;
            int totPrintCounter = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                //CHECK EXISTING VALUES IN CURRENT CAPACITY
                SqlCommand cmdSelect = new SqlCommand("SELECT capacity_kg, blocks_logs FROM CurrentCapacity " +
                                                      "WHERE prod_timetable_id = @ProdTimeTableId AND product_capacity_id = @ProductCapacityId AND raw_product_id =@RawproductId AND shift=@Shift AND sales_id = @SalesId AND order_type = @OrderType", conn);
                //INSERT INTO CURRENT CAPACITY
                SqlCommand cmdCurrCap = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM CurrentCapacity WHERE " +
                                                       "prod_timetable_id=@ProdTimeTableId AND product_capacity_id = @ProdCapacityId AND raw_product_id =@RawproductId AND shift=@Shift AND sales_id = @SalesId AND order_type = @OrderType) " +
                                                       "INSERT INTO CurrentCapacity VALUES(@ProdTimeTableId,@ProdCapacityId,@SalesId,@RawproductId,@productId,@Shift,@CapacityKg,@BlockSLogs,@OrderType) " +
                                                       "ELSE " +
                                                       "UPDATE CurrentCapacity SET capacity_kg=@CapacityKg, blocks_logs=@BlockSLogs WHERE prod_timetable_id = @ProdTimeTableId AND product_capacity_id = @ProdCapacityId AND sales_id=@SalesId AND raw_product_id=@RawproductId AND shift=@Shift AND order_type=@OrderType", conn);

                //CHECK EXISTING VAUES IN THE GRADING SCHEDULE
                SqlCommand cmdSelectGS = new SqlCommand("SELECT blocklog_qty, print_counter FROM GradingScheduling " +
                                                       "WHERE production_time_table_id=@ProdTimeTableId AND raw_product_id =@RawproductId AND shift=@Shift AND sales_id = @SalesId AND status=@Status AND order_type = @OrderType", conn);

                //INSERT INTO GRADING
                SqlCommand cmdGradingSched = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM GradingScheduling WHERE " +
                                                            "production_time_table_id=@ProdTimeTableId AND raw_product_id =@RawproductId AND shift=@Shift AND sales_id = @SalesId AND order_type = @OrderType) " +
                                                            "INSERT INTO GradingScheduling VALUES(@ProdTimeTableId,@RawproductId,@SalesId,@BlockSLogs,@Shift,@Status,@OrderType,@Active,@PrintCounter) " +
                                                            "ELSE " +
                                                            "UPDATE GradingScheduling SET blocklog_qty=@BlockSLogs, active_order=@Active, print_counter=@PrintCounterParam " +
                                                            "WHERE production_time_table_id=@ProdTimeTableId AND raw_product_id =@RawproductId AND shift=@Shift AND sales_id = @SalesId AND order_type=@OrderType", conn);


                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {
                    foreach (var item in capList)
                    {
                        cmdSelect.Transaction = trans;
                        cmdSelect.Parameters.AddWithValue("@ProdTimeTableId", item.ProdTimeTableID);
                        cmdSelect.Parameters.AddWithValue("@ProductCapacityId", item.ProductCapacityID);
                        cmdSelect.Parameters.AddWithValue("@RawproductId", item.RawProductID);
                        cmdSelect.Parameters.AddWithValue("@SalesId", item.SalesID);
                        cmdSelect.Parameters.AddWithValue("@Shift", item.Shift);
                        cmdSelect.Parameters.AddWithValue("@OrderType", item.OrderType);
                        using (SqlDataReader dr = cmdSelect.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                if (dr.HasRows)
                                {
                                    totCapKg = 0;
                                    totBlocksLogs = 0;
                                    while (dr.Read())
                                    {
                                        totCapKg += Convert.ToDecimal(dr["capacity_kg"]);
                                        totBlocksLogs += Convert.ToDecimal(dr["blocks_logs"]);
                                    }
                                    totCapKg += item.CapacityKG;
                                    totBlocksLogs += item.BlocksLogs;
                                }
                                else
                                {
                                    totCapKg = item.CapacityKG;
                                    totBlocksLogs = item.BlocksLogs;
                                }
                            }
                        }
                        cmdSelect.Parameters.Clear();
                        //INSERT INTO CURRENT CAPACITY
                        cmdCurrCap.Transaction = trans;
                        cmdCurrCap.Parameters.AddWithValue("@ProdTimeTableId", item.ProdTimeTableID);
                        cmdCurrCap.Parameters.AddWithValue("@ProdCapacityId", item.ProductCapacityID);
                        cmdCurrCap.Parameters.AddWithValue("@SalesId", item.SalesID);
                        cmdCurrCap.Parameters.AddWithValue("@RawproductId", item.RawProductID);
                        cmdCurrCap.Parameters.AddWithValue("@productId", item.ProductID);
                        cmdCurrCap.Parameters.AddWithValue("@Shift", item.Shift);
                        cmdCurrCap.Parameters.AddWithValue("@CapacityKg", totCapKg);
                        cmdCurrCap.Parameters.AddWithValue("@BlockSLogs", totBlocksLogs);
                        cmdCurrCap.Parameters.AddWithValue("@OrderType", item.OrderType);

                        result = cmdCurrCap.ExecuteNonQuery();
                        cmdCurrCap.Parameters.Clear();
                    }
                    foreach (var item in gradingList)
                    {

                        cmdSelectGS.Transaction = trans;
                        cmdSelectGS.Parameters.AddWithValue("@ProdTimeTableId", item.ProductionTimeTableID);
                        cmdSelectGS.Parameters.AddWithValue("@RawproductId", item.RawProductID);
                        cmdSelectGS.Parameters.AddWithValue("@SalesId", item.SalesID);
                        cmdSelectGS.Parameters.AddWithValue("@Shift", item.Shift);
                        cmdSelectGS.Parameters.AddWithValue("@Status", "Grading");
                        cmdSelectGS.Parameters.AddWithValue("@OrderType", item.OrderType);
                        using (SqlDataReader dr = cmdSelectGS.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                if (dr.HasRows)
                                {
                                    totBlocksLogsGS = 0;
                                    totPrintCounter = 0;
                                    while (dr.Read())
                                    {
                                        totBlocksLogsGS += Convert.ToDecimal(dr["blocklog_qty"]);
                                        totPrintCounter += Convert.ToInt32(dr["print_counter"]);
                                    }
                                    totBlocksLogsGS += item.BlocklogQty;
                                    totPrintCounter += item.PrintCounter;
                                }
                                else
                                {
                                    totBlocksLogsGS = item.BlocklogQty;
                                    totPrintCounter = item.PrintCounter;
                                }
                            }
                        }
                        cmdSelectGS.Parameters.Clear();

                        cmdGradingSched.Transaction = trans;
                        cmdGradingSched.Parameters.AddWithValue("@ProdTimeTableId", item.ProductionTimeTableID);
                        cmdGradingSched.Parameters.AddWithValue("@RawproductId", item.RawProductID);
                        cmdGradingSched.Parameters.AddWithValue("@SalesId", item.SalesID);
                        cmdGradingSched.Parameters.AddWithValue("@Shift", item.Shift);
                        cmdGradingSched.Parameters.AddWithValue("@BlockSLogs", totBlocksLogsGS);
                        cmdGradingSched.Parameters.AddWithValue("@Status", "Grading");
                        cmdGradingSched.Parameters.AddWithValue("@OrderType", item.OrderType);
                        cmdGradingSched.Parameters.AddWithValue("@Active", item.ActiveOrder);
                        cmdGradingSched.Parameters.AddWithValue("@PrintCounter", item.PrintCounter);
                        cmdGradingSched.Parameters.AddWithValue("@PrintCounterParam", totPrintCounter);

                        result = cmdGradingSched.ExecuteNonQuery();
                        cmdGradingSched.Parameters.Clear();
                    }


                    trans.Commit();
                }

                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("SQL Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return result;
        }

        public static int UpdateSalesOrderRequiredDate(DateTime date, DateTime newDate, Int32 id, int cusId)
        {
            int result = 0;
            string nDate = date.ToString("yyyy-MM-dd");

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmd = new SqlCommand("UPDATE SalesOrder SET required_date = @NewDate WHERE id = @SalesID AND customer_id=@CustomerID", conn);

                conn.Open();
                try
                {
                    cmd.Parameters.AddWithValue("@SalesID", id);
                    cmd.Parameters.AddWithValue("@CustomerID", cusId);
                    cmd.Parameters.AddWithValue("@Date", nDate);
                    cmd.Parameters.AddWithValue("@NewDate", newDate);
                    result = cmd.ExecuteNonQuery();
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error: Updating SalesOrder Required Date" + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return result;
        }



        public static int ConvertOrder(ConvertOrderViewModel shiftProductionViewModel, List<GradedStock> gradedStockList)
        {
            int res = 0;
            decimal exGradBlk = 0;
            decimal desGradBlk = 0;
            List<CurrentCapacity> exCCList = new List<CurrentCapacity>();
            List<CurrentCapacity> desCCList = new List<CurrentCapacity>();




            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdSelectGSExisting = new SqlCommand("SELECT * FROM GradingScheduling " +
                                                                "WHERE production_time_table_id = @prodTimeTableIdParam AND raw_product_id = @rawProductIdParam AND sales_id = @salesIdParam " +
                                                                "AND shift = @shiftParam AND order_type = @OrderType", conn);

                SqlCommand cmdSelectCCExisting = new SqlCommand("SELECT * FROM CurrentCapacity " +
                                                                "WHERE prod_timetable_id = @prodTimeTableIdParam AND product_capacity_id = @ProdCapID AND raw_product_id = @rawProductIdParam " +
                                                                "AND sales_id = @salesIdParam AND shift = @shiftParam AND order_type = @OrderType", conn);
                //SELECT source GradingScheduling
                SqlCommand cmdSelectGSSource = new SqlCommand("SELECT * FROM GradingScheduling " +
                                                              "WHERE production_time_table_id = @prodTimeTableIdParam AND raw_product_id = @rawProductIdParam AND sales_id = @salesIdParam " +
                                                              "AND shift = @shiftParam AND order_type = @OrderType AND order_type=@OrderType AND status =@Status", conn);
                //SELECT source CurrentCapacity
                SqlCommand cmdSelectCCSource = new SqlCommand("SELECT * FROM CurrentCapacity " +
                                                                "WHERE prod_timetable_id = @prodTimeTableIdParam AND product_capacity_id = @ProdCapID AND raw_product_id = @rawProductIdParam " +
                                                                "AND sales_id = @salesIdParam AND shift = @shiftParam AND order_type = @OrderType", conn);


                //UPDATE existing CurrentCapacity
                SqlCommand cmdUpCC = new SqlCommand("UPDATE CurrentCapacity SET capacity_kg =@CapacityKg, blocks_logs = @BlocksLogs " +
                                                    "WHERE prod_timetable_id = @prodTimeTableIdParam AND product_capacity_id = @prodCap AND sales_id = @salesIdParam AND " +
                                                    "raw_product_id = @rawProductIdParam AND shift = @oldShift AND order_type=@OrderType", conn);
                //UPDATE existing GradingScheduling for half insert
                SqlCommand cmdUpGS = new SqlCommand("UPDATE GradingScheduling SET blocklog_qty= @BlocksLogs " +
                                                    "WHERE production_time_table_id = @prodTimeTableIdParam AND raw_product_id = @rawProductIdParam AND sales_id = @salesIdParam " +
                                                    "AND shift = @oldShift AND status = @statusParam AND order_type =@OrderType", conn);

                //UPDATE existing GradingScheduling
                SqlCommand cmdUpGSSource = new SqlCommand("UPDATE GradingScheduling SET order_type= @NewOrderType " +
                                                          "WHERE production_time_table_id = @prodTimeTableIdParam AND raw_product_id = @rawProductIdParam AND sales_id = @salesIdParam " +
                                                          "AND shift = @Shift AND status = @statusParam AND order_type =@OrderType", conn);
                //UPDATE existing CurrentCapacity
                SqlCommand cmdUpCCSource = new SqlCommand("UPDATE CurrentCapacity SET order_type =@NewOrderType " +
                                                          "WHERE prod_timetable_id = @prodTimeTableIdParam AND product_capacity_id = @prodCap AND sales_id = @salesIdParam AND " +
                                                          "raw_product_id = @rawProductIdParam AND shift = @oldShift AND order_type=@OrderType", conn);

                //INSTERT OR UPDATE INTO GradingScheduling
                SqlCommand cmdInsUpGS = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM GradingScheduling " +
                                                      "WHERE production_time_table_id=@InsProdTimeTableId AND raw_product_id =@InsRawproductId AND shift=@InsShift AND sales_id = @InsSalesId AND order_type=@InsOrderType AND status=@InsStatusParam) " +
                                                      "INSERT INTO GradingScheduling VALUES(@InsProdTimeTableId,@InsRawproductId,@InsSalesId,@InsBlockSLogs,@InsShift,@InsStatusParam,@InsOrderType,@InsActive,@InsPrintCounter) " +
                                                      "ELSE " +
                                                      "UPDATE GradingScheduling SET blocklog_qty=@BlockSLogs, order_type=@OrderType " +
                                                      "WHERE production_time_table_id=@ProdTimeTableId AND raw_product_id =@RawproductId AND shift=@Shift AND sales_id = @SalesId AND order_type=@Ordertype AND status=@StatusParam", conn);



                //INSTERT OR UPDATE CurrentCapacity
                SqlCommand cmdInsUpCCD = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM CurrentCapacity " +
                                                       "WHERE prod_timetable_id = @ProdTimeTableId AND product_capacity_id = @CapacityID AND sales_id = @SalesId AND raw_product_id = @RawproductId AND shift = @Shift AND order_type = @OrderType) " +
                                                       "INSERT INTO CurrentCapacity VALUES(@NewProdTimeTableId,@NewCapacityId,@NewSalesId,@NewRawproductId,@NewProductId,@NewShift,@NewCapacityKgParam,@NewBlockSLogs,@NewOrderType) " +
                                                       "ELSE " +
                                                       "UPDATE CurrentCapacity SET capacity_kg=@CapacityKg,blocks_logs=@BlockSLogs " +
                                                       "WHERE prod_timetable_id=@ProdTimeTableId2 AND product_capacity_id = @CapacityId2 AND sales_id = @SalesId2 AND raw_product_id =@RawproductId2 AND product_id = @ProductId2 AND shift=@Shift2 AND order_type=@Ordertype2", conn);
                //DELETE GRADINGSCHEDULING
                SqlCommand cmdDeleteGS = new SqlCommand("DELETE FROM GradingScheduling " +
                                                        "WHERE production_time_table_id = @prodTimeTableIdParam AND raw_product_id = @rawProductIdParam AND sales_id = @salesIdParam AND shift = @oldShift AND status = @statusParam AND order_type = @Ordertype", conn);
                //DELETE CURRENTCAPACITY
                SqlCommand cmdDeleteCC = new SqlCommand("DELETE FROM CurrentCapacity " +
                                                        "WHERE prod_timetable_id = @prodTimeTableIdParam AND product_capacity_id = @prodCap AND sales_id = @salesIdParam AND " +
                                                        "raw_product_id = @rawProductIdParam AND shift = @oldShift AND order_type = @Ordertype", conn);


                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {
                    /**********RETRIEVING FROM EXISTING GRADINGSCHEDULING*********/
                    cmdSelectGSExisting.Transaction = trans;
                    cmdSelectGSExisting.Parameters.AddWithValue("@prodTimeTableIdParam", shiftProductionViewModel.RawProductionDetails.ProdTimeTableID);
                    cmdSelectGSExisting.Parameters.AddWithValue("@salesIdParam", shiftProductionViewModel.RawProductionDetails.SalesOrderId);
                    cmdSelectGSExisting.Parameters.AddWithValue("@rawProductIdParam", shiftProductionViewModel.RawProductionDetails.RawProduct.RawProductID);
                    cmdSelectGSExisting.Parameters.AddWithValue("@shiftParam", shiftProductionViewModel.RawProductionDetails.Shift);
                    cmdSelectGSExisting.Parameters.AddWithValue("@OrderType", shiftProductionViewModel.RawProductionDetails.OrderType);

                    using (SqlDataReader dr = cmdSelectGSExisting.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    exGradBlk = Convert.ToInt32(dr["blocklog_qty"]);
                                }
                            }
                        }
                    }

                    /**********RETRIEVING FROM EXISTING CURRENTCAPACITY*********/
                    foreach (var item in gradedStockList)
                    {
                        //Selecting records from Current Capacity
                        cmdSelectCCExisting.Transaction = trans;
                        cmdSelectCCExisting.Parameters.AddWithValue("@prodTimeTableIdParam", shiftProductionViewModel.RawProductionDetails.ProdTimeTableID);
                        cmdSelectCCExisting.Parameters.AddWithValue("@ProdCapID", item.ID);
                        cmdSelectCCExisting.Parameters.AddWithValue("@salesIdParam", shiftProductionViewModel.RawProductionDetails.SalesOrderId);
                        cmdSelectCCExisting.Parameters.AddWithValue("@rawProductIdParam", shiftProductionViewModel.RawProductionDetails.RawProduct.RawProductID);
                        cmdSelectCCExisting.Parameters.AddWithValue("@shiftParam", shiftProductionViewModel.RawProductionDetails.Shift);
                        cmdSelectCCExisting.Parameters.AddWithValue("@OrderType", shiftProductionViewModel.RawProductionDetails.OrderType);

                        using (SqlDataReader dr = cmdSelectCCExisting.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                if (dr.HasRows)
                                {
                                    while (dr.Read())
                                    {
                                        CurrentCapacity cc = new CurrentCapacity();
                                        cc.ProductCapacityID = Convert.ToInt16(dr["product_capacity_id"]);
                                        cc.CapacityKG = Convert.ToDecimal(dr["capacity_kg"]);
                                        cc.BlocksLogs = Convert.ToDecimal(dr["blocks_logs"]);
                                        exCCList.Add(cc);
                                    }
                                }
                            }
                        }
                        cmdSelectCCExisting.Parameters.Clear();
                    }

                    //Destination Select - GradingScheduling
                    cmdSelectGSSource.Transaction = trans;
                    cmdSelectGSSource.Parameters.AddWithValue("@prodTimeTableIdParam", shiftProductionViewModel.RawProductionDetails.ProdTimeTableID);
                    cmdSelectGSSource.Parameters.AddWithValue("@salesIdParam", shiftProductionViewModel.RawProductionDetails.SalesOrderId);
                    cmdSelectGSSource.Parameters.AddWithValue("@rawProductIdParam", shiftProductionViewModel.RawProductionDetails.RawProduct.RawProductID);
                    cmdSelectGSSource.Parameters.AddWithValue("@shiftParam", shiftProductionViewModel.RawProductionDetails.Shift);
                    cmdSelectGSSource.Parameters.AddWithValue("@OrderType", 4);
                    cmdSelectGSSource.Parameters.AddWithValue("@Status", "Grading");

                    using (SqlDataReader dr = cmdSelectGSSource.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    desGradBlk = Convert.ToInt32(dr["blocklog_qty"]);
                                }
                            }
                        }
                    }

                    //Destination Select - CurrentCapacity
                    foreach (var item in gradedStockList)
                    {
                        //Selecting records from Current Capacity
                        cmdSelectCCSource.Transaction = trans;
                        cmdSelectCCSource.Parameters.AddWithValue("@prodTimeTableIdParam", shiftProductionViewModel.RawProductionDetails.ProdTimeTableID);
                        cmdSelectCCSource.Parameters.AddWithValue("@ProdCapID", item.ID);
                        cmdSelectCCSource.Parameters.AddWithValue("@salesIdParam", shiftProductionViewModel.RawProductionDetails.SalesOrderId);
                        cmdSelectCCSource.Parameters.AddWithValue("@rawProductIdParam", shiftProductionViewModel.RawProductionDetails.RawProduct.RawProductID);
                        cmdSelectCCSource.Parameters.AddWithValue("@shiftParam", shiftProductionViewModel.RawProductionDetails.Shift);
                        cmdSelectCCSource.Parameters.AddWithValue("@OrderType", 4);

                        using (SqlDataReader dr = cmdSelectCCSource.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                if (dr.HasRows)
                                {
                                    while (dr.Read())
                                    {
                                        CurrentCapacity cc = new CurrentCapacity();
                                        cc.ProductCapacityID = Convert.ToInt16(dr["product_capacity_id"]);
                                        cc.CapacityKG = Convert.ToDecimal(dr["capacity_kg"]);
                                        cc.BlocksLogs = Convert.ToDecimal(dr["blocks_logs"]);
                                        desCCList.Add(cc);
                                    }
                                }
                            }
                        }
                        cmdSelectCCSource.Parameters.Clear();
                    }

                    /*******UPDATING SOURCE CURRENTCAPACITY AND GRADINGSCHEDULING*******/

                    /*******UPDATE CURRENTCAPACITY AND GRADINGSCHEDULING*******/
                    if (shiftProductionViewModel.Qty < shiftProductionViewModel.RawProductionDetails.BlockLogQty && shiftProductionViewModel.Qty > 0)
                    {
                        decimal blkToUpdate = 0;
                        decimal kgToUpdate = 0;

                        blkToUpdate = exGradBlk - shiftProductionViewModel.Qty;

                        /*******UPDATE SOURCE GRADINGSCHEDULING*******/
                        cmdUpGS.Transaction = trans;
                        cmdUpGS.Parameters.AddWithValue("@prodTimeTableIdParam", shiftProductionViewModel.RawProductionDetails.ProdTimeTableID);
                        cmdUpGS.Parameters.AddWithValue("@salesIdParam", shiftProductionViewModel.RawProductionDetails.SalesOrderId);
                        cmdUpGS.Parameters.AddWithValue("@rawProductIdParam", shiftProductionViewModel.RawProductionDetails.RawProduct.RawProductID);
                        cmdUpGS.Parameters.AddWithValue("@oldShift", shiftProductionViewModel.RawProductionDetails.Shift);
                        cmdUpGS.Parameters.AddWithValue("@BlocksLogs", blkToUpdate);
                        cmdUpGS.Parameters.AddWithValue("@statusParam", "Grading");
                        cmdUpGS.Parameters.AddWithValue("@OrderType", shiftProductionViewModel.RawProductionDetails.OrderType);
                        res = cmdUpGS.ExecuteNonQuery();

                        /*******UPDATE SOURCE CURRENTCAPACITY*******/
                        foreach (var item in exCCList)
                        {
                            foreach (var itemGSL in gradedStockList)
                            {
                                if (item.ProductCapacityID == itemGSL.ID)
                                {
                                    kgToUpdate = 0;
                                    kgToUpdate = item.CapacityKG - itemGSL.Qty;

                                    cmdUpCC.Transaction = trans;
                                    cmdUpCC.Parameters.AddWithValue("@prodTimeTableIdParam", shiftProductionViewModel.RawProductionDetails.ProdTimeTableID);
                                    cmdUpCC.Parameters.AddWithValue("@prodCap", item.ProductCapacityID);
                                    cmdUpCC.Parameters.AddWithValue("@salesIdParam", shiftProductionViewModel.RawProductionDetails.SalesOrderId);
                                    cmdUpCC.Parameters.AddWithValue("@rawProductIdParam", shiftProductionViewModel.RawProductionDetails.RawProduct.RawProductID);
                                    cmdUpCC.Parameters.AddWithValue("@oldShift", shiftProductionViewModel.RawProductionDetails.Shift);
                                    cmdUpCC.Parameters.AddWithValue("@OrderType", shiftProductionViewModel.RawProductionDetails.OrderType);
                                    cmdUpCC.Parameters.AddWithValue("@CapacityKg", kgToUpdate);
                                    cmdUpCC.Parameters.AddWithValue("@BlocksLogs", blkToUpdate);
                                    cmdUpCC.ExecuteNonQuery();
                                    cmdUpCC.Parameters.Clear();
                                }
                            }
                        }


                        /*******INSERT OR UPDATE CURRENTCAPACITY AND GRADINGSCHEDULING*******/

                        //Destination Insert - GradingScheduling                       
                        cmdInsUpGS.Transaction = trans;
                        cmdInsUpGS.Parameters.AddWithValue("@InsProdTimeTableId", shiftProductionViewModel.RawProductionDetails.ProdTimeTableID);
                        cmdInsUpGS.Parameters.AddWithValue("@InsRawproductId", shiftProductionViewModel.RawProductionDetails.RawProduct.RawProductID);
                        cmdInsUpGS.Parameters.AddWithValue("@InsSalesId", shiftProductionViewModel.RawProductionDetails.SalesOrderId);
                        cmdInsUpGS.Parameters.AddWithValue("@InsShift", shiftProductionViewModel.RawProductionDetails.Shift);
                        cmdInsUpGS.Parameters.AddWithValue("@InsBlockSLogs", shiftProductionViewModel.Qty);
                        cmdInsUpGS.Parameters.AddWithValue("@InsStatusParam", "Grading");
                        cmdInsUpGS.Parameters.AddWithValue("@InsOrderType", 4);
                        cmdInsUpGS.Parameters.AddWithValue("@InsActive", false);
                        cmdInsUpGS.Parameters.AddWithValue("@InsPrintCounter", 0);

                        //Destination Update - GradingScheduling                        
                        cmdInsUpGS.Parameters.AddWithValue("@ProdTimeTableId", shiftProductionViewModel.RawProductionDetails.ProdTimeTableID);
                        cmdInsUpGS.Parameters.AddWithValue("@RawproductId", shiftProductionViewModel.RawProductionDetails.RawProduct.RawProductID);
                        cmdInsUpGS.Parameters.AddWithValue("@SalesId", shiftProductionViewModel.RawProductionDetails.SalesOrderId);
                        cmdInsUpGS.Parameters.AddWithValue("@Shift", shiftProductionViewModel.RawProductionDetails.Shift);
                        cmdInsUpGS.Parameters.AddWithValue("@BlockSLogs", shiftProductionViewModel.Qty + desGradBlk);
                        cmdInsUpGS.Parameters.AddWithValue("@StatusParam", "Grading");
                        cmdInsUpGS.Parameters.AddWithValue("@OrderType", 4);
                        cmdInsUpGS.ExecuteNonQuery();

                        //Destination Update - CurrentCapacity          
                        foreach (var itemGSL in gradedStockList)
                        {
                            decimal kg = 0;

                            foreach (var item in desCCList)
                            {
                                if (itemGSL.ID == item.ProductCapacityID)
                                {
                                    kg = item.CapacityKG;
                                }
                            }

                            kg += itemGSL.Qty;

                            //WHERE
                            cmdInsUpCCD.Transaction = trans;
                            cmdInsUpCCD.Parameters.AddWithValue("@ProdTimeTableId", shiftProductionViewModel.RawProductionDetails.ProdTimeTableID);
                            cmdInsUpCCD.Parameters.AddWithValue("@CapacityID", itemGSL.ID);
                            cmdInsUpCCD.Parameters.AddWithValue("@SalesId", shiftProductionViewModel.RawProductionDetails.SalesOrderId);
                            cmdInsUpCCD.Parameters.AddWithValue("@RawproductId", shiftProductionViewModel.RawProductionDetails.RawProduct.RawProductID);
                            cmdInsUpCCD.Parameters.AddWithValue("@Shift", shiftProductionViewModel.RawProductionDetails.Shift);
                            cmdInsUpCCD.Parameters.AddWithValue("@OrderType", 4);
                            //INSERT
                            cmdInsUpCCD.Parameters.AddWithValue("@NewProdTimeTableId", shiftProductionViewModel.RawProductionDetails.ProdTimeTableID);
                            cmdInsUpCCD.Parameters.AddWithValue("@NewCapacityId", itemGSL.ID);
                            cmdInsUpCCD.Parameters.AddWithValue("@NewSalesId", shiftProductionViewModel.RawProductionDetails.SalesOrderId);
                            cmdInsUpCCD.Parameters.AddWithValue("@NewRawproductId", shiftProductionViewModel.RawProductionDetails.RawProduct.RawProductID);
                            cmdInsUpCCD.Parameters.AddWithValue("@NewProductId", 0);
                            cmdInsUpCCD.Parameters.AddWithValue("@NewShift", shiftProductionViewModel.RawProductionDetails.Shift);
                            cmdInsUpCCD.Parameters.AddWithValue("@NewCapacityKgParam", kg);
                            cmdInsUpCCD.Parameters.AddWithValue("@NewBlockSLogs", shiftProductionViewModel.Qty);
                            cmdInsUpCCD.Parameters.AddWithValue("@NewOrderType", 4);
                            //UPDATE
                            cmdInsUpCCD.Parameters.AddWithValue("@ProdTimeTableId2", shiftProductionViewModel.RawProductionDetails.ProdTimeTableID);
                            cmdInsUpCCD.Parameters.AddWithValue("@CapacityId2", itemGSL.ID);
                            cmdInsUpCCD.Parameters.AddWithValue("@SalesId2", shiftProductionViewModel.RawProductionDetails.SalesOrderId);
                            cmdInsUpCCD.Parameters.AddWithValue("@RawproductId2", shiftProductionViewModel.RawProductionDetails.RawProduct.RawProductID);
                            cmdInsUpCCD.Parameters.AddWithValue("@ProductId2", 0);
                            cmdInsUpCCD.Parameters.AddWithValue("@Shift2", shiftProductionViewModel.RawProductionDetails.Shift);
                            cmdInsUpCCD.Parameters.AddWithValue("@CapacityKg", kg);
                            cmdInsUpCCD.Parameters.AddWithValue("@BlockSLogs", shiftProductionViewModel.Qty + desGradBlk);
                            cmdInsUpCCD.Parameters.AddWithValue("@Ordertype2", 4);

                            cmdInsUpCCD.ExecuteNonQuery();
                            cmdInsUpCCD.Parameters.Clear();
                        }
                    }
                    else if (shiftProductionViewModel.Qty == shiftProductionViewModel.RawProductionDetails.BlockLogQty)/*******UPDATE CURRENTCAPACITY AND GRADINGSCHEDULING*******/
                    {

                        //Check if destination had any data, if so delete source data
                        if (desCCList.Count > 0 && desGradBlk > 0)
                        {
                            cmdDeleteGS.Transaction = trans;
                            cmdDeleteGS.Parameters.AddWithValue("@prodTimeTableIdParam", shiftProductionViewModel.RawProductionDetails.ProdTimeTableID);
                            cmdDeleteGS.Parameters.AddWithValue("@salesIdParam", shiftProductionViewModel.RawProductionDetails.SalesOrderId);
                            cmdDeleteGS.Parameters.AddWithValue("@rawProductIdParam", shiftProductionViewModel.RawProductionDetails.RawProduct.RawProductID);
                            cmdDeleteGS.Parameters.AddWithValue("@statusParam", "Grading");
                            cmdDeleteGS.Parameters.AddWithValue("@Ordertype", shiftProductionViewModel.RawProductionDetails.OrderType);
                            cmdDeleteGS.Parameters.AddWithValue("@oldShift", shiftProductionViewModel.RawProductionDetails.Shift);
                            cmdDeleteGS.ExecuteNonQuery();

                            //Delete Source CurrentCapacity 
                            foreach (var itemGSL in gradedStockList)
                            {
                                cmdDeleteCC.Transaction = trans;
                                cmdDeleteCC.Parameters.AddWithValue("@prodTimeTableIdParam", shiftProductionViewModel.RawProductionDetails.ProdTimeTableID);
                                cmdDeleteCC.Parameters.AddWithValue("@prodCap", itemGSL.ID);
                                cmdDeleteCC.Parameters.AddWithValue("@salesIdParam", shiftProductionViewModel.RawProductionDetails.SalesOrderId);
                                cmdDeleteCC.Parameters.AddWithValue("@rawProductIdParam", shiftProductionViewModel.RawProductionDetails.RawProduct.RawProductID);
                                cmdDeleteCC.Parameters.AddWithValue("@oldShift", shiftProductionViewModel.RawProductionDetails.Shift);
                                cmdDeleteCC.Parameters.AddWithValue("@Ordertype", shiftProductionViewModel.RawProductionDetails.OrderType);
                                cmdDeleteCC.ExecuteNonQuery();
                                cmdDeleteCC.Parameters.Clear();
                            }

                            //Destination Insert - GradingScheduling                       
                            cmdInsUpGS.Transaction = trans;
                            cmdInsUpGS.Parameters.AddWithValue("@InsProdTimeTableId", shiftProductionViewModel.RawProductionDetails.ProdTimeTableID);
                            cmdInsUpGS.Parameters.AddWithValue("@InsRawproductId", shiftProductionViewModel.RawProductionDetails.RawProduct.RawProductID);
                            cmdInsUpGS.Parameters.AddWithValue("@InsSalesId", shiftProductionViewModel.RawProductionDetails.SalesOrderId);
                            cmdInsUpGS.Parameters.AddWithValue("@InsShift", shiftProductionViewModel.RawProductionDetails.Shift);
                            cmdInsUpGS.Parameters.AddWithValue("@InsBlockSLogs", shiftProductionViewModel.Qty);
                            cmdInsUpGS.Parameters.AddWithValue("@InsStatusParam", "Grading");
                            cmdInsUpGS.Parameters.AddWithValue("@InsOrderType", 4);
                            cmdInsUpGS.Parameters.AddWithValue("@InsActive", false);
                            cmdInsUpGS.Parameters.AddWithValue("@InsPrintCounter", 0);

                            //Destination Update - GradingScheduling                        
                            cmdInsUpGS.Parameters.AddWithValue("@ProdTimeTableId", shiftProductionViewModel.RawProductionDetails.ProdTimeTableID);
                            cmdInsUpGS.Parameters.AddWithValue("@RawproductId", shiftProductionViewModel.RawProductionDetails.RawProduct.RawProductID);
                            cmdInsUpGS.Parameters.AddWithValue("@SalesId", shiftProductionViewModel.RawProductionDetails.SalesOrderId);
                            cmdInsUpGS.Parameters.AddWithValue("@Shift", shiftProductionViewModel.RawProductionDetails.Shift);
                            cmdInsUpGS.Parameters.AddWithValue("@BlockSLogs", shiftProductionViewModel.Qty + desGradBlk);
                            cmdInsUpGS.Parameters.AddWithValue("@StatusParam", "Grading");
                            cmdInsUpGS.Parameters.AddWithValue("@OrderType", 4);
                            res = cmdInsUpGS.ExecuteNonQuery();

                            //Destination Update - CurrentCapacity          
                            foreach (var itemGSL in gradedStockList)
                            {
                                decimal kg = 0;

                                foreach (var item in desCCList)
                                {
                                    if (itemGSL.ID == item.ProductCapacityID)
                                    {
                                        kg = item.CapacityKG;
                                    }
                                }

                                kg += itemGSL.Qty;

                                //WHERE
                                cmdInsUpCCD.Transaction = trans;
                                cmdInsUpCCD.Parameters.AddWithValue("@ProdTimeTableId", shiftProductionViewModel.RawProductionDetails.ProdTimeTableID);
                                cmdInsUpCCD.Parameters.AddWithValue("@CapacityID", itemGSL.ID);
                                cmdInsUpCCD.Parameters.AddWithValue("@SalesId", shiftProductionViewModel.RawProductionDetails.SalesOrderId);
                                cmdInsUpCCD.Parameters.AddWithValue("@RawproductId", shiftProductionViewModel.RawProductionDetails.RawProduct.RawProductID);
                                cmdInsUpCCD.Parameters.AddWithValue("@Shift", shiftProductionViewModel.RawProductionDetails.Shift);
                                cmdInsUpCCD.Parameters.AddWithValue("@OrderType", 4);
                                //INSERT
                                cmdInsUpCCD.Parameters.AddWithValue("@NewProdTimeTableId", shiftProductionViewModel.RawProductionDetails.ProdTimeTableID);
                                cmdInsUpCCD.Parameters.AddWithValue("@NewCapacityId", itemGSL.ID);
                                cmdInsUpCCD.Parameters.AddWithValue("@NewSalesId", shiftProductionViewModel.RawProductionDetails.SalesOrderId);
                                cmdInsUpCCD.Parameters.AddWithValue("@NewRawproductId", shiftProductionViewModel.RawProductionDetails.RawProduct.RawProductID);
                                cmdInsUpCCD.Parameters.AddWithValue("@NewProductId", 0);
                                cmdInsUpCCD.Parameters.AddWithValue("@NewShift", shiftProductionViewModel.RawProductionDetails.Shift);
                                cmdInsUpCCD.Parameters.AddWithValue("@NewCapacityKgParam", kg);
                                cmdInsUpCCD.Parameters.AddWithValue("@NewBlockSLogs", shiftProductionViewModel.Qty);
                                cmdInsUpCCD.Parameters.AddWithValue("@NewOrderType", 4);
                                //UPDATE
                                cmdInsUpCCD.Parameters.AddWithValue("@ProdTimeTableId2", shiftProductionViewModel.RawProductionDetails.ProdTimeTableID);
                                cmdInsUpCCD.Parameters.AddWithValue("@CapacityId2", itemGSL.ID);
                                cmdInsUpCCD.Parameters.AddWithValue("@SalesId2", shiftProductionViewModel.RawProductionDetails.SalesOrderId);
                                cmdInsUpCCD.Parameters.AddWithValue("@RawproductId2", shiftProductionViewModel.RawProductionDetails.RawProduct.RawProductID);
                                cmdInsUpCCD.Parameters.AddWithValue("@ProductId2", 0);
                                cmdInsUpCCD.Parameters.AddWithValue("@Shift2", shiftProductionViewModel.RawProductionDetails.Shift);
                                cmdInsUpCCD.Parameters.AddWithValue("@CapacityKg", kg);
                                cmdInsUpCCD.Parameters.AddWithValue("@BlockSLogs", shiftProductionViewModel.Qty + desGradBlk);
                                cmdInsUpCCD.Parameters.AddWithValue("@Ordertype2", 4);

                                cmdInsUpCCD.ExecuteNonQuery();
                                cmdInsUpCCD.Parameters.Clear();
                            }
                        }
                        else
                        {
                            cmdUpGSSource.Transaction = trans;
                            cmdUpGSSource.Parameters.AddWithValue("@prodTimeTableIdParam", shiftProductionViewModel.RawProductionDetails.ProdTimeTableID);
                            cmdUpGSSource.Parameters.AddWithValue("@salesIdParam", shiftProductionViewModel.RawProductionDetails.SalesOrderId);
                            cmdUpGSSource.Parameters.AddWithValue("@rawProductIdParam", shiftProductionViewModel.RawProductionDetails.RawProduct.RawProductID);
                            cmdUpGSSource.Parameters.AddWithValue("@Shift", shiftProductionViewModel.RawProductionDetails.Shift);
                            cmdUpGSSource.Parameters.AddWithValue("@BlocksLogs", shiftProductionViewModel.Qty);
                            cmdUpGSSource.Parameters.AddWithValue("@statusParam", "Grading");
                            cmdUpGSSource.Parameters.AddWithValue("@OrderType", shiftProductionViewModel.RawProductionDetails.OrderType);
                            cmdUpGSSource.Parameters.AddWithValue("@NewOrderType", 4);
                            res = cmdUpGSSource.ExecuteNonQuery();

                            foreach (var item in exCCList)
                            {
                                foreach (var itemGSL in gradedStockList)
                                {
                                    if (item.ProductCapacityID == itemGSL.ID)
                                    {
                                        cmdUpCCSource.Transaction = trans;
                                        cmdUpCCSource.Parameters.AddWithValue("@prodTimeTableIdParam", shiftProductionViewModel.RawProductionDetails.ProdTimeTableID);
                                        cmdUpCCSource.Parameters.AddWithValue("@prodCap", item.ProductCapacityID);
                                        cmdUpCCSource.Parameters.AddWithValue("@salesIdParam", shiftProductionViewModel.RawProductionDetails.SalesOrderId);
                                        cmdUpCCSource.Parameters.AddWithValue("@rawProductIdParam", shiftProductionViewModel.RawProductionDetails.RawProduct.RawProductID);
                                        cmdUpCCSource.Parameters.AddWithValue("@oldShift", shiftProductionViewModel.RawProductionDetails.Shift);
                                        cmdUpCCSource.Parameters.AddWithValue("@OrderType", shiftProductionViewModel.RawProductionDetails.OrderType);
                                        cmdUpCCSource.Parameters.AddWithValue("@NewOrderType", 4);
                                        cmdUpCCSource.ExecuteNonQuery();
                                        cmdUpCCSource.Parameters.Clear();
                                    }
                                }
                            }
                        }
                    }
                    trans.Commit();

                    if (res > 0)
                    {
                        int gs = UpdateGradedStock(gradedStockList);
                    }
                }
                catch (Exception e)
                {
                    res = 0;
                    trans.Rollback();
                    Debug.WriteLine("SQL UPDATE COMMAND ERROR OCCURED :  Updating Orders table" + e);
                }
                finally
                {
                    conn.Close();
                }

            }
            return res;
        }

        public static Int32 AddToPendingSlitPeel(Order order)
        {
            Int32 result = 0;
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {

                SqlCommand cmdPendingSlitPeel = new SqlCommand("INSERT INTO PendingSlitPeel(order_no,raw_product_id,product_id,blocks_logs,qty) " +
                                                               "VALUES (@OrderID,@RawProductID,@ProductID,@BlockLog,@Qty)", conn);

                conn.Open();
                try
                {

                    foreach (var item in order.OrderDetails)
                    {

                        cmdPendingSlitPeel.Parameters.AddWithValue("@OrderID", order.OrderNo);
                        cmdPendingSlitPeel.Parameters.AddWithValue("@RawProductID", item.Product.RawProduct.RawProductID);
                        cmdPendingSlitPeel.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                        cmdPendingSlitPeel.Parameters.AddWithValue("@BlockLog", item.BlocksLogsToMake);
                        cmdPendingSlitPeel.Parameters.AddWithValue("@Qty", item.Quantity);
                        result = cmdPendingSlitPeel.ExecuteNonQuery();
                        cmdPendingSlitPeel.Parameters.Clear();
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error adding to Orders: " + e);
                }
                finally
                {
                    conn.Close();
                }
                return result;
            }
        }

        public static Int32 AddToOrders(Order order)
        {
            Int32 result = 0;
            List<int> orderRes = new List<int>();
            List<int> updateOrderRes = new List<int>();
            List<int> orderDetRes = new List<int>();
            Transaction Transaction = null;
            string userName = System.Security.Principal.WindowsIdentity.GetCurrent().Name;
            if (String.IsNullOrEmpty(userName))
            {
                userName = "Unknown";
            }

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {

                SqlCommand cmdInsertOrder = new SqlCommand("INSERT INTO Orders(order_id,master_order_id,sales_no,customer_id,freight_id,required_date,list_price_total,gst,total,order_type,priority_type,required_date_selected,created_date,order_status,comments,mixing_comments,slitting_comments,peeling_comments,rerolling_comments,mixing_date,mixing_shift) " +
                                                           "VALUES (@OrderID,@MasterOrderID,@SalesNo,@CustomerID,@FreightID,@RequiredDate,@ListPriceTotal,@GST,@Total,@OrderType,@PriorityType,@RequiredDateSelected,@CreatedDate,@OrderStatus,@Comments,@MixingComments,@SlittingComments,@PeelingComments,@ReRollingComments,@MixingDate,@MixingShift)", conn);

                SqlCommand cmdGetOrderNo = new SqlCommand("SELECT MAX(id) FROM Orders", conn);

                SqlCommand cmdUpdateOrder = new SqlCommand("UPDATE Orders SET order_id=@OrderID WHERE id = @OrderID", conn);

                SqlCommand cmdInsertOrderDetails = new SqlCommand("INSERT INTO OrderDetails(order_id,raw_product_id,product_id,blocks_logs,qty,status) " +
                                                                  "VALUES (@OrderID,@RawProductID,@ProductID,@BlockLog,@Qty,@Status)", conn);

                SqlCommand cmdPendingOrders = new SqlCommand("INSERT INTO PendingOrder(order_id,raw_product_id,product_id,blocks_logs,qty,status,location) " +
                                                             "VALUES (@OrderID,@RawProductID,@ProductID,@BlockLog,@Qty,@Status,@Location)", conn);

                SqlCommand cmdPendingSlitPeel = new SqlCommand("INSERT INTO PendingSlitPeel(order_no,raw_product_id,product_id,blocks_logs,qty,active) " +
                                                               "VALUES (@OrderID,@RawProductID,@ProductID,@BlockLog,@Qty,@Active)", conn);

                SqlCommand cmdBlockLogCuring = new SqlCommand("INSERT INTO BlockLogCuring(blc_raw_product_id,product_id,order_id,blc_blocklog_qty,blc_start_time,blc_end_time,is_cured,is_enabled) " +
                                                              "VALUES (@RawProductID,@ProductID,@OrderID,@BlockLog,@StartTime,@EndTime,@IsCured,@IsEnabled)", conn);

                //SqlCommand cmdInsertGradingStatus = new SqlCommand("INSERT INTO GradingStatus(order_no,raw_product_id,product_id,pending,completed) " +
                //                                                   "VALUES (@OrderNo,@RawProductID,@ProductID,@Pending,@Completed)", conn);

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {
                    for (int i = 0; i < order.OrderDetails.Count; i++)
                    {
                        Int64 orderNo = 0;
                        DateTime GradingDate = order.OrderDetails[i].MixingDate;
                        //Create shift
                        string shiftName = "Morning";

                        if (order.OrderDetails[i].IsMorningShift == true && order.OrderDetails[i].IsArvoShift == false)
                        {
                            shiftName = "Morning";
                        }
                        else if (order.OrderDetails[i].IsMorningShift == false && order.OrderDetails[i].IsArvoShift == true)
                        {
                            shiftName = "Arvo";
                        }

                        //Create grading date
                        if (order.OrderDetails[i].MixingDate.Date == DateTime.Now.Date)
                        {
                            GradingDate = order.OrderDetails[i].MixingDate;
                        }
                        else
                        {
                            BusinessDaysGenerator bdg = new BusinessDaysGenerator();
                            GradingDate = order.OrderDetails[i].MixingDate.AddDays(-1);
                            GradingDate = bdg.SkipSundayGetSaturday(GradingDate);
                        }

                        cmdInsertOrder.Transaction = trans;
                        cmdInsertOrder.Parameters.AddWithValue("@OrderID", 0);
                        cmdInsertOrder.Parameters.AddWithValue("@MasterOrderID", 0);
                        cmdInsertOrder.Parameters.AddWithValue("@SalesNo", order.SalesNo);
                        cmdInsertOrder.Parameters.AddWithValue("@CustomerID", order.Customer.CustomerId);
                        cmdInsertOrder.Parameters.AddWithValue("@FreightID", order.DeliveryDetails[0].FreightID);
                        cmdInsertOrder.Parameters.AddWithValue("@RequiredDate", GradingDate);
                        cmdInsertOrder.Parameters.AddWithValue("@ListPriceTotal", 0);
                        cmdInsertOrder.Parameters.AddWithValue("@GST", 0);
                        cmdInsertOrder.Parameters.AddWithValue("@Total", 0);
                        cmdInsertOrder.Parameters.AddWithValue("@OrderType", order.OrderType);
                        cmdInsertOrder.Parameters.AddWithValue("@PriorityType", order.OrderPriority);
                        cmdInsertOrder.Parameters.AddWithValue("@RequiredDateSelected",true);
                        cmdInsertOrder.Parameters.AddWithValue("@CreatedDate", order.OrderCreatedDate);
                        cmdInsertOrder.Parameters.AddWithValue("@OrderStatus", "Pending");
                        cmdInsertOrder.Parameters.AddWithValue("@Comments", order.OrderDetails[i].MixingComment ?? (object)DBNull.Value);
                        cmdInsertOrder.Parameters.AddWithValue("@MixingComments", order.OrderDetails[i].MixingComment ?? (object)DBNull.Value);
                        cmdInsertOrder.Parameters.AddWithValue("@SlittingComments", order.SlittingComments ?? (object)DBNull.Value);
                        cmdInsertOrder.Parameters.AddWithValue("@PeelingComments", order.PeelingComments ?? (object)DBNull.Value);
                        cmdInsertOrder.Parameters.AddWithValue("@ReRollingComments", order.ReRollingComments ?? (object)DBNull.Value);
                        cmdInsertOrder.Parameters.AddWithValue("@MixingDate", order.OrderDetails[i].MixingDate.Date);
                        cmdInsertOrder.Parameters.AddWithValue("@MixingShift", shiftName);
                        orderRes.Add(cmdInsertOrder.ExecuteNonQuery());
                        cmdInsertOrder.Parameters.Clear();

                        cmdGetOrderNo.Transaction = trans;
                        orderNo = Convert.ToInt64(cmdGetOrderNo.ExecuteScalar());
                        cmdGetOrderNo.Parameters.Clear();

                        cmdUpdateOrder.Transaction = trans;
                        cmdUpdateOrder.Parameters.AddWithValue("@OrderID", orderNo);
                        updateOrderRes.Add(cmdUpdateOrder.ExecuteNonQuery());
                        cmdUpdateOrder.Parameters.Clear();

                        order.OrderDetails[i].OrderNo = orderNo;

                        cmdInsertOrderDetails.Transaction = trans;
                        cmdInsertOrderDetails.Parameters.AddWithValue("@OrderID", orderNo);
                        cmdInsertOrderDetails.Parameters.AddWithValue("@RawProductID", order.OrderDetails[i].Product.RawProduct.RawProductID);
                        cmdInsertOrderDetails.Parameters.AddWithValue("@ProductID", order.OrderDetails[i].Product.ProductID);
                        cmdInsertOrderDetails.Parameters.AddWithValue("@BlockLog", order.OrderDetails[i].BlocksLogsToMake);
                        cmdInsertOrderDetails.Parameters.AddWithValue("@Qty", order.OrderDetails[i].Quantity);
                        cmdInsertOrderDetails.Parameters.AddWithValue("@Status", "Pending");
                        orderDetRes.Add(cmdInsertOrderDetails.ExecuteNonQuery());
                        cmdInsertOrderDetails.Parameters.Clear();

                        cmdPendingOrders.Transaction = trans;
                        cmdPendingOrders.Parameters.AddWithValue("@OrderID", orderNo);
                        cmdPendingOrders.Parameters.AddWithValue("@RawProductID", order.OrderDetails[i].Product.RawProduct.RawProductID);
                        cmdPendingOrders.Parameters.AddWithValue("@ProductID", order.OrderDetails[i].Product.ProductID);
                        cmdPendingOrders.Parameters.AddWithValue("@BlockLog", order.OrderDetails[i].BlocksLogsToMake);
                        cmdPendingOrders.Parameters.AddWithValue("@Qty", order.OrderDetails[i].Quantity);
                        cmdPendingOrders.Parameters.AddWithValue("@Status", "Pending");
                        cmdPendingOrders.Parameters.AddWithValue("@Location", "QLD");
                        result = cmdPendingOrders.ExecuteNonQuery();
                        cmdPendingOrders.Parameters.Clear();

                        if ((order.OrderDetails[i].Product.Type == "Bulk" || order.OrderDetails[i].Product.Type == "Roll" || order.OrderDetails[i].Product.Type == "Standard" || order.OrderDetails[i].Product.Type == "Tile") && (order.OrderPriority == 1))
                        {
                            cmdPendingSlitPeel.Transaction = trans;
                            cmdPendingSlitPeel.Parameters.AddWithValue("@OrderID", orderNo);
                            cmdPendingSlitPeel.Parameters.AddWithValue("@RawProductID", order.OrderDetails[i].Product.RawProduct.RawProductID);
                            cmdPendingSlitPeel.Parameters.AddWithValue("@ProductID", order.OrderDetails[i].Product.ProductID);
                            cmdPendingSlitPeel.Parameters.AddWithValue("@BlockLog", order.OrderDetails[i].BlocksLogsToMake);
                            cmdPendingSlitPeel.Parameters.AddWithValue("@Qty", order.OrderDetails[i].Quantity);
                            cmdPendingSlitPeel.Parameters.AddWithValue("@Active", true);
                            result = cmdPendingSlitPeel.ExecuteNonQuery();
                            cmdPendingSlitPeel.Parameters.Clear();
                        }

                        //Add to transaction
                        Transaction = new Transaction()
                        {
                            TransDateTime = DateTime.Now,
                            Transtype = "New Order",
                            SalesOrderID = orderNo,
                            Products = new List<RawStock>()
                                {
                                  new RawStock(){RawProductID = order.OrderDetails[i].Product.RawProduct.RawProductID,Qty=order.OrderDetails[i].Quantity},  
                                },
                            CreatedBy = userName
                        };
                        int r = DBAccess.InsertTransaction(Transaction);

                    }

                    //foreach (var item in toCuringList)
                    //{

                    //    cmdBlockLogCuring.Transaction = trans;
                    //    cmdBlockLogCuring.Parameters.AddWithValue("@OrderID", item.OrderNo);
                    //    cmdBlockLogCuring.Parameters.AddWithValue("@RawProductID", item.Product.RawProduct.RawProductID);
                    //    cmdBlockLogCuring.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                    //    cmdBlockLogCuring.Parameters.AddWithValue("@BlockLog", item.Qty);
                    //    cmdBlockLogCuring.Parameters.AddWithValue("@StartTime", item.StartTime);
                    //    cmdBlockLogCuring.Parameters.AddWithValue("@EndTime", item.EndTime);
                    //    cmdBlockLogCuring.Parameters.AddWithValue("@IsCured", item.IsCured);
                    //    cmdBlockLogCuring.Parameters.AddWithValue("@IsEnabled", item.IsEnabled);
                    //    result = cmdBlockLogCuring.ExecuteNonQuery();
                    //    cmdBlockLogCuring.Parameters.Clear();

                    //}

                    bool or = orderRes.Any(c => c > 0);
                    bool upor = updateOrderRes.Any(c => c > 0);
                    bool odr = orderDetRes.Any(c => c > 0);

                    if (or && upor && odr)
                    {
                        result = 1;
                        trans.Commit();
                    }
                    else
                    {
                        result = -1;
                        trans.Rollback();
                    }
                    
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("Error adding to Orders: " + e);
                }
                finally
                {
                    conn.Close();
                }
                return result;
            }
        }
        public static List<GradingDefaultCapacity> GetAllGradingDefaultCapacities()
        {
            List<GradingDefaultCapacity> gradingDefaultCapacity = new List<GradingDefaultCapacity>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT * FROM GradingDefaultCapacities", conn))
                    {

                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    GradingDefaultCapacity gdc = new GradingDefaultCapacity();
                                    gdc.ID = Convert.ToInt16(dr["id"]);
                                    gdc.Machine = new Machines(0) { MachineID = Convert.ToInt16(dr["machine_id"]) };
                                    gdc.RubberGrade = new RubberGrades() { GradeID = Convert.ToInt16(dr["grading_id"]) };
                                    gdc.Capacity = Convert.ToDecimal(dr["capacity"]);
                                    gdc.Shift = Convert.ToInt16(dr["shift"]);
                                    gdc.Day = dr["days"].ToString();
                                    gradingDefaultCapacity.Add(gdc);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading production line: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return gradingDefaultCapacity;
        }

        public static List<MixingDefaultCapacity> GetAllMixingDefaultCapacities()
        {
            List<MixingDefaultCapacity> mixingDefaultCapacity = new List<MixingDefaultCapacity>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT * FROM MixingDefaultCapacity", conn))
                    {

                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    MixingDefaultCapacity gdc = new MixingDefaultCapacity();
                                    gdc.ID = Convert.ToInt16(dr["id"]);
                                    gdc.Machine = new Machines(0) { MachineID = Convert.ToInt16(dr["machine_id"]) };
                                    gdc.MaxMixes = Convert.ToDecimal(dr["max_mixes"]);
                                    gdc.Day = dr["day"].ToString();
                                    mixingDefaultCapacity.Add(gdc);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading production line: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return mixingDefaultCapacity;
        }

        public static List<SlittingDefaultCapacity> GetAllSlittingDefaultCapacities()
        {
            List<SlittingDefaultCapacity> slittingDefaultCapacity = new List<SlittingDefaultCapacity>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT * FROM SlittingDefaultCapacity", conn))
                    {

                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    SlittingDefaultCapacity sdc = new SlittingDefaultCapacity();
                                    sdc.ID = Convert.ToInt16(dr["id"]);
                                    sdc.Machine = new Machines(0) { MachineID = Convert.ToInt16(dr["machine_id"]) };
                                    sdc.DollarValue = Convert.ToDecimal(dr["dollar_value"]);
                                    sdc.Shift = Convert.ToInt16(dr["shift"]);
                                    sdc.Day = dr["day"].ToString();
                                    slittingDefaultCapacity.Add(sdc);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading SlittingDefaults: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return slittingDefaultCapacity;
        }

        public static List<PeelingDefaultCapacity> GetAllPeelingDefaultCapacities()
        {
            List<PeelingDefaultCapacity> peelingDefaultCapacity = new List<PeelingDefaultCapacity>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT * FROM PeelingDefaultCapacity", conn))
                    {

                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    PeelingDefaultCapacity sdc = new PeelingDefaultCapacity();
                                    sdc.ID = Convert.ToInt16(dr["id"]);
                                    sdc.Machine = new Machines(0) { MachineID = Convert.ToInt16(dr["machine_id"]) };
                                    sdc.DollarValue = Convert.ToDecimal(dr["dollar_value"]);
                                    sdc.Shift = Convert.ToInt16(dr["shift"]);
                                    sdc.Day = dr["day"].ToString();
                                    peelingDefaultCapacity.Add(sdc);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading SlittingDefaults: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return peelingDefaultCapacity;
        }

        public static List<ReRollingDefaultCapacity> GetAllReRollingDefaultCapacities()
        {
            List<ReRollingDefaultCapacity> reRollingDefaultCapacity = new List<ReRollingDefaultCapacity>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT * FROM ReRollingDefaultCapacity", conn))
                    {

                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    ReRollingDefaultCapacity sdc = new ReRollingDefaultCapacity();
                                    sdc.ID = Convert.ToInt16(dr["id"]);
                                    sdc.Machine = new Machines(0) { MachineID = Convert.ToInt16(dr["machine_id"]) };
                                    sdc.DollarValue = Convert.ToDecimal(dr["dollar_value"]);
                                    sdc.Shift = Convert.ToInt16(dr["shift"]);
                                    sdc.Day = dr["day"].ToString();
                                    reRollingDefaultCapacity.Add(sdc);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading ReRollinDefaults: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return reRollingDefaultCapacity;
        }

        public static ObservableCollection<Vehicle> GetAllVehicles()
        {
            ObservableCollection<Vehicle> vehicleList = new ObservableCollection<Vehicle>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT Vehicles.id AS VehicleID,StockLocation.stock_name,Vehicles.stock_location_id,VehicleCategory.id AS VehicleCategoryID,VehicleCategory.vehicle_type,VehicleCategory.active AS VehicleCategoryActive,Vehicles.serial_number,Vehicles.vehicle_code,Vehicles.vehicle_brand,Vehicles.vehicle_description,Vehicles.active AS VehiclesActive " +
                                                                  "FROM Vehicles " +
                                                                  "INNER JOIN VehicleCategory ON Vehicles.vehicle_category_id = VehicleCategory.id " +
                                                                  "INNER JOIN StockLocation ON Vehicles.stock_location_id = StockLocation.id " +
                                                                  "WHERE Vehicles.active='True' AND Vehicles.id <> 0", conn))
                    {

                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    Vehicle v = new Vehicle();
                                    v.ID = Convert.ToInt16(dr["VehicleID"]);
                                    v.StockLocation = new StockLocation() { ID = Convert.ToInt16(dr["stock_location_id"]), StockName = dr["stock_name"].ToString() };
                                    v.VehicleCategory = new VehicleCategory() { ID = Convert.ToInt16(dr["VehicleCategoryID"]), VehicleType = dr["vehicle_type"].ToString(), Active = Convert.ToBoolean(dr["VehicleCategoryActive"]) };
                                    v.SerialNumber = dr["serial_number"].ToString();
                                    v.VehicleCode = dr["vehicle_code"].ToString();
                                    v.VehicleBrand = dr["vehicle_brand"].ToString();
                                    v.VehicleDescription = dr["vehicle_description"].ToString();
                                    v.Active = Convert.ToBoolean(dr["VehiclesActive"]);
                                    v.VehicleString = dr["vehicle_code"].ToString() + " | " + dr["serial_number"].ToString() + " " + dr["vehicle_brand"].ToString() + " " + dr["vehicle_description"].ToString();
                                    vehicleList.Add(v);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading production line: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return vehicleList;
        }

        public static ObservableCollection<Vehicle> GetAllVehiclesActiveOrNot()
        {
            ObservableCollection<Vehicle> vehicleList = new ObservableCollection<Vehicle>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT Vehicles.id AS VehicleID,StockLocation.stock_name,Vehicles.stock_location_id,VehicleCategory.id AS VehicleCategoryID,VehicleCategory.vehicle_type,VehicleCategory.active AS VehicleCategoryActive,Vehicles.serial_number,Vehicles.vehicle_code,Vehicles.vehicle_brand,Vehicles.vehicle_description,Vehicles.active AS VehiclesActive " +
                                                                  "FROM Vehicles " +
                                                                  "INNER JOIN VehicleCategory ON Vehicles.vehicle_category_id = VehicleCategory.id " +
                                                                  "INNER JOIN StockLocation ON Vehicles.stock_location_id = StockLocation.id AND Vehicles.id <> 0", conn))
                    {

                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    Vehicle v = new Vehicle();
                                    v.ID = Convert.ToInt16(dr["VehicleID"]);
                                    v.StockLocation = new StockLocation() { ID = Convert.ToInt16(dr["stock_location_id"]), StockName = dr["stock_name"].ToString() };
                                    v.VehicleCategory = new VehicleCategory() { ID = Convert.ToInt16(dr["VehicleCategoryID"]), VehicleType = dr["vehicle_type"].ToString(), Active = Convert.ToBoolean(dr["VehicleCategoryActive"]) };
                                    v.SerialNumber = dr["serial_number"].ToString();
                                    v.VehicleCode = dr["vehicle_code"].ToString();
                                    v.VehicleBrand = dr["vehicle_brand"].ToString();
                                    v.VehicleDescription = dr["vehicle_description"].ToString();
                                    v.Active = Convert.ToBoolean(dr["VehiclesActive"]);
                                    v.VehicleString = dr["vehicle_code"].ToString() + " | " + dr["serial_number"].ToString() + " " + dr["vehicle_brand"].ToString() + " " + dr["vehicle_description"].ToString();
                                    vehicleList.Add(v);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading production line: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return vehicleList;
        }

        //public static ObservableCollection<VehicleInspectionType> GetAllInspectionTypes()
        //{
        //    ObservableCollection<VehicleInspectionType> inspectionList = new ObservableCollection<VehicleInspectionType>();

        //    using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
        //    {
        //        try
        //        {
        //            conn.Open();

        //            using (SqlCommand cmdGetData = new SqlCommand("SELECT * FROM VehicleInspectionTypes", conn))
        //            {

        //                using (SqlDataReader dr = cmdGetData.ExecuteReader())
        //                {
        //                    if (dr != null)
        //                    {
        //                        while (dr.Read())
        //                        {
        //                            VehicleInspectionType vit = new VehicleInspectionType();
        //                            vit.ID = Convert.ToInt16(dr["id"]);
        //                            vit.Type = dr["type"].ToString();
        //                            vit.Description = dr["description"].ToString();
        //                            inspectionList.Add(vit);
        //                        }
        //                    }
        //                }
        //            }
        //        }
        //        catch (Exception e)
        //        {
        //            Debug.WriteLine("Error reading production line: " + e);
        //        }
        //        finally
        //        {
        //            conn.Close();
        //        }
        //    }
        //    return inspectionList;
        //}

        public static ObservableCollection<VehicleMaintenanceInfo> GetMaintenanceInfoBySequence(int n, int vehicleCategoryId, int loc)
        {
            ObservableCollection<VehicleMaintenanceInfo> vehicleMaintenanceInfo = new ObservableCollection<VehicleMaintenanceInfo>();
            string op = string.Empty;

            if (n == 2)
            {
                op = "VehicleMaintenanceInfo.vehicle_maintenance_sequence_id=2";
            }
            else if (n == 3)
            {
                op = "VehicleMaintenanceInfo.vehicle_maintenance_sequence_id=2 OR VehicleMaintenanceInfo.vehicle_maintenance_sequence_id=3";
            }
            else if (n == 4)
            {
                op = "VehicleMaintenanceInfo.vehicle_maintenance_sequence_id=2 OR VehicleMaintenanceInfo.vehicle_maintenance_sequence_id=3 OR VehicleMaintenanceInfo.vehicle_maintenance_sequence_id=4";
            }
            else if (n == 5)
            {
                op = "VehicleMaintenanceInfo.vehicle_maintenance_sequence_id=2 OR VehicleMaintenanceInfo.vehicle_maintenance_sequence_id=3 OR VehicleMaintenanceInfo.vehicle_maintenance_sequence_id=4 OR VehicleMaintenanceInfo.vehicle_maintenance_sequence_id=5";
            }


            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT VehicleMaintenanceInfo.id AS VMID,VehicleMaintenanceInfo.vehicle_maintenance_sequence_id,VehicleMaintenanceInfo.code,VehicleMaintenanceInfo.description,VehicleMaintenanceInfo.active,VehicleMaintenanceInfo.created_date,VehicleMaintenanceInfo.created_by, " +
                                                                  "VehicleCategory.id AS VehicleCategoryID,VehicleCategory.vehicle_type,VehicleCategory.active AS VehicleCategoryActive, " +
                                                                  "VehicleMaintenanceSequence.type " +
                                                                  "FROM VehicleMaintenanceInfo " +
                                                                  "INNER JOIN VehicleMaintenanceSequence ON VehicleMaintenanceInfo.vehicle_maintenance_sequence_id = VehicleMaintenanceSequence.id " +
                                                                  "INNER JOIN VehicleCategory ON VehicleMaintenanceInfo.vehicle_category_id = VehicleCategory.id " +
                                                                  "WHERE (" + op + ") AND VehicleMaintenanceInfo.vehicle_category_id=@VehicleCategoryId AND VehicleMaintenanceInfo.location_id=@Loc", conn))
                    {
                        cmdGetData.Parameters.AddWithValue("@VMSID", n);
                        cmdGetData.Parameters.AddWithValue("@VehicleCategoryId", vehicleCategoryId);
                        cmdGetData.Parameters.AddWithValue("@Loc", loc);
                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    VehicleMaintenanceInfo vmi = new VehicleMaintenanceInfo();
                                    vmi.ID = Convert.ToInt16(dr["VMID"]);
                                    vmi.VehicleMaintenanceSequence = new VehicleMaintenanceSequence() { ID = Convert.ToInt16(dr["vehicle_maintenance_sequence_id"]), Kmhrs = Convert.ToInt64(dr["type"]) };
                                    vmi.VehicleCategory = new VehicleCategory() { ID = Convert.ToInt16(dr["VehicleCategoryID"]), VehicleType = dr["vehicle_type"].ToString(), Active = Convert.ToBoolean(dr["VehicleCategoryActive"]) };
                                    vmi.Code = dr["code"].ToString();
                                    vmi.Description = dr["description"].ToString();
                                    vmi.Active = Convert.ToBoolean(dr["active"]);
                                    vmi.CreatedDate = Convert.ToDateTime(dr["created_date"]);
                                    vmi.CreatedBy = dr["created_by"].ToString();
                                    vehicleMaintenanceInfo.Add(vmi);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading production line: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return vehicleMaintenanceInfo;
        }


        public static ObservableCollection<VehicleMaintenanceInfo> GetAllMaintenanceInfo(int vehicleCategoryId, int loc)
        {
            ObservableCollection<VehicleMaintenanceInfo> vehicleMaintenanceInfo = new ObservableCollection<VehicleMaintenanceInfo>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT VehicleMaintenanceInfo.id AS VMID,VehicleMaintenanceInfo.vehicle_maintenance_sequence_id,VehicleMaintenanceInfo.code,VehicleMaintenanceInfo.description,VehicleMaintenanceInfo.active,VehicleMaintenanceInfo.created_date,VehicleMaintenanceInfo.created_by, " +
                                                                  "VehicleCategory.id AS VehicleCategoryID,VehicleCategory.vehicle_type,VehicleCategory.active AS VehicleCategoryActive, " +
                                                                  "VehicleMaintenanceSequence.type " +
                                                                  "FROM VehicleMaintenanceInfo " +
                                                                  "INNER JOIN VehicleMaintenanceSequence ON VehicleMaintenanceInfo.vehicle_maintenance_sequence_id = VehicleMaintenanceSequence.id " +
                                                                  "INNER JOIN VehicleCategory ON VehicleMaintenanceInfo.vehicle_category_id = VehicleCategory.id " +
                                                                  "WHERE VehicleMaintenanceInfo.vehicle_category_id=@VehicleCategoryId AND VehicleMaintenanceInfo.location_id=@Loc", conn))
                    {
                        cmdGetData.Parameters.AddWithValue("@VehicleCategoryId", vehicleCategoryId);
                        cmdGetData.Parameters.AddWithValue("@Loc", loc);
                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    VehicleMaintenanceInfo vmi = new VehicleMaintenanceInfo();
                                    vmi.ID = Convert.ToInt16(dr["VMID"]);
                                    vmi.VehicleMaintenanceSequence = new VehicleMaintenanceSequence() { ID = Convert.ToInt16(dr["vehicle_maintenance_sequence_id"]), Kmhrs = Convert.ToInt64(dr["type"]) };
                                    vmi.VehicleCategory = new VehicleCategory() { ID = Convert.ToInt16(dr["VehicleCategoryID"]), VehicleType = dr["vehicle_type"].ToString(), Active = Convert.ToBoolean(dr["VehicleCategoryActive"]) };
                                    vmi.Code = dr["code"].ToString();
                                    vmi.Description = dr["description"].ToString();
                                    vmi.Active = Convert.ToBoolean(dr["active"]);
                                    vmi.CreatedDate = Convert.ToDateTime(dr["created_date"]);
                                    vmi.CreatedBy = dr["created_by"].ToString();
                                    vehicleMaintenanceInfo.Add(vmi);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading production line: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return vehicleMaintenanceInfo;
        }

        public static ObservableCollection<MaintenanceType> GetAllVehicleMaintenanceTypes()
        {
            ObservableCollection<MaintenanceType> maintenanceType = new ObservableCollection<MaintenanceType>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT * FROM VehicleMaintenanceType", conn))
                    {

                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    MaintenanceType mt = new MaintenanceType();
                                    mt.ID = Convert.ToInt16(dr["id"]);
                                    mt.VehicleMaintenanceGroupID = Convert.ToInt16(dr["vehicle_maintenance_group_id"]);
                                    mt.Code = dr["code"].ToString();
                                    mt.Description = dr["description"].ToString();
                                    maintenanceType.Add(mt);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading production line: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return maintenanceType;
        }

        public static int InsertNewPrdDates(List<CapacityInfo> capacityInfo, List<Machines> machinesList)
        {
            Int32 id = 0;
            Int32 prodTimeTableId = 0;
            Int32 mixProdTimeTableId = 0;
            //CurrentCapacityList ccl = new CurrentCapacityList();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {

                SqlCommand cmdNewDates = new SqlCommand("IF NOT EXISTS (SELECT * FROM ProductionTimeTable " + 
                                                        "WHERE machine_id = @MachineId AND date = @Date) " +
                                                        "INSERT INTO ProductionTimeTable(machine_id, date, machine_active, day_shift, evening_shift,night_shift) " +
                                                        "VALUES (@MachineId,@Date,@MachineActive,@DayShift,@EveningShift,@NightShift) Select Scope_Identity()", conn);

                //SqlCommand cmdGetData = new SqlCommand("SELECT MAX(id) FROM ProductionTimeTable", conn);

                SqlCommand cmdNewCapacities = new SqlCommand("INSERT INTO ProductCapacity(production_time_table_id, rubber_grading_id, shift, capacity_kg, graded_kg) " +
                                                             "VALUES (@ProdTimeTableId,@RubberGradingId,@Shift,@CapacityKg,@GradedKg)", conn);

                SqlCommand cmdNewMixingCapacity = new SqlCommand("INSERT INTO MixingCapacity(production_time_table_id, mixing_time_table_id, max_mixes) " +
                                                                 "VALUES (@ProdTimeTableId,@MixingTableId,@MaxMixes)", conn);

                SqlCommand cmdNewSlittingCapacity = new SqlCommand("INSERT INTO SlittingCapacity(prod_timetable_id, machine_id, dollar_value,shift) " +
                                                                   "VALUES (@ProdTimeTableId,@MachineID,@DollarValue,@Shift)", conn);

                SqlCommand cmdNewPeelingCapacity = new SqlCommand("INSERT INTO PeelingCapacity(prod_timetable_id, machine_id, dollar_value,shift) " +
                                                                  "VALUES (@ProdTimeTableId,@MachineID,@DollarValue,@Shift)", conn);

                SqlCommand cmdNewReRollingCapacity = new SqlCommand("INSERT INTO ReRollingCapacity(prod_timetable_id, machine_id, dollar_value,shift) " +
                                                                    "VALUES (@ProdTimeTableId,@MachineID,@DollarValue,@Shift)", conn);

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {
                    foreach (var item in capacityInfo)
                    {
                        cmdNewDates.Transaction = trans;
                        cmdNewDates.Parameters.AddWithValue("@MachineId", item.ProductionTimeTable.MachineID);
                        cmdNewDates.Parameters.AddWithValue("@Date", item.ProductionTimeTable.ProductionDate);
                        cmdNewDates.Parameters.AddWithValue("@MachineActive", item.ProductionTimeTable.IsMachineActive);
                        cmdNewDates.Parameters.AddWithValue("@DayShift", item.ProductionTimeTable.IsDayShiftActive);
                        cmdNewDates.Parameters.AddWithValue("@EveningShift", item.ProductionTimeTable.IsEveningShiftActive);
                        cmdNewDates.Parameters.AddWithValue("@NightShift", item.ProductionTimeTable.IsNightShiftActive);
                        //cmdNewDates.ExecuteScalar();
                        id = Convert.ToInt32(cmdNewDates.ExecuteScalar());
                        cmdNewDates.Parameters.Clear();
                                                
                        //cmdGetData.Transaction = trans;
                        //id = Convert.ToInt32(cmdGetData.ExecuteScalar());

                        if (item.ProductionTimeTable.MachineID == 1 || item.ProductionTimeTable.MachineID == 7)
                        {
                            prodTimeTableId = id;
                        }
                        if (item.ProductionTimeTable.MachineID == 2 || item.ProductionTimeTable.MachineID == 3 || item.ProductionTimeTable.MachineID == 18)
                        {
                            mixProdTimeTableId = id;
                        }
                        if (item.ProductionTimeTable.MachineID == 4 || item.ProductionTimeTable.MachineID == 8)
                        {
                            prodTimeTableId = id;
                        }
                        if (item.ProductionTimeTable.MachineID == 5)
                        {
                            prodTimeTableId = id;
                        }
                        if (item.ProductionTimeTable.MachineID == 6)
                        {
                            prodTimeTableId = id;
                        }

                        if (item.GradingCapacityList != null && item.ProductionTimeTable.MachineID == 1 || item.ProductionTimeTable.MachineID == 7)
                        {

                            foreach (var itemsGCL in item.GradingCapacityList)
                            {
                                if (itemsGCL.Machine.MachineID == item.ProductionTimeTable.MachineID)
                                {

                                    cmdNewCapacities.Transaction = trans;
                                    cmdNewCapacities.Parameters.AddWithValue("@ProdTimeTableId", prodTimeTableId);
                                    cmdNewCapacities.Parameters.AddWithValue("@RubberGradingId", itemsGCL.RubberGrade.GradeID);
                                    cmdNewCapacities.Parameters.AddWithValue("@Shift", itemsGCL.Shift);
                                    cmdNewCapacities.Parameters.AddWithValue("@CapacityKg", itemsGCL.Capacity);
                                    cmdNewCapacities.Parameters.AddWithValue("@GradedKg", 0);
                                    cmdNewCapacities.ExecuteScalar();
                                    cmdNewCapacities.Parameters.Clear();
                                }

                            }
                        }
                        if (item.MixingCapacityList != null && item.ProductionTimeTable.MachineID == 2 || item.ProductionTimeTable.MachineID == 3 || item.ProductionTimeTable.MachineID == 18)
                        {

                            foreach (var itemsMCL in item.MixingCapacityList)
                            {
                                if (itemsMCL.Machine.MachineID == item.ProductionTimeTable.MachineID)
                                {
                                    cmdNewMixingCapacity.Transaction = trans;
                                    cmdNewMixingCapacity.Parameters.AddWithValue("@ProdTimeTableId", prodTimeTableId);
                                    cmdNewMixingCapacity.Parameters.AddWithValue("@MixingTableId", mixProdTimeTableId);
                                    cmdNewMixingCapacity.Parameters.AddWithValue("@MaxMixes", itemsMCL.MaxMixes);
                                    cmdNewMixingCapacity.ExecuteScalar();
                                    cmdNewMixingCapacity.Parameters.Clear();
                                }
                            }
                        }
                        if (item.SlittingCapacityList != null && item.ProductionTimeTable.MachineID == 4 || item.ProductionTimeTable.MachineID == 8)
                        {

                            foreach (var itemsSCL in item.SlittingCapacityList)
                            {
                                if (itemsSCL.Machine.MachineID == item.ProductionTimeTable.MachineID)
                                {
                                    cmdNewSlittingCapacity.Transaction = trans;
                                    cmdNewSlittingCapacity.Parameters.AddWithValue("@ProdTimeTableId", prodTimeTableId);
                                    cmdNewSlittingCapacity.Parameters.AddWithValue("@MachineID", itemsSCL.Machine.MachineID);
                                    cmdNewSlittingCapacity.Parameters.AddWithValue("@DollarValue", itemsSCL.DollarValue);
                                    cmdNewSlittingCapacity.Parameters.AddWithValue("@Shift", itemsSCL.Shift);
                                    cmdNewSlittingCapacity.ExecuteScalar();
                                    cmdNewSlittingCapacity.Parameters.Clear();
                                }
                            }
                        }

                        if (item.PeelingCapacityList != null && item.ProductionTimeTable.MachineID == 5)
                        {

                            foreach (var itemsPCL in item.PeelingCapacityList)
                            {
                                if (itemsPCL.Machine.MachineID == item.ProductionTimeTable.MachineID)
                                {
                                    cmdNewPeelingCapacity.Transaction = trans;
                                    cmdNewPeelingCapacity.Parameters.AddWithValue("@ProdTimeTableId", prodTimeTableId);
                                    cmdNewPeelingCapacity.Parameters.AddWithValue("@MachineID", itemsPCL.Machine.MachineID);
                                    cmdNewPeelingCapacity.Parameters.AddWithValue("@DollarValue", itemsPCL.DollarValue);
                                    cmdNewPeelingCapacity.Parameters.AddWithValue("@Shift", itemsPCL.Shift);
                                    cmdNewPeelingCapacity.ExecuteScalar();
                                    cmdNewPeelingCapacity.Parameters.Clear();
                                }
                            }
                        }

                        if (item.ReRollingCapacityList != null && item.ProductionTimeTable.MachineID == 6)
                        {

                            foreach (var itemsRRCL in item.ReRollingCapacityList)
                            {
                                if (itemsRRCL.Machine.MachineID == item.ProductionTimeTable.MachineID)
                                {
                                    cmdNewReRollingCapacity.Transaction = trans;
                                    cmdNewReRollingCapacity.Parameters.AddWithValue("@ProdTimeTableId", prodTimeTableId);
                                    cmdNewReRollingCapacity.Parameters.AddWithValue("@MachineID", itemsRRCL.Machine.MachineID);
                                    cmdNewReRollingCapacity.Parameters.AddWithValue("@DollarValue", itemsRRCL.DollarValue);
                                    cmdNewReRollingCapacity.Parameters.AddWithValue("@Shift", itemsRRCL.Shift);
                                    cmdNewReRollingCapacity.ExecuteScalar();
                                    cmdNewReRollingCapacity.Parameters.Clear();
                                }
                            }
                        }                      
                    }

                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("SQL Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return prodTimeTableId;
        }

        public static ObservableCollection<Curing> GetAllCuringStock()
        {
            ObservableCollection<Curing> curingColl = new ObservableCollection<Curing>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT BlockLogCuring.id,BlockLogCuring.order_id,BlockLogCuring.blc_blocklog_qty,BlockLogCuring.blc_start_time,BlockLogCuring.blc_end_time,BlockLogCuring.is_cured,BlockLogCuring.product_id, " +
                                                                  "RawProducts.RawProductID,RawProducts.RawProductCode,RawProducts.Description,RawProducts.RawProductType " +
                                                                  "FROM BlockLogCuring " +
                                                                  "INNER JOIN RawProducts ON BlockLogCuring.blc_raw_product_id = RawProducts.RawProductID " +
                                                                  "WHERE BlockLogCuring.is_cured=@IsCured AND is_enabled =@IsEnabled " +
                                                                  "ORDER BY BlockLogCuring.blc_end_time", conn))
                    {
                        cmdGetData.Parameters.AddWithValue("@IsCured", false);
                        cmdGetData.Parameters.AddWithValue("@IsEnabled", true);
                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    Curing curing = new Curing();
                                    curing.id = Convert.ToInt32(dr["id"]);
                                    curing.OrderNo = Convert.ToInt32(dr["order_id"]);
                                    curing.Product = new Product() { ProductID = Convert.ToInt16(dr["product_id"]), RawProduct = new RawProduct() { RawProductID = Convert.ToInt16(dr["RawProductID"]), RawProductCode = (dr["RawProductCode"]).ToString(), Description = (dr["Description"]).ToString(), RawProductType = (dr["RawProductType"]).ToString() } };
                                    //curing.RawProduct = new RawProduct() { RawProductID = Convert.ToInt16(dr["RawProductID"]), RawProductCode = (dr["RawProductCode"]).ToString(), Description = (dr["Description"]).ToString(), RawProductType = (dr["RawProductType"]).ToString() };
                                    curing.Qty = Convert.ToDecimal(dr["blc_blocklog_qty"]);
                                    curing.StartTime = Convert.ToDateTime(dr["blc_start_time"]);
                                    curing.EndTime = Convert.ToDateTime(dr["blc_end_time"]);
                                    curing.IsCured = Convert.ToBoolean(dr["is_cured"]);
                                    curingColl.Add(curing);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("ERROR READING CURING TABLE: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return curingColl;

        }

        public static int UpdateBlockLogStockAfterDemoulding(Curing curing)
        {
            int rows = 0;
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {

                SqlCommand cmdUpdateBlockLogStock = new SqlCommand("UPDATE RawStock SET rs_qty+=@Qty,last_updated_date=@DateTime WHERE rs_raw_product_id=@RawProductID", conn);
                SqlCommand cmdUpdateBlockLogCuring = new SqlCommand("UPDATE BlockLogCuring SET is_cured=@IsCured WHERE id = @BlockLogCuringID", conn);

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {


                    cmdUpdateBlockLogStock.Transaction = trans;
                    cmdUpdateBlockLogStock.Parameters.AddWithValue("@Qty", curing.Qty);
                    cmdUpdateBlockLogStock.Parameters.AddWithValue("@RawProductID", curing.Product.RawProduct.RawProductID);
                    cmdUpdateBlockLogStock.Parameters.AddWithValue("@DateTime", DateTime.Now);
                    rows = cmdUpdateBlockLogStock.ExecuteNonQuery();
                    cmdUpdateBlockLogStock.Parameters.Clear();

                    cmdUpdateBlockLogCuring.Transaction = trans;
                    cmdUpdateBlockLogCuring.Parameters.AddWithValue("@BlockLogCuringID", curing.id);
                    cmdUpdateBlockLogCuring.Parameters.AddWithValue("@IsCured", true);
                    rows = cmdUpdateBlockLogCuring.ExecuteNonQuery();
                    cmdUpdateBlockLogCuring.Parameters.Clear();

                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return rows;
        }



        public static List<PendingSlitPeel> GetPendingOrders()
        {
            List<PendingSlitPeel> pendingSlitPeel = new List<PendingSlitPeel>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT PendingSlitPeel.id,PendingSlitPeel.order_no, PendingSlitPeel.blocks_logs, PendingSlitPeel.qty, " +
                                                                  "Products.id AS prod_id,Products.category_id,Products.raw_product_id,RawProducts.RawProductCode,RawProducts.RawProductName,RawProducts.Description,RawProducts.RawProductType, " +
                                                                  "Products.type,Products.product_name,Products.product_code,Products.product_description,Products.unit,Products.price,Products.density,Products.thickness,Products.width,Products.height,Products.max_yield,Products.min_yield,Products.logo_path,Products.min_cut_length,Products.custom_re_roll,Products.qr_video_path,Products.qr_pdf_path,Products.active, " +
                                                                  "Orders.customer_id,Orders.order_type, " +
                                                                  "Customers.CompanyName " +
                                                                  "FROM   PendingSlitPeel " +
                                                                  "INNER JOIN Products ON PendingSlitPeel.product_id  = Products.id " +
                                                                  "INNER JOIN RawProducts ON Products.raw_product_id = RawProducts.RawProductID " +
                                                                  "INNER JOIN Orders ON PendingSlitPeel.order_no = Orders.order_id " +
                                                                  "INNER JOIN Customers ON Orders.customer_id = Customers.CustomerID WHERE PendingSlitPeel.blocks_logs > 0 " +
                                                                  "ORDER BY Orders.order_type", conn))
                    {

                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    PendingSlitPeel po = new PendingSlitPeel();
                                    Product prod = new Product();
                                    po.ID = Convert.ToInt32(dr["id"]);
                                    po.Order = new Order() { OrderNo = Convert.ToInt32(dr["order_no"]), OrderType = Convert.ToInt16(dr["order_type"]) };
                                    po.BlockLogQty = Convert.ToInt16(dr["blocks_logs"]);
                                    po.Qty = Convert.ToInt16(dr["qty"]);
                                    prod.ProductID = Convert.ToInt16(dr["prod_id"]);
                                    prod.Category = new Category() { CategoryID = Convert.ToInt16(dr["category_id"]) };
                                    prod.RawProduct = new RawProduct()
                                    {
                                        RawProductID = Convert.ToInt16(dr["raw_product_id"]),
                                        RawProductCode = dr["RawProductCode"].ToString(),
                                        RawProductName = dr["RawProductName"].ToString(),
                                        Description = dr["Description"].ToString(),
                                        RawProductType = dr["RawProductType"].ToString()
                                    };
                                    prod.Type = dr["type"].ToString();
                                    prod.ProductCode = dr["product_code"].ToString();
                                    prod.ProductName = dr["product_name"].ToString();
                                    prod.ProductDescription = dr["product_description"].ToString();
                                    prod.ProductUnit = dr["unit"].ToString();
                                    prod.UnitPrice = Convert.ToDecimal(dr["price"]);
                                    prod.Density = dr["density"].ToString();
                                    prod.Tile = new Tile() { Thickness = Convert.ToDecimal(dr["thickness"]), Height = Convert.ToDecimal(dr["height"]), MaxYield = Convert.ToDecimal(dr["max_yield"]), MinYield = Convert.ToDecimal(dr["min_yield"]) };
                                    prod.Width = Convert.ToDecimal(dr["width"]);                                  
                                    prod.LogoPath = dr["logo_path"].ToString();
                                    prod.MinCutLength = Convert.ToDecimal(dr["min_cut_length"]);
                                    prod.IsCustomReRoll = Convert.ToBoolean(dr["custom_re_roll"]);
                                    prod.QRVideoPath = dr["qr_video_path"].ToString();
                                    prod.QRPDFPath = dr["qr_pdf_path"].ToString();
                                    prod.Active = Convert.ToBoolean(dr["active"]);
                                    po.Product = prod;
                                    pendingSlitPeel.Add(po);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading Product Capacity: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return pendingSlitPeel;
        }


        public static List<PendingSlitPeel> GetPendingOrdersByID(Curing curing)
        {
            string sqlStr = string.Empty;
            List<PendingSlitPeel> pendingSlitPeel = new List<PendingSlitPeel>();
            if (curing != null)
            {
                sqlStr = "  ";
            }
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT PendingSlitPeel.id,PendingSlitPeel.order_no, PendingSlitPeel.blocks_logs, PendingSlitPeel.qty, " +
                                                                  "Products.id AS prod_id,Products.category_id,PendingSlitPeel.raw_product_id,RawProducts.RawProductCode,RawProducts.RawProductName,RawProducts.Description,RawProducts.RawProductType, " +
                                                                  "Products.type,Products.product_name,Products.product_code,Products.product_description,Products.unit,Products.unit_price,Products.active, " +
                                                                  "Orders.customer_id,Orders.order_type, " +
                                                                  "ProductTiles.height,ProductTiles.tile_per_block,ProductTiles.thickness,ProductTiles.max_yield,ProductTiles.min_yield " +
                                                                  "FROM   PendingSlitPeel " +
                                                                  "INNER JOIN Products ON PendingSlitPeel.product_id  = Products.id " +
                                                                  "INNER JOIN RawProducts ON Products.raw_product_id = RawProducts.RawProductID " +
                                                                  "INNER JOIN Orders ON PendingSlitPeel.order_no = Orders.order_id " +
                                                                  "INNER JOIN Customers ON Orders.customer_id = Customers.CustomerID " +
                                                                  "LEFT JOIN ProductTiles ON Products.id = ProductTiles.product_id " +
                                                                  "WHERE PendingSlitPeel.blocks_logs > 0 AND PendingSlitPeel.order_no =@OrderNo AND PendingSlitPeel.raw_product_id=@RawProductID AND PendingSlitPeel.product_id=@ProductID AND PendingSlitPeel.active='True' " +
                                                                  "ORDER BY Orders.order_type", conn))
                    {


                        cmdGetData.Parameters.AddWithValue("@RawProductID", curing.Product.RawProduct.RawProductID);
                        cmdGetData.Parameters.AddWithValue("@ProductID", curing.Product.ProductID);
                        cmdGetData.Parameters.AddWithValue("@OrderNo", curing.OrderNo);

                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    PendingSlitPeel po = new PendingSlitPeel();
                                    Product prod = new Product();
                                    po.ID = Convert.ToInt32(dr["id"]);
                                    po.Order = new Order() { OrderNo = Convert.ToInt32(dr["order_no"]), OrderType = Convert.ToInt16(dr["order_type"]) };
                                    po.BlockLogQty = Convert.ToInt16(dr["blocks_logs"]);
                                    po.Qty = Convert.ToInt16(dr["qty"]);
                                    prod.ProductID = Convert.ToInt16(dr["prod_id"]);
                                    prod.Category = new Category() { CategoryID = Convert.ToInt16(dr["category_id"]) };
                                    prod.RawProduct = new RawProduct()
                                    {
                                        RawProductID = Convert.ToInt16(dr["raw_product_id"]),
                                        RawProductCode = dr["RawProductCode"].ToString(),
                                        RawProductName = dr["RawProductName"].ToString(),
            
                                        Description = dr["Description"].ToString(),
                                        RawProductType = dr["RawProductType"].ToString()
                                    };
                                    prod.Type = dr["type"].ToString();
                                    prod.ProductCode = dr["product_code"].ToString();
                                    prod.ProductName = dr["product_name"].ToString();
                                    prod.ProductDescription = dr["product_description"].ToString();
                                    prod.ProductUnit = dr["unit"].ToString();
                                    prod.UnitPrice = Convert.ToDecimal(dr["unit_price"]);
                                    prod.Tile = new Tile() 
                                    { 
                                        Thickness = Convert.ToDecimal(dr["thickness"]), 
                                        Height = Convert.ToDecimal(dr["height"]), 
                                        MaxYield = Convert.ToDecimal(dr["max_yield"]), 
                                        MinYield = Convert.ToDecimal(dr["min_yield"]), 
                                        TilePerBlock = Convert.ToDecimal(dr["tile_per_block"]) 
                                    };                                    
                                    prod.Active = Convert.ToBoolean(dr["active"]);
                                    
                                    po.Product = prod;
                                    pendingSlitPeel.Add(po);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading Product Capacity: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return pendingSlitPeel;
        }


        public static List<PendingSlitPeel> GetMultiplePendingOrders(Order order)
        {
            List<PendingSlitPeel> pendingSlitPeel = new List<PendingSlitPeel>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {


                using (SqlCommand cmdGetData = new SqlCommand("SELECT PendingSlitPeel.id,PendingSlitPeel.order_no, PendingSlitPeel.blocks_logs, PendingSlitPeel.qty,Products.mould_type, " +
                                                              "Products.id AS prod_id,Products.category_id,Products.raw_product_id,RawProducts.RawProductCode,RawProducts.RawProductName,RawProducts.Description,RawProducts.RawProductType, " +
                                                              "Products.type,Products.product_name,Products.product_code,Products.product_description,Products.unit,Products.price,Products.density,Products.thickness,Products.width,Products.height,Products.max_yield,Products.min_yield,Products.logo_path,Products.min_cut_length,Products.custom_re_roll,Products.qr_video_path,Products.qr_pdf_path,Products.active, " +
                                                              "Orders.customer_id,Orders.order_type, " +
                                                              "Customers.CompanyName " +
                                                              "FROM   PendingSlitPeel " +
                                                              "INNER JOIN Products ON PendingSlitPeel.product_id  = Products.id " +
                                                              "INNER JOIN RawProducts ON Products.raw_product_id = RawProducts.RawProductID " +
                                                              "INNER JOIN Orders ON PendingSlitPeel.order_no = Orders.order_id " +
                                                              "INNER JOIN Customers ON Orders.customer_id = Customers.CustomerID " +
                                                              "WHERE PendingSlitPeel.blocks_logs > 0 AND PendingSlitPeel.order_no =@OrderNo AND PendingSlitPeel.raw_product_id=@RawProductID AND PendingSlitPeel.product_id=@ProductID " +
                                                              "ORDER BY Orders.order_type", conn))
                {

                    conn.Open();
                    try
                    {
                        foreach (var item in order.OrderDetails)
                        {
                            cmdGetData.Parameters.AddWithValue("@OrderNo", order.OrderNo);
                            cmdGetData.Parameters.AddWithValue("@RawProductID", item.Product.RawProduct.RawProductID);
                            cmdGetData.Parameters.AddWithValue("@ProductID", item.Product.ProductID);

                            using (SqlDataReader dr = cmdGetData.ExecuteReader())
                            {
                                if (dr != null)
                                {
                                    while (dr.Read())
                                    {
                                        PendingSlitPeel po = new PendingSlitPeel();
                                        Product prod = new Product();
                                        po.ID = Convert.ToInt32(dr["id"]);
                                        po.Order = new Order() { OrderNo = Convert.ToInt32(dr["order_no"]), OrderType = Convert.ToInt16(dr["order_type"]) };
                                        po.BlockLogQty = Convert.ToInt16(dr["blocks_logs"]);
                                        po.Qty = Convert.ToInt16(dr["qty"]);
                                        prod.ProductID = Convert.ToInt16(dr["prod_id"]);
                                        prod.Category = new Category() { CategoryID = Convert.ToInt16(dr["category_id"]) };
                                        prod.RawProduct = new RawProduct()
                                        {
                                            RawProductID = Convert.ToInt16(dr["raw_product_id"]),
                                            RawProductCode = dr["RawProductCode"].ToString(),
                                            RawProductName = dr["RawProductName"].ToString(),
                                            Description = dr["Description"].ToString(),
                                            RawProductType = dr["RawProductType"].ToString()
                                        };
                                        prod.Type = dr["type"].ToString();
                                        prod.ProductCode = dr["product_code"].ToString();
                                        prod.ProductName = dr["product_name"].ToString();
                                        prod.ProductDescription = dr["product_description"].ToString();
                                        prod.ProductUnit = dr["unit"].ToString();
                                        prod.UnitPrice = Convert.ToDecimal(dr["price"]);
                                        prod.Density = dr["density"].ToString();
                                        prod.Tile = new Tile() { Thickness = Convert.ToDecimal(dr["thickness"]), Height = Convert.ToDecimal(dr["height"]), MaxYield = Convert.ToDecimal(dr["max_yield"]), MinYield = Convert.ToDecimal(dr["min_yield"]) };
                                        prod.Width = Convert.ToDecimal(dr["width"]);                                      
                                        prod.LogoPath = dr["logo_path"].ToString();
                                        prod.MinCutLength = Convert.ToDecimal(dr["min_cut_length"]);
                                        prod.IsCustomReRoll = Convert.ToBoolean(dr["custom_re_roll"]);
                                        prod.QRVideoPath = dr["qr_video_path"].ToString();
                                        prod.QRPDFPath = dr["qr_pdf_path"].ToString();
                                        prod.Active = Convert.ToBoolean(dr["active"]);
                                        prod.MouldType = dr["mould_type"].ToString();
                                        po.Product = prod;
                                        pendingSlitPeel.Add(po);
                                    }
                                }
                            }
                        }

                    }
                    catch (Exception e)
                    {
                        Debug.WriteLine("Error reading Product Capacity: " + e);
                    }
                    finally
                    {
                        conn.Close();
                    }
                }

            }

            return pendingSlitPeel;
        }

        public static RawStock GetBlockLogStockByID(PendingSlitPeel pendingOrders)
        {
            RawStock rs = new RawStock();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                conn.Open();
                try
                {
                    SqlCommand cmdGetData = new SqlCommand("SELECT * FROM RawStock WHERE rs_raw_product_id = @RawProductID", conn);

                    cmdGetData.Parameters.AddWithValue("@RawProductID", pendingOrders.Product.RawProduct.RawProductID);

                    using (SqlDataReader dr = cmdGetData.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {

                                rs.RawProductID = Convert.ToInt16(dr["rs_raw_product_id"]);
                                rs.Qty = Convert.ToDecimal(dr["rs_qty"]);
                            }
                        }
                    }
                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return rs;
        }


        public static List<RawStock> GetAllBlockLogStock()
        {
            List<RawStock> rawStockList = new List<RawStock>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                conn.Open();
                try
                {
                    SqlCommand cmdGetData = new SqlCommand("SELECT * FROM RawStock", conn);

                    using (SqlDataReader dr = cmdGetData.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                RawStock rs = new RawStock();
                                rs.ID = Convert.ToInt16(dr["id"]);
                                rs.RawProductID = Convert.ToInt16(dr["rs_raw_product_id"]);
                                rs.Qty = Convert.ToDecimal(dr["rs_qty"]);
                                rs.LastUpdatedDate = Convert.ToDateTime(dr["last_updated_date"]);
                                rawStockList.Add(rs);
                            }
                        }
                    }
                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return rawStockList;
        }

        public static int UpdatePendingSlitPeel(PendingSlitPeel ps,decimal totYieldCut)
        {
            int res = 0;

            string userName = System.Security.Principal.WindowsIdentity.GetCurrent().Name;
            if (String.IsNullOrEmpty(userName))
            {
                userName = "Unknown";
            }

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {

                conn.Open();

                try
                {
                    SqlCommand cmdInsertUpPendingSlitPeel = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM PendingSlitPeel " +
                                                                        "WHERE order_no = @OrderID AND product_id=@ProductID) " +
                                                                        "INSERT INTO PendingSlitPeel VALUES(@OrderID,@RawProductID,@ProductID,@BlocksLogs,@Qty,@Active) " +
                                                                        "ELSE " +
                                                                        "UPDATE PendingSlitPeel SET qty=@Qty,blocks_logs=@BlocksLogs " +
                                                                        "WHERE order_no = @OrderID AND product_id=@ProductID", conn);
                    //Update WarehouseIncoming
                    SqlCommand cmdWarehouseIncoming = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM WarehouseIncoming " +
                                                                        "WHERE order_no = @OrderID AND product_id=@ProductID) " +
                                                                        "INSERT INTO WarehouseIncoming VALUES(@OrderID,@ProductID,@Qty,@DateTime) " +
                                                                        "ELSE " +
                                                                        "UPDATE WarehouseIncoming SET qty+=@Qty, incoming_datetime=@DateTime " +
                                                                        "WHERE order_no = @OrderID AND product_id=@ProductID", conn);

                    //Update ProductStock
                    //SqlCommand cmdUpdateProductStock = new SqlCommand("UPDATE ProductStock SET qty_available+=@Qty,last_updated_date=@LastUpdatedDate,updated_by=@UpdatedBy " +
                    //                                                  "WHERE stock_location_id = @StockLocationID AND product_id = @ProductID", conn);


                    cmdInsertUpPendingSlitPeel.Parameters.AddWithValue("@OrderID", ps.Order.OrderNo);
                    cmdInsertUpPendingSlitPeel.Parameters.AddWithValue("@RawProductID", ps.Product.RawProduct.RawProductID);
                    cmdInsertUpPendingSlitPeel.Parameters.AddWithValue("@ProductID", ps.Product.ProductID);
                    cmdInsertUpPendingSlitPeel.Parameters.AddWithValue("@BlocksLogs", ps.BlockLogQty);
                    cmdInsertUpPendingSlitPeel.Parameters.AddWithValue("@Qty", ps.Qty);
                    cmdInsertUpPendingSlitPeel.Parameters.AddWithValue("@Active", true);
                    cmdInsertUpPendingSlitPeel.ExecuteNonQuery();

                    cmdWarehouseIncoming.Parameters.AddWithValue("@OrderID", ps.Order.OrderNo);
                    cmdWarehouseIncoming.Parameters.AddWithValue("@ProductID", ps.Product.ProductID);
                    cmdWarehouseIncoming.Parameters.AddWithValue("@Qty", totYieldCut);
                    cmdWarehouseIncoming.Parameters.AddWithValue("@DateTime", DateTime.Now);
                    res=cmdWarehouseIncoming.ExecuteNonQuery();

                    //cmdUpdateProductStock.Parameters.AddWithValue("@StockLocationID", 1);
                    //cmdUpdateProductStock.Parameters.AddWithValue("@ProductID", ps.Product.ProductID);
                    //cmdUpdateProductStock.Parameters.AddWithValue("@Qty", totYieldCut);
                    //cmdUpdateProductStock.Parameters.AddWithValue("@LastUpdatedDate", DateTime.Now);
                    //cmdUpdateProductStock.Parameters.AddWithValue("@UpdatedBy", userName);
                    //res = cmdUpdateProductStock.ExecuteNonQuery();

                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return res;
        }



        public static int UpdateBlockLogStock(Tuple<PendingSlitPeel, RawStock> elements)
        {
            int res = 0;
            List<PendingOrder> pendingOrderList = new List<PendingOrder>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();

                try
                {
                    SqlCommand cmdUpdateRawStock = new SqlCommand("UPDATE RawStock SET rs_qty=@Qty WHERE rs_raw_product_id = @RawProductID", conn);
                    SqlCommand cmdUpdatePendSlitPeel = new SqlCommand("UPDATE PendingSlitPeel SET blocks_logs=@BlocksLogs,qty=@Qty WHERE id = @ID", conn);

                    //SqlCommand cmdInsUp = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM RawStockReserve WHERE " +
                    //                                     "sales_id =@SalesId AND raw_product_id =@RawproductId AND product_id = @ProductId) " +
                    //                                     "INSERT INTO RawStockReserve VALUES(@SalesId,@RawproductId,@ProductId,@BlockSLogs,@Qty) " +
                    //                                     "ELSE " +
                    //                                     "UPDATE RawStockReserve SET blocks_logs+=@BlockSLogs,qty+=@Qty WHERE sales_id =@SalesId AND raw_product_id =@RawproductId AND product_id = @ProductId", conn);

                    //SqlCommand cmdSelectPendingOrder = new SqlCommand("SELECT * FROM PendingOrder WHERE order_id = @OrderID AND raw_product_id = @RawProductID AND product_id=@ProductID AND status='Curing'", conn);
                    //SqlCommand cmdUpdatePendingOrder = new SqlCommand("UPDATE PendingOrder SET qty=@Qty,blocks_logs=@BlocksLogs,status=@Status WHERE id = @ID", conn);
                    //SqlCommand cmdInsertPendingOrder = new SqlCommand("INSERT INTO PendingOrder(order_id,raw_product_id,product_id,blocks_logs,qty,status,location) " +
                    //                                                  "VALUES (@OrderID,@RawProductID,@ProductID,@BlocksLogs,@Qty,@Status,@Location)", conn);

                    //SqlCommand cmdInsertUpPendingOrder = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM PendingOrder WHERE " +
                    //                                                    "order_id = @OrderID AND raw_product_id = @RawProductID AND product_id=@ProductID AND status=@Status) " +
                    //                                                    "INSERT INTO PendingOrder VALUES(@OrderID,@RawProductID,@ProductID,@BlocksLogs,@Qty,@Status,@Location) " +
                    //                                                    "ELSE " +
                    //                                                    "UPDATE PendingOrder SET qty=@Qty,blocks_logs=@BlocksLogs,status=@Status " +
                    //                                                    "WHERE order_id = @OrderID AND raw_product_id = @RawProductID AND product_id=@ProductID AND status=@Status", conn);


                    cmdUpdateRawStock.Transaction = trans;
                    cmdUpdateRawStock.Parameters.AddWithValue("@RawProductID", elements.Item2.RawProductID);
                    cmdUpdateRawStock.Parameters.AddWithValue("@Qty", elements.Item2.Qty);
                    int rows = cmdUpdateRawStock.ExecuteNonQuery();

                    if (rows > 0)
                    {

                        cmdUpdatePendSlitPeel.Transaction = trans;
                        cmdUpdatePendSlitPeel.Parameters.AddWithValue("@ID", elements.Item1.ID);
                        cmdUpdatePendSlitPeel.Parameters.AddWithValue("@BlocksLogs", elements.Item1.BlockLogQty);
                        cmdUpdatePendSlitPeel.Parameters.AddWithValue("@Qty", elements.Item1.Qty);
                        res = cmdUpdatePendSlitPeel.ExecuteNonQuery();

                        //cmdInsUp.Transaction = trans;
                        //cmdInsUp.Parameters.AddWithValue("@SalesId", elements.Item1.Order.OrderNo);
                        //cmdInsUp.Parameters.AddWithValue("@RawproductId", elements.Item1.Product.RawProduct.RawProductID);
                        //cmdInsUp.Parameters.AddWithValue("@ProductId", elements.Item1.Product.ProductID);
                        //cmdInsUp.Parameters.AddWithValue("@BlockSLogs", elements.Item1.BlockLogQty);
                        //cmdInsUp.Parameters.AddWithValue("@Qty", elements.Item1.Qty);
                        //res = cmdInsUp.ExecuteNonQuery();
                        //cmdInsUp.Parameters.Clear();

                        ////PendingOrder

                        //cmdSelectPendingOrder.Transaction = trans;
                        //cmdSelectPendingOrder.Parameters.AddWithValue("@OrderID", elements.Item1.OrderID);
                        //cmdSelectPendingOrder.Parameters.AddWithValue("@RawProductID", elements.Item1.Product.RawProduct.RawProductID);
                        //cmdSelectPendingOrder.Parameters.AddWithValue("@ProductID", elements.Item1.Product.ProductID);

                        //using (SqlDataReader dr = cmdSelectPendingOrder.ExecuteReader())
                        //{
                        //    if (dr != null)
                        //    {
                        //        while (dr.Read())
                        //        {
                        //            PendingOrder po = new PendingOrder();
                        //            po.ID = Convert.ToInt32(dr["id"]);
                        //            po.Order = new Order() { OrderNo = Convert.ToInt32(dr["order_id"]) };
                        //            po.Product = new Product() { ProductID = Convert.ToInt16(dr["product_id"]), RawProduct = new RawProduct() { RawProductID = Convert.ToInt16(dr["raw_product_id"]) } };
                        //            po.BlockLogQty = Convert.ToDecimal(dr["blocks_logs"]);
                        //            po.Qty = Convert.ToDecimal(dr["qty"]);
                        //            po.Status = (dr["status"]).ToString();
                        //            po.Location = (dr["location"]).ToString();
                        //            pendingOrderList.Add(po);
                        //        }
                        //    }
                        //}
                        ////Insert or update Pending Orders
                        //if (pendingOrderList.Count > 0)
                        //{
                        //    foreach (var item in pendingOrderList)
                        //    {
                        //        if (item.Order.OrderNo == elements.Item1.OrderID && item.Product.ProductID == elements.Item1.Product.ProductID && item.Product.RawProduct.RawProductID == elements.Item1.Product.RawProduct.RawProductID)
                        //        {
                        //            if (item.Qty == elements.Item1.Qty)
                        //            {
                        //                if (item.Status == "Curing")
                        //                {
                        //                    //Update 
                        //                    cmdUpdatePendingOrder.Transaction = trans;
                        //                    cmdUpdatePendingOrder.Parameters.AddWithValue("@ID", item.ID);
                        //                    cmdUpdatePendingOrder.Parameters.AddWithValue("@Qty", item.Qty);
                        //                    cmdUpdatePendingOrder.Parameters.AddWithValue("@BlocksLogs", item.BlockLogQty);
                        //                    cmdUpdatePendingOrder.Parameters.AddWithValue("@Status", GetProductStatus(elements.Item1.Product.Type));
                        //                    int rows1 = cmdUpdatePendingOrder.ExecuteNonQuery();
                        //                }
                        //                else if (item.Status == "Slitting" || item.Status == "Peeling")
                        //                {
                        //                    //Update  
                        //                    cmdUpdatePendingOrder.Transaction = trans;
                        //                    cmdUpdatePendingOrder.Parameters.AddWithValue("@ID", item.ID);
                        //                    cmdUpdatePendingOrder.Parameters.AddWithValue("@Qty", item.Qty + elements.Item1.Qty);
                        //                    cmdUpdatePendingOrder.Parameters.AddWithValue("@BlocksLogs", item.BlockLogQty + elements.Item1.BlocksLogs);
                        //                    cmdUpdatePendingOrder.Parameters.AddWithValue("@Status", item.Status);
                        //                    int rows1 = cmdUpdatePendingOrder.ExecuteNonQuery();
                        //                }
                        //            }
                        //            else if (item.Qty < elements.Item1.Qty)
                        //            {

                        //            }
                        //            else if (item.Qty > elements.Item1.Qty)
                        //            {
                        //                if (item.Status == "Curing")
                        //                {
                        //                    decimal remQty = item.Qty - elements.Item1.Qty;
                        //                    decimal remBL = item.BlockLogQty - elements.Item1.BlocksLogs;

                        //                    cmdUpdatePendingOrder.Transaction = trans;
                        //                    cmdUpdatePendingOrder.Parameters.AddWithValue("@ID", item.ID);
                        //                    cmdUpdatePendingOrder.Parameters.AddWithValue("@Qty", elements.Item1.Qty);
                        //                    cmdUpdatePendingOrder.Parameters.AddWithValue("@BlocksLogs", elements.Item1.BlocksLogs);
                        //                    cmdUpdatePendingOrder.Parameters.AddWithValue("@Status", GetProductStatus(elements.Item1.Product.Type));
                        //                    int rows1 = cmdUpdatePendingOrder.ExecuteNonQuery();
                        //                    if (rows1 > 0)
                        //                    {
                        //                        cmdInsertPendingOrder.Transaction = trans;
                        //                        cmdInsertPendingOrder.Parameters.AddWithValue("@OrderID", item.Order.OrderNo);
                        //                        cmdInsertPendingOrder.Parameters.AddWithValue("@RawProductID", item.Product.RawProduct.RawProductID);
                        //                        cmdInsertPendingOrder.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                        //                        cmdInsertPendingOrder.Parameters.AddWithValue("@Qty", remQty);
                        //                        cmdInsertPendingOrder.Parameters.AddWithValue("@BlocksLogs", remBL);
                        //                        cmdInsertPendingOrder.Parameters.AddWithValue("@Status", "Curing");
                        //                        cmdInsertPendingOrder.Parameters.AddWithValue("@Location", "QLD");
                        //                        int rows2 = cmdInsertPendingOrder.ExecuteNonQuery();
                        //                        cmdInsertPendingOrder.Parameters.Clear();
                        //                    }
                        //                }
                        //            }
                        //        }
                        //    }
                        //}

                    }

                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return res;
        }

        public static int UpdatePendingSlitPeelActive(PendingSlitPeel ps, bool active)
        {
            int res = 0;
            List<PendingOrder> pendingOrderList = new List<PendingOrder>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();

                try
                {
                    SqlCommand cmdUpdatePendSlitPeel = new SqlCommand("UPDATE PendingSlitPeel SET active=@Status " +
                                                                      "WHERE order_no = @OrderNo AND raw_product_id=@RawProductID AND product_id=@ProductID", conn);

                    cmdUpdatePendSlitPeel.Transaction = trans;
                    cmdUpdatePendSlitPeel.Parameters.AddWithValue("@OrderNo", ps.Order.OrderNo);
                    cmdUpdatePendSlitPeel.Parameters.AddWithValue("@RawProductID", ps.Product.RawProduct.RawProductID);
                    cmdUpdatePendSlitPeel.Parameters.AddWithValue("@ProductID", ps.Product.ProductID);
                    cmdUpdatePendSlitPeel.Parameters.AddWithValue("@Status", active);
                    res = cmdUpdatePendSlitPeel.ExecuteNonQuery();

                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return res;
        }






        public static int UpdateBlockLogPendingSlitPeel(RawStock rs, PendingSlitPeel ps)
        {
            int res = 0;
            decimal psBL = 0;
            decimal psQty = 0;
            Int32 psID = 0;
            List<PendingOrder> pendingOrderList = new List<PendingOrder>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();

                try
                {
                    SqlCommand cmdUpdateRawStock = new SqlCommand("UPDATE RawStock SET rs_qty=@Qty WHERE rs_raw_product_id = @RawProductID", conn);
                    SqlCommand cmdGetSlitPeel = new SqlCommand("SELECT * FROM PendingSlitPeel " +
                                                               "WHERE order_no = @OrderNo AND raw_product_id=@RawProductID AND product_id=@ProductID", conn);
                    SqlCommand cmdUpdatePendSlitPeel = new SqlCommand("UPDATE PendingSlitPeel SET blocks_logs=@BlocksLogs,qty=@Qty WHERE id = @ID", conn);

                    cmdUpdateRawStock.Transaction = trans;
                    cmdUpdateRawStock.Parameters.AddWithValue("@RawProductID", rs.RawProductID);
                    cmdUpdateRawStock.Parameters.AddWithValue("@Qty", rs.Qty);
                    int rows = cmdUpdateRawStock.ExecuteNonQuery();

                    if (rows > 0)
                    {
                        cmdGetSlitPeel.Transaction = trans;
                        cmdGetSlitPeel.Parameters.AddWithValue("@OrderNo", ps.Order.OrderNo);
                        cmdGetSlitPeel.Parameters.AddWithValue("@RawProductID", ps.Product.RawProduct.RawProductID);
                        cmdGetSlitPeel.Parameters.AddWithValue("@ProductID", ps.Product.ProductID);
                        using (SqlDataReader dr = cmdGetSlitPeel.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    psID = Convert.ToInt32(dr["id"]);
                                    psBL = Convert.ToDecimal(dr["blocks_logs"]);
                                    psQty = Convert.ToDecimal(dr["qty"]);

                                }
                            }
                        }
                        if (psID > 0)
                        {
                            cmdUpdatePendSlitPeel.Transaction = trans;
                            cmdUpdatePendSlitPeel.Parameters.AddWithValue("@ID", psID);
                            cmdUpdatePendSlitPeel.Parameters.AddWithValue("@BlocksLogs", (psBL - ps.BlockLogQty) < 0 ? 0 : (psBL - ps.BlockLogQty));
                            cmdUpdatePendSlitPeel.Parameters.AddWithValue("@Qty", (psQty - ps.Qty) < 0 ? 0 : (psQty - ps.Qty));
                            res = cmdUpdatePendSlitPeel.ExecuteNonQuery();
                        }
                    }

                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return res;
        }

        private static string GetProductStatus(string n)
        {
            string stat = string.Empty;

            switch (n)
            {
                case "Tile": stat = "Slitting";
                    break;
                case "Bulk": stat = "Peeling";
                    break;
                case "Standard": stat = "Peeling";
                    break;
                case "Custom": stat = "Peeling";
                    break;
                default:
                    break;
            }

            return stat;
        }

        public static int ReRollingCompleted(ReRollingConfirmationViewModel reRollingConfirmationViewModel)
        {
            int result = 0;
            int reRollRes = 0;
            int reRollComp = 0;
            int tmpShiftId = 0;
            string pcName = string.Empty;
            //Transaction transaction = null;

            pcName = System.Environment.MachineName;
            if (string.IsNullOrEmpty(pcName))
            {
                pcName = "Unknown";
            }

            //Check if it is friday
            if (DateTime.Now.DayOfWeek == DayOfWeek.Friday)
            {
                if ((DateTime.Now.TimeOfDay >= new TimeSpan(5, 30, 0)) && (DateTime.Now.TimeOfDay <= new TimeSpan(11, 29, 58)))
                {
                    tmpShiftId = 1;
                }
                else if ((DateTime.Now.TimeOfDay >= new TimeSpan(11, 30, 0)) && (DateTime.Now.TimeOfDay <= new TimeSpan(17, 14, 58)))
                {
                    tmpShiftId = 2;
                }
                else
                {
                    tmpShiftId = 3;
                }
            }
            else
            {
                tmpShiftId = reRollingConfirmationViewModel.currentShift;
            }

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {

                SqlCommand cmdUpdateReRolling = new SqlCommand("UPDATE ReRollingOrders SET rolls-=@Qty,dollar_value-=@DollarVal WHERE id = @ID", conn);

                SqlCommand cmdDeleteReRolling = new SqlCommand("DELETE ReRollingOrders WHERE rolls<=0 AND id=@ID", conn);

                SqlCommand cmdReRollCompleted = new SqlCommand("INSERT INTO ReRollingCompleted(production_timetable_id,sales_id,product_id,rolls,short_rolls,off_spec_rolls,completed_by,created_date,created_time,shift) " +
                                                        "VALUES (@ProdTimeTableID,@SalesID,@ProductID,@Rolls,@ShortRolls,@OffSpecRolls,@CompletedBy,@CreatedDate,@CreatedTime,@Shift)", conn);

                SqlCommand cmdShortRoll = new SqlCommand("INSERT INTO ShortRolls(sales_id,roll_no,lm) " +
                                                         "VALUES (@SalesID,@RollNo,@LM)", conn);

                SqlCommand cmdOffSpec = new SqlCommand("INSERT INTO OffSpec(sales_id,product_id,qty,lm,m2,kg,per_cost,total_cost,date_entered,time_entered,entered_by) " +
                                                       "OUTPUT INSERTED.ID VALUES (@SalesID,@ProductID,@Qty,@Lm,@M2,@Kg,@PerCost,@TotCost,@DateEntered,@TimeEntered,@EnteredBy)", conn);

                SqlCommand cmdReRollDefects = new SqlCommand("INSERT INTO ReRollDefects(sales_id,off_spec_id,roll_no,isTooThick,isTooThin,isOperatorError,isContaminated,isOther) " +
                                                             "VALUES (@SalesID,@OffSpecID,@RollNo,@IsTooThick,@IsTooThin,@IsOperatorError,@IsContaminated,@IsOther)", conn);

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {

                    cmdUpdateReRolling.Transaction = trans;
                    cmdUpdateReRolling.Parameters.AddWithValue("@Qty", reRollingConfirmationViewModel.NoOfLogsReRolled);
                    cmdUpdateReRolling.Parameters.AddWithValue("@DollarVal", reRollingConfirmationViewModel.complDollarVal);
                    cmdUpdateReRolling.Parameters.AddWithValue("@ID", reRollingConfirmationViewModel.reRollingProduction.ID);
                    reRollRes = cmdUpdateReRolling.ExecuteNonQuery();

                    cmdDeleteReRolling.Transaction = trans;
                    cmdDeleteReRolling.Parameters.AddWithValue("@ID", reRollingConfirmationViewModel.reRollingProduction.ID);
                    cmdDeleteReRolling.ExecuteNonQuery();

                    cmdReRollCompleted.Transaction = trans;
                    cmdReRollCompleted.Parameters.AddWithValue("@ProdTimeTableID", reRollingConfirmationViewModel.reRollingProduction.ProdTimetableID);
                    cmdReRollCompleted.Parameters.AddWithValue("@SalesID", reRollingConfirmationViewModel.reRollingProduction.Order.OrderNo);
                    cmdReRollCompleted.Parameters.AddWithValue("@ProductID", reRollingConfirmationViewModel.reRollingProduction.Product.ProductID);
                    cmdReRollCompleted.Parameters.AddWithValue("@Rolls", reRollingConfirmationViewModel.NoOfLogsReRolled);
                    cmdReRollCompleted.Parameters.AddWithValue("@ShortRolls", reRollingConfirmationViewModel.SelectedShortRolls);
                    cmdReRollCompleted.Parameters.AddWithValue("@OffSpecRolls", reRollingConfirmationViewModel.SelectedOffSpec);
                    cmdReRollCompleted.Parameters.AddWithValue("@CompletedBy", pcName);
                    cmdReRollCompleted.Parameters.AddWithValue("@CreatedDate", DateTime.Now.Date);
                    cmdReRollCompleted.Parameters.AddWithValue("@CreatedTime", DateTime.Now.TimeOfDay);
                    cmdReRollCompleted.Parameters.AddWithValue("@Shift", tmpShiftId);
                    reRollComp = cmdReRollCompleted.ExecuteNonQuery();

                    if (reRollingConfirmationViewModel.ShortRollCollection.Count > 0)
                    {
                        foreach (var item in reRollingConfirmationViewModel.ShortRollCollection)
                        {
                            cmdShortRoll.Transaction = trans;
                            cmdShortRoll.Parameters.AddWithValue("@SalesID", reRollingConfirmationViewModel.reRollingProduction.Order.OrderNo);
                            cmdShortRoll.Parameters.AddWithValue("@RollNo", item.RollNo);
                            cmdShortRoll.Parameters.AddWithValue("@LM", item.LM);
                            cmdShortRoll.ExecuteNonQuery();
                            cmdShortRoll.Parameters.Clear();
                        }
                    }

                    if (reRollingConfirmationViewModel.OffSpecCollection.Count > 0)
                    {
                        foreach (var item in reRollingConfirmationViewModel.OffSpecCollection)
                        {
                            cmdOffSpec.Transaction = trans;
                            cmdOffSpec.Parameters.AddWithValue("@SalesID", reRollingConfirmationViewModel.reRollingProduction.Order.OrderNo);
                            cmdOffSpec.Parameters.AddWithValue("@ProductID", reRollingConfirmationViewModel.reRollingProduction.Product.ProductID);
                            cmdOffSpec.Parameters.AddWithValue("@Qty", 1);
                            cmdOffSpec.Parameters.AddWithValue("@Lm", item.LM);
                            cmdOffSpec.Parameters.AddWithValue("@M2", reRollingConfirmationViewModel.width * item.LM);
                            cmdOffSpec.Parameters.AddWithValue("@Kg", 0);
                            cmdOffSpec.Parameters.AddWithValue("@PerCost", 0);
                            cmdOffSpec.Parameters.AddWithValue("@TotCost", 0);
                            cmdOffSpec.Parameters.AddWithValue("@DateEntered", DateTime.Now.Date);
                            cmdOffSpec.Parameters.AddWithValue("@TimeEntered", DateTime.Now.TimeOfDay);
                            cmdOffSpec.Parameters.AddWithValue("@EnteredBy", pcName);
                            Int32 offSpecId = (Int32)cmdOffSpec.ExecuteScalar();
                            cmdOffSpec.Parameters.Clear();

                            cmdReRollDefects.Transaction = trans;
                            cmdReRollDefects.Parameters.AddWithValue("@SalesID", reRollingConfirmationViewModel.reRollingProduction.Order.OrderNo);
                            cmdReRollDefects.Parameters.AddWithValue("@OffSpecID", offSpecId);
                            cmdReRollDefects.Parameters.AddWithValue("@RollNo", item.RollNo);
                            cmdReRollDefects.Parameters.AddWithValue("@IsTooThick", item.IsTooThick);
                            cmdReRollDefects.Parameters.AddWithValue("@IsTooThin", item.IsTooThin);
                            cmdReRollDefects.Parameters.AddWithValue("@IsOperatorError", item.IsOperatorError);
                            cmdReRollDefects.Parameters.AddWithValue("@IsContaminated", item.IsContaminated);
                            cmdReRollDefects.Parameters.AddWithValue("@IsOther", item.IsOther);
                            cmdReRollDefects.ExecuteNonQuery();
                            cmdReRollDefects.Parameters.Clear();

                        }
                    }

                    trans.Commit();

                    if (reRollComp > 0 && reRollRes > 0)
                    {
                        //string userName = System.Security.Principal.WindowsIdentity.GetCurrent().Name;
                        //if (String.IsNullOrEmpty(userName))
                        //{
                        //    userName = "Unknown";
                        //}
                        //transaction = new Transaction()
                        //{
                        //    TransDateTime = DateTime.Now,
                        //    Transtype = "Completed (ReRolling)",
                        //    SalesOrderID = reRollingConfirmationViewModel.reRollingProduction.Order.OrderNo,
                        //    Products = new List<RawStock>()
                        //{
                        //    new RawStock(){ RawProduct = new RawProduct(){RawProductID = reRollingConfirmationViewModel.reRollingProduction.Product.ProductID},Qty=reRollingConfirmationViewModel.NoOfLogsReRolled},  
                        //},
                        //    CreatedBy = userName
                        //};
                        //int r = DBAccess.InsertTransaction(transaction);

                        result = 1;
                    }
                    else
                    {
                        result = 0;
                        trans.Rollback();
                    }
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("Error adding to ReRollingTemp: " + e);
                }
                finally
                {
                    conn.Close();
                }
                return result;
            }


        }


        public static List<ProductMeterage> GetProductMeterageByValues(ProductMeterage productMeterage)
        {
            List<ProductMeterage> productMeterageList = new List<ProductMeterage>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                conn.Open();
                try
                {
                    SqlCommand cmdGetData = new SqlCommand("SELECT * FROM ProductMeterage " +
                                                           "WHERE thickness = @Thickness AND mould_size=@MouldSize AND mould_type=@MouldType", conn);

                    cmdGetData.Parameters.AddWithValue("@Thickness", productMeterage.Thickness);
                    cmdGetData.Parameters.AddWithValue("@MouldSize", productMeterage.MouldSize);
                    cmdGetData.Parameters.AddWithValue("@MouldType", productMeterage.MouldType);
                    //cmdGetData.Parameters.AddWithValue("@ExpectedYield", productMeterage.ExpectedYield);
                    using (SqlDataReader dr = cmdGetData.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                ProductMeterage pm = new ProductMeterage();
                                pm.Thickness = Convert.ToInt16(dr["thickness"]);
                                pm.MouldSize = Convert.ToDecimal(dr["mould_size"]);
                                pm.MouldType = (dr["mould_type"]).ToString();
                                pm.ExpectedYield = Convert.ToDecimal(dr["expected_yield"]);
                                productMeterageList.Add(pm);
                            }
                        }
                    }
                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return productMeterageList;
        }

        public static List<PendingSlitPeel> GetPendingSlitPeelByID(PendingSlitPeel ps)
        {
            List<PendingSlitPeel> pendingSlitPeelList = new List<PendingSlitPeel>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                conn.Open();
                try
                {
                    SqlCommand cmdGetData = new SqlCommand("SELECT * FROM PendingSlitPeel " +
                                                           "WHERE order_no = @OrderNo AND raw_product_id=@RawProductID AND product_id=@ProductID", conn);

                    cmdGetData.Parameters.AddWithValue("@OrderNo", ps.Order.OrderNo);
                    cmdGetData.Parameters.AddWithValue("@RawProductID", ps.Product.RawProduct.RawProductID);
                    cmdGetData.Parameters.AddWithValue("@ProductID", ps.Product.ProductID);
                    using (SqlDataReader dr = cmdGetData.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                PendingSlitPeel psp = new PendingSlitPeel();
                                psp.Order = new Order() { OrderNo = Convert.ToInt32(dr["order_no"]) };
                                psp.Product = new Product() { ProductID = Convert.ToInt16(dr["product_id"]), RawProduct = new RawProduct() { RawProductID = Convert.ToInt16(dr["raw_product_id"]) } };
                                psp.BlockLogQty = Convert.ToDecimal(dr["blocks_logs"]);
                                psp.Qty = Convert.ToDecimal(dr["qty"]);
                                pendingSlitPeelList.Add(psp);
                            }
                        }
                    }
                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return pendingSlitPeelList;
        }

        public static Curing GetTopCuringProduct(int OrderNo, int RawProductID)
        {
            Curing curing = new Curing();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                conn.Open();
                try
                {
                    SqlCommand cmdGetData = new SqlCommand("SELECT DISTINCT TOP 1 id,blc_raw_product_id,product_id,order_id,blc_blocklog_qty,blc_start_time,blc_end_time,is_cured,is_enabled " +
                                                           "FROM BlockLogCuring " +
                                                           "WHERE order_id = @OrderNo AND blc_raw_product_id = @RawProductID AND is_enabled = 'False'", conn);

                    cmdGetData.Parameters.AddWithValue("@OrderNo", OrderNo);
                    cmdGetData.Parameters.AddWithValue("@RawProductID", RawProductID);
                    using (SqlDataReader dr = cmdGetData.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                curing.id = Convert.ToInt32(dr["id"]);
                                curing.Product = new Product() { ProductID = Convert.ToInt16(dr["product_id"]), RawProduct = new RawProduct() { RawProductID = Convert.ToInt16(dr["blc_raw_product_id"]) } };
                                curing.OrderNo = Convert.ToInt32(dr["order_id"]);
                                curing.Qty = Convert.ToDecimal(dr["blc_blocklog_qty"]);
                            }
                        }
                    }
                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return curing;
        }

        public static int CheckCuringExist(Int32 id)
        {
            int result = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    using (SqlCommand cmd = new SqlCommand("SELECT COUNT(*) FROM BlockLogCuring WHERE id=@ID AND is_cured = 'False'", conn))
                    {
                        conn.Open();

                        cmd.Parameters.AddWithValue("@ID", id);
                        result = (int)cmd.ExecuteScalar();
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL Checking production date existance ERROR : " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return result;
        }

        public static List<ProductMeterage> GetProductMeterage()
        {
            List<ProductMeterage> productMeterageList = new List<ProductMeterage>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                conn.Open();
                try
                {
                    SqlCommand cmdGetData = new SqlCommand("SELECT * FROM ProductMeterage", conn);

                    using (SqlDataReader dr = cmdGetData.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                ProductMeterage pm = new ProductMeterage();
                                pm.Thickness = Convert.ToInt16(dr["thickness"]);
                                pm.MouldSize = Convert.ToDecimal(dr["mould_size"]);
                                pm.MouldType = (dr["mould_type"]).ToString();
                                pm.ExpectedYield = Convert.ToDecimal(dr["expected_yield"]);
                                productMeterageList.Add(pm);
                            }
                        }
                    }
                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return productMeterageList;
        }

        public static int UpdatePendingOrderDetails(PendingOrder po)
        {
            int res = 0;
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                conn.Open();

                try
                {
                    SqlCommand cmdUpdatePendingOrder = new SqlCommand("UPDATE PendingOrder SET blocks_logs=@BlocksLogs, qty=@Qty WHERE order_id = @OrderNo AND raw_product_id=@RawProductID AND product_id=@ProductID", conn);

                    cmdUpdatePendingOrder.Parameters.AddWithValue("@OrderNo", po.Order.OrderNo);
                    cmdUpdatePendingOrder.Parameters.AddWithValue("@RawProductID", po.Product.RawProduct.RawProductID);
                    cmdUpdatePendingOrder.Parameters.AddWithValue("@ProductID", po.Product.ProductID);
                    cmdUpdatePendingOrder.Parameters.AddWithValue("@BlocksLogs", po.BlockLogQty);
                    cmdUpdatePendingOrder.Parameters.AddWithValue("@Qty", po.Qty);
                    res = cmdUpdatePendingOrder.ExecuteNonQuery();

                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return res;
        }

        public static int UpdateBlockLogCuring(Curing curing)
        {
            int res = 0;
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                conn.Open();

                try
                {
                    SqlCommand cmdUpdateBlockLogCuring = new SqlCommand("UPDATE BlockLogCuring SET blc_start_time=@StartTime, blc_end_time=@EndTime,is_enabled=@IsEnabled " +
                                                                      "WHERE order_id = @OrderNo AND blc_raw_product_id=@RawProductID AND product_id=@ProductID", conn);

                    cmdUpdateBlockLogCuring.Parameters.AddWithValue("@OrderNo", curing.OrderNo);
                    cmdUpdateBlockLogCuring.Parameters.AddWithValue("@RawProductID", curing.Product.RawProduct.RawProductID);
                    cmdUpdateBlockLogCuring.Parameters.AddWithValue("@ProductID", curing.Product.ProductID);
                    cmdUpdateBlockLogCuring.Parameters.AddWithValue("@StartTime", curing.StartTime);
                    cmdUpdateBlockLogCuring.Parameters.AddWithValue("@EndTime", curing.EndTime);
                    cmdUpdateBlockLogCuring.Parameters.AddWithValue("@IsEnabled", curing.IsEnabled);
                    res = cmdUpdateBlockLogCuring.ExecuteNonQuery();

                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return res;
        }

        public static int UpdatePendingOrder(Int64 orderNo, int rawProductId, int productId, string str)
        {
            int res = 0;
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                conn.Open();

                try
                {
                    SqlCommand cmdUpdatePendingOrder = new SqlCommand("UPDATE PendingOrder SET status=@Status WHERE order_id = @OrderNo AND raw_product_id=@RawProductID AND product_id=@ProductID", conn);

                    cmdUpdatePendingOrder.Parameters.AddWithValue("@OrderNo", orderNo);
                    cmdUpdatePendingOrder.Parameters.AddWithValue("@RawProductID", rawProductId);
                    cmdUpdatePendingOrder.Parameters.AddWithValue("@ProductID", productId);
                    cmdUpdatePendingOrder.Parameters.AddWithValue("@Status", str);
                    res = cmdUpdatePendingOrder.ExecuteNonQuery();

                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return res;
        }

        public static int UpdateReRollingStatus(Int32 id, string status)
        {
            int res = 0;
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                conn.Open();

                try
                {
                    SqlCommand cmdUpdateReRollingStatus = new SqlCommand("UPDATE ReRollingOrders SET status=@Status " +
                                                                      "WHERE id = @ID", conn);

                    cmdUpdateReRollingStatus.Parameters.AddWithValue("@ID", id);
                    cmdUpdateReRollingStatus.Parameters.AddWithValue("@Status", status);
                    res = cmdUpdateReRollingStatus.ExecuteNonQuery();

                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error updating ReRolling Status: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return res;
        }

        public static Int32 InsertNewVehicleWorkOrder(VehicleWorkOrder vwo)
        {
            int rc1 = 0;
            int rc2 = 0;
            Int32 res = 0;
            Int32 workOrderId = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdNewVehicleWorkOrder = new SqlCommand("INSERT INTO VehicleWorkOrder(vehicle_id,user_id,work_order_type,maintenance_frequency,first_service_date,next_service_date,odometer_reading,is_completed,created_date,created_by,status,urgency) " +
                                                                   "VALUES (@VehicleID,@UserID,@WorkOrderType,@MaintenanceFrequency,@FirstServiceDate,@NextServiceDate,@OdometerReading,@IsCompleted,@CreatedDate,@CreatedBy,@Status,@Urgency)", conn);

                SqlCommand cmdGeWorkOrdertId = new SqlCommand("SELECT MAX(id) FROM VehicleWorkOrder", conn);

                SqlCommand cmdVehicleWorkDescription = new SqlCommand("INSERT INTO VehicleWorkDescription(vehicle_maintenance_info_id,vehicle_work_order_id,vehicle_maintenance_sequence_id,vehicle_repair_work_order_id,description,is_completed,is_active,comment) " +
                                                                  "VALUES (@VehicleMaintInfoID,@VehicleWorkOrderID,@VehicleMaintenanceSequenceID,@VehicleRepairWorkOrderID,@Description,@IsCompleted,@IsActive,@Comment)", conn);


                //SqlCommand cmdNewVehicleWorkOrderDetails = new SqlCommand("INSERT INTO VehicleWorkOrder(vehicle_id,maintenance_frequency,service_date,is_completed) " +
                //                                                          "VALUES (@VehicleID,@MaintenanceFrequency,@ServiceDate,@IsCompleted)", conn);

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {
                    cmdNewVehicleWorkOrder.Transaction = trans;
                    //cmdNewVehicleWorkOrder.Parameters.AddWithValue("@VehicleWorkDescriptionID", 0);
                    cmdNewVehicleWorkOrder.Parameters.AddWithValue("@VehicleID", vwo.Vehicle.ID);
                    cmdNewVehicleWorkOrder.Parameters.AddWithValue("@UserID", 0);
                    cmdNewVehicleWorkOrder.Parameters.AddWithValue("@WorkOrderType", vwo.WorkOrderType);
                    cmdNewVehicleWorkOrder.Parameters.AddWithValue("@MaintenanceFrequency", vwo.MaintenanceFrequency);
                    cmdNewVehicleWorkOrder.Parameters.AddWithValue("@FirstServiceDate", vwo.FirstServiceDate);
                    cmdNewVehicleWorkOrder.Parameters.AddWithValue("@NextServiceDate", vwo.NextServiceDate);
                    cmdNewVehicleWorkOrder.Parameters.AddWithValue("@OdometerReading", string.Empty);
                    cmdNewVehicleWorkOrder.Parameters.AddWithValue("@IsCompleted", vwo.IsCompleted);
                    cmdNewVehicleWorkOrder.Parameters.AddWithValue("@CreatedDate", vwo.CreatedDate);
                    cmdNewVehicleWorkOrder.Parameters.AddWithValue("@CreatedBy", vwo.CreatedBy);
                    cmdNewVehicleWorkOrder.Parameters.AddWithValue("@Status", vwo.Status);
                    cmdNewVehicleWorkOrder.Parameters.AddWithValue("@Urgency", vwo.Urgency);
                    rc1 = cmdNewVehicleWorkOrder.ExecuteNonQuery();

                    cmdGeWorkOrdertId.Transaction = trans;
                    workOrderId = Convert.ToInt32(cmdGeWorkOrdertId.ExecuteScalar());

                    foreach (var item in vwo.VehicleMaintenanceInfo)
                    {
                        if (item.Active == true)
                        {
                            cmdVehicleWorkDescription.Transaction = trans;
                            cmdVehicleWorkDescription.Parameters.AddWithValue("@VehicleMaintInfoID", item.ID);
                            cmdVehicleWorkDescription.Parameters.AddWithValue("@VehicleWorkOrderID", workOrderId);
                            cmdVehicleWorkDescription.Parameters.AddWithValue("@VehicleMaintenanceSequenceID", item.VehicleMaintenanceSequence.ID);
                            cmdVehicleWorkDescription.Parameters.AddWithValue("@VehicleRepairWorkOrderID", 0);
                            cmdVehicleWorkDescription.Parameters.AddWithValue("@Description", item.Description);
                            cmdVehicleWorkDescription.Parameters.AddWithValue("@IsCompleted", false);
                            cmdVehicleWorkDescription.Parameters.AddWithValue("@IsActive", true);
                            cmdVehicleWorkDescription.Parameters.AddWithValue("@Comment", string.Empty);
                            rc2 = cmdVehicleWorkDescription.ExecuteNonQuery();
                            cmdVehicleWorkDescription.Parameters.Clear();
                        }
                    }

                    if (rc1 > 0 && rc2 > 0)
                    {
                        res = workOrderId;
                    }
                    trans.Commit();

                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("Production SQL Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return res;
        }

        public static Tuple<int, int> InsertNewVehicleWorkOrderCollection(List<ScheduledVehicleDetails> scheduledVehicleDetails, List<Int32> cancelOrders)
        {
            int noOfRec = 0;
            int cancelledOrders = 0;
            Int32 workOrderId = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdNewVehicleWorkOrder = new SqlCommand("INSERT INTO VehicleWorkOrder(vehicle_id,user_id,work_order_type,maintenance_frequency,first_service_date,next_service_date,odometer_reading,is_completed,created_date,created_by,status,urgency) " +
                                                                   "VALUES (@VehicleID,@UserID,@WorkOrderType,@MaintenanceFrequency,@FirstServiceDate,@NextServiceDate,@OdometerReading,@IsCompleted,@CreatedDate,@CreatedBy,@Status,@Urgency)", conn);

                SqlCommand cmdGeWorkOrdertId = new SqlCommand("SELECT MAX(id) FROM VehicleWorkOrder", conn);

                SqlCommand cmdVehicleWorkDescription = new SqlCommand("INSERT INTO VehicleWorkDescription(vehicle_maintenance_info_id,vehicle_work_order_id,vehicle_maintenance_sequence_id,vehicle_repair_work_order_id,description,is_completed,is_active,comment) " +
                                                                  "VALUES (@VehicleMaintInfoID,@VehicleWorkOrderID,@VehicleMaintenanceSequenceID,@VehicleRepairWorkOrderID,@Description,@IsCompleted,@IsActive,@Comment)", conn);

                SqlCommand cmdUpdateVehicleWorkOrder = new SqlCommand("UPDATE VehicleWorkOrder SET status = @Cancelled " +
                                                                      "WHERE id = @ID", conn);

                //SqlCommand cmdNewVehicleWorkOrderDetails = new SqlCommand("INSERT INTO VehicleWorkOrder(vehicle_id,maintenance_frequency,service_date,is_completed) " +
                //                                                          "VALUES (@VehicleID,@MaintenanceFrequency,@ServiceDate,@IsCompleted)", conn);

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {
                    foreach (var item in scheduledVehicleDetails)
                    {
                        cmdNewVehicleWorkOrder.Transaction = trans;
                        cmdNewVehicleWorkOrder.Parameters.AddWithValue("@VehicleID", item.Vehicle.ID);
                        cmdNewVehicleWorkOrder.Parameters.AddWithValue("@UserID", 0);
                        cmdNewVehicleWorkOrder.Parameters.AddWithValue("@WorkOrderType", item.WorkOrderType);
                        cmdNewVehicleWorkOrder.Parameters.AddWithValue("@MaintenanceFrequency", item.MaintenanceFrequency);
                        cmdNewVehicleWorkOrder.Parameters.AddWithValue("@FirstServiceDate", item.FirstServiceDate);
                        cmdNewVehicleWorkOrder.Parameters.AddWithValue("@NextServiceDate", item.NextServiceDate);
                        cmdNewVehicleWorkOrder.Parameters.AddWithValue("@OdometerReading", string.Empty);
                        cmdNewVehicleWorkOrder.Parameters.AddWithValue("@IsCompleted", item.IsCompleted);
                        cmdNewVehicleWorkOrder.Parameters.AddWithValue("@CreatedDate", item.CreatedDate);
                        cmdNewVehicleWorkOrder.Parameters.AddWithValue("@CreatedBy", item.CreatedBy);
                        cmdNewVehicleWorkOrder.Parameters.AddWithValue("@Status", item.Status);
                        cmdNewVehicleWorkOrder.Parameters.AddWithValue("@Urgency", item.Urgency);
                        cmdNewVehicleWorkOrder.ExecuteNonQuery();
                        cmdNewVehicleWorkOrder.Parameters.Clear();

                        cmdGeWorkOrdertId.Transaction = trans;
                        workOrderId = Convert.ToInt32(cmdGeWorkOrdertId.ExecuteScalar());

                        foreach (var items in item.VehicleMaintenanceInfo)
                        {
                            if (items.Active == true)
                            {
                                cmdVehicleWorkDescription.Transaction = trans;
                                cmdVehicleWorkDescription.Parameters.AddWithValue("@VehicleMaintInfoID", items.ID);
                                cmdVehicleWorkDescription.Parameters.AddWithValue("@VehicleWorkOrderID", workOrderId);
                                cmdVehicleWorkDescription.Parameters.AddWithValue("@VehicleMaintenanceSequenceID", items.VehicleMaintenanceSequence.ID);
                                cmdVehicleWorkDescription.Parameters.AddWithValue("@VehicleRepairWorkOrderID", 0);
                                cmdVehicleWorkDescription.Parameters.AddWithValue("@Description", items.Description);
                                cmdVehicleWorkDescription.Parameters.AddWithValue("@IsCompleted", false);
                                cmdVehicleWorkDescription.Parameters.AddWithValue
                                    ("@IsActive", true);
                                cmdVehicleWorkDescription.Parameters.AddWithValue("@Comment", string.Empty);
                                cmdVehicleWorkDescription.ExecuteNonQuery();
                                cmdVehicleWorkDescription.Parameters.Clear();
                            }
                        }

                        noOfRec++;
                    }


                    foreach (var item in cancelOrders)
                    {
                        cmdUpdateVehicleWorkOrder.Transaction = trans;
                        cmdUpdateVehicleWorkOrder.Parameters.AddWithValue("@ID", item);
                        cmdUpdateVehicleWorkOrder.Parameters.AddWithValue("@Cancelled", VehicleWorkOrderEnum.Cancelled.ToString());
                        cmdUpdateVehicleWorkOrder.ExecuteNonQuery();
                        cmdUpdateVehicleWorkOrder.Parameters.Clear();
                        cancelledOrders++;
                    }
                    //noOfRec = noOfRec == 0 ? 0 : noOfRec + 1;
                    //cancelledOrders = cancelledOrders == 0 ? 0 : cancelledOrders + 1;
                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("Production SQL Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return Tuple.Create(noOfRec, cancelledOrders);
        }

        public static Int32 InsertNewVehicleRepairWorkOrder(VehicleRepairWorkOrder vrwo, Int32 id)
        {
            int rc1 = 0;
            int rc2 = 0;
            int rc3 = 0;
            Int32 res = 0;
            Int32 workOrderId = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdNewVehicleWorkOrder = new SqlCommand("INSERT INTO VehicleWorkOrder(vehicle_id,user_id,maintenance_seq_id,largest_seq_id,work_order_type,first_service_date,next_service_date,last_odometer_reading,odometer_reading,is_completed,created_date,created_by,status,urgency,is_viewed) " +
                                                                   "VALUES (@VehicleID,@UserID,@MaintenanceSeqId,@LargestSeqID,@WorkOrderType,@FirstServiceDate,@NextServiceDate,@LastOdometerReading,@OdometerReading,@IsCompleted,@CreatedDate,@CreatedBy,@Status,@Urgency,@IsViewed)", conn);

                SqlCommand cmdGeWorkOrdertId = new SqlCommand("SELECT MAX(id) FROM VehicleWorkOrder", conn);

                SqlCommand cmdVehicleWorkDescription = new SqlCommand("INSERT INTO VehicleRepairDescription(vehicle_work_description_id,vehicle_work_order_id,sequence_id,description,parts_orded,is_completed,is_active) " +
                                                                      "VALUES (@VehicleWorkDescriptionID,@VehicleWorkOrderID,@SequenceID,@RDescription,@PartsOrded,@IsCompleted,@IsActive)", conn);

                //SqlCommand cmdUpdateVehicleWorkDescription = new SqlCommand("UPDATE VehicleWorkDescription SET vehicle_repair_work_order_id=@VehicleRepairWorkOrderID " +
                //                                                            "WHERE id = @ID", conn);

                SqlCommand cmdGeVehicleRepairDescriptionID = new SqlCommand("SELECT MAX(id) FROM VehicleRepairDescription", conn);

                SqlCommand cmdInsertVehiclePartDescription = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM VehiclePartDescription " +
                                                                            "WHERE vehicle_repair_id = @VehicleRepairID AND sequence_id = @SequenceID) " +
                                                                            "INSERT INTO VehiclePartDescription VALUES(@VehicleRepairID,@SequenceID,@Code,@Description,@IsActive,@Completed) " +
                                                                            "ELSE " +
                                                                            "UPDATE VehiclePartDescription SET code=@Code " +
                                                                            "WHERE vehicle_repair_id = @VehicleRepairID AND sequence_id = @SequenceID", conn);

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {
                    cmdNewVehicleWorkOrder.Transaction = trans;
                    //cmdNewVehicleWorkOrder.Parameters.AddWithValue("@VehicleWorkDescriptionID", vrwo.VehicleWorkDescriptionID);
                    cmdNewVehicleWorkOrder.Parameters.AddWithValue("@VehicleID", vrwo.Vehicle.ID);
                    cmdNewVehicleWorkOrder.Parameters.AddWithValue("@UserID", 0);
                    cmdNewVehicleWorkOrder.Parameters.AddWithValue("@WorkOrderType", vrwo.WorkOrderType);
                    cmdNewVehicleWorkOrder.Parameters.AddWithValue("@MaintenanceSeqId", vrwo.VehicleMaintenanceSequence.ID);
                    cmdNewVehicleWorkOrder.Parameters.AddWithValue("@LargestSeqID", vrwo.LargestSeqID);
                    cmdNewVehicleWorkOrder.Parameters.AddWithValue("@FirstServiceDate", vrwo.FirstServiceDate);
                    cmdNewVehicleWorkOrder.Parameters.AddWithValue("@NextServiceDate", vrwo.NextServiceDate);
                    cmdNewVehicleWorkOrder.Parameters.AddWithValue("@LastOdometerReading", 0);
                    cmdNewVehicleWorkOrder.Parameters.AddWithValue("@OdometerReading", 0);
                    cmdNewVehicleWorkOrder.Parameters.AddWithValue("@IsCompleted", vrwo.IsCompleted);
                    cmdNewVehicleWorkOrder.Parameters.AddWithValue("@CreatedDate", vrwo.CreatedDate);
                    cmdNewVehicleWorkOrder.Parameters.AddWithValue("@CreatedBy", vrwo.CreatedBy);
                    cmdNewVehicleWorkOrder.Parameters.AddWithValue("@Status", vrwo.Status);
                    cmdNewVehicleWorkOrder.Parameters.AddWithValue("@Urgency", vrwo.Urgency);
                    cmdNewVehicleWorkOrder.Parameters.AddWithValue("@IsViewed", vrwo.IsViewed);
                    
                    rc1 = cmdNewVehicleWorkOrder.ExecuteNonQuery();

                    cmdGeWorkOrdertId.Transaction = trans;
                    workOrderId = Convert.ToInt32(cmdGeWorkOrdertId.ExecuteScalar());

                    foreach (var item in vrwo.VehicleRepairDescription)
                    {
                        if (item.StrSequenceNumber != "Select")
                        {
                            cmdVehicleWorkDescription.Transaction = trans;
                            cmdVehicleWorkDescription.Parameters.AddWithValue("@VehicleWorkDescriptionID", 0);
                            cmdVehicleWorkDescription.Parameters.AddWithValue("@VehicleWorkOrderID", workOrderId);
                            cmdVehicleWorkDescription.Parameters.AddWithValue("@SequenceID", item.SequenceNumber);
                            cmdVehicleWorkDescription.Parameters.AddWithValue("@RDescription", item.RepairDescription);
                            cmdVehicleWorkDescription.Parameters.AddWithValue("@PartsOrded", item.PartsOrdered);
                            cmdVehicleWorkDescription.Parameters.AddWithValue("@IsCompleted", false);
                            cmdVehicleWorkDescription.Parameters.AddWithValue("@IsActive", true);
                            rc2 = cmdVehicleWorkDescription.ExecuteNonQuery();
                            cmdVehicleWorkDescription.Parameters.Clear();

                            cmdGeVehicleRepairDescriptionID.Transaction = trans;
                            id = Convert.ToInt32(cmdGeVehicleRepairDescriptionID.ExecuteScalar());
                            cmdGeVehicleRepairDescriptionID.Parameters.Clear();

                            foreach (var itemz in item.Vehicleparts)
                            {
                                if (itemz.PartDescription != "Select")
                                {
                                    cmdInsertVehiclePartDescription.Transaction = trans;
                                    cmdInsertVehiclePartDescription.Parameters.AddWithValue("@VehicleRepairID", id);
                                    cmdInsertVehiclePartDescription.Parameters.AddWithValue("@SequenceID", itemz.SequenceNumber);
                                    cmdInsertVehiclePartDescription.Parameters.AddWithValue("@Code", itemz.PartCode);
                                    cmdInsertVehiclePartDescription.Parameters.AddWithValue("@Description", itemz.PartDescription ?? (object)DBNull.Value);
                                    cmdInsertVehiclePartDescription.Parameters.AddWithValue("@IsActive", true);
                                    cmdInsertVehiclePartDescription.Parameters.AddWithValue("@Completed", false);
                                    cmdInsertVehiclePartDescription.ExecuteNonQuery();
                                    cmdInsertVehiclePartDescription.Parameters.Clear();
                                }
                            }
                        }
                    }
                    //cmdUpdateVehicleWorkDescription.Transaction = trans;
                    //cmdUpdateVehicleWorkDescription.Parameters.AddWithValue("@ID", id);
                    //cmdUpdateVehicleWorkDescription.Parameters.AddWithValue("@VehicleRepairWorkOrderID", workOrderId);
                    //rc3 = cmdUpdateVehicleWorkDescription.ExecuteNonQuery();

                    if (rc1 > 0 && rc2 > 0)
                    {
                        res = workOrderId;
                    }
                    trans.Commit();

                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("Production SQL Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return res;
        }

        public static ObservableCollection<VehicleWorkOrder> GetVehicleWorkOrders()
        {
            ObservableCollection<VehicleWorkOrder> vehicleWorkOrderList = new ObservableCollection<VehicleWorkOrder>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                conn.Open();
                try
                {
                    SqlCommand cmdGetData = new SqlCommand("SELECT VehicleWorkOrder.id AS VehicleWorkOrderNo,VehicleWorkOrder.work_order_type,StockLocation.id AS SLID,StockLocation.stock_name,Vehicles.id AS VehicleID,Vehicles.serial_number,Vehicles.vehicle_code,Vehicles.vehicle_brand,Vehicles.vehicle_description,VehicleWorkOrder.first_service_date,VehicleWorkOrder.next_service_date,VehicleWorkOrder.maintenance_frequency,VehicleWorkOrder.created_date,VehicleWorkOrder.urgency, " +
                                                           "VehicleCategory.id AS VehicleCategoryID,VehicleCategory.vehicle_type " +
                                                           "FROM VehicleWorkOrder " +
                                                           "INNER JOIN Vehicles ON VehicleWorkOrder.vehicle_id = Vehicles.id " +
                                                           "INNER JOIN StockLocation ON Vehicles.stock_location_id = StockLocation.id " +
                                                           "INNER JOIN VehicleCategory ON Vehicles.vehicle_category_id = VehicleCategory.id " +
                                                           "WHERE VehicleWorkOrder.is_completed = 'false' AND (VehicleWorkOrder.status <> 'Cancelled' AND VehicleWorkOrder.status <> 'Completed') " +
                                                           "ORDER BY VehicleWorkOrder.next_service_date ASC,VehicleWorkOrder.urgency ASC", conn);

                    using (SqlDataReader dr = cmdGetData.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                VehicleWorkOrder vwo = new VehicleWorkOrder();
                                vwo.VehicleWorkOrderID = Convert.ToInt32(dr["VehicleWorkOrderNo"]);
                                vwo.WorkOrderType = dr["work_order_type"].ToString();
                                vwo.Vehicle = new Vehicle() { ID = Convert.ToInt16(dr["VehicleID"]), VehicleCode = dr["vehicle_code"].ToString(), SerialNumber = dr["serial_number"].ToString(), VehicleBrand = dr["vehicle_brand"].ToString(), VehicleDescription = dr["vehicle_description"].ToString(), StockLocation = new StockLocation() { StockName = dr["stock_name"].ToString(), ID = Convert.ToInt16(dr["SLID"]) }, VehicleCategory = new VehicleCategory() { ID = Convert.ToInt16(dr["VehicleCategoryID"]), VehicleType = dr["vehicle_type"].ToString() } };
                                vwo.FirstServiceDate = Convert.ToDateTime(dr["first_service_date"]);
                                vwo.NextServiceDate = Convert.ToDateTime(dr["next_service_date"]);
                                vwo.MaintenanceFrequency = dr["maintenance_frequency"].ToString();
                                vwo.CreatedDate = Convert.ToDateTime(dr["created_date"]);
                                vwo.VehicleSearchString = Convert.ToInt16(dr["VehicleID"]) + " " + dr["serial_number"].ToString() + " " + dr["vehicle_brand"].ToString() + " " + dr["vehicle_description"].ToString();
                                vwo.Urgency = Convert.ToInt16(dr["urgency"]);
                                vwo.UrgencyStr = Convert.ToInt16(dr["urgency"]) == 1 ? "Urgent" : "Normal";
                                vehicleWorkOrderList.Add(vwo);


                            }
                        }
                    }
                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return vehicleWorkOrderList;
        }

        public static ObservableCollection<VehiclePartDescription> GetVehicleParts(int selectedVehicle)
        {
            ObservableCollection<VehiclePartDescription> vehicleWorkOrderList = new ObservableCollection<VehiclePartDescription>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                conn.Open();
                try
                {
                    SqlCommand cmdGetData = new SqlCommand("SELECT VehicleWorkOrder.id, " +
                                                           "Vehicles.id As VehicleID,Vehicles.vehicle_code,Vehicles.serial_number,Vehicles.vehicle_brand,Vehicles.vehicle_description, " +
                                                           "VehicleRepairDescription.vehicle_work_order_id, " +
                                                           "VehiclePartDescription.sequence_id,VehiclePartDescription.code,VehiclePartDescription.description " +
                                                           "FROM VehicleWorkOrder " +
                                                           "INNER JOIN Vehicles ON VehicleWorkOrder.vehicle_id = Vehicles.id " +
                                                           "INNER JOIN VehicleRepairDescription ON VehicleWorkOrder.id = VehicleRepairDescription.vehicle_work_order_id " +
                                                           "INNER JOIN VehiclePartDescription ON VehicleRepairDescription.id = VehiclePartDescription.vehicle_repair_id " +
                                                           "WHERE Vehicles.id=@VehicleID AND VehicleWorkOrder.is_completed = 'false'", conn);

                    cmdGetData.Parameters.AddWithValue("@VehicleID", selectedVehicle);
                    using (SqlDataReader dr = cmdGetData.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                VehiclePartDescription vpd = new VehiclePartDescription();
                                vpd.ID = Convert.ToInt32(dr["id"]);
                                vpd.Vehicle = new Vehicle() { ID = Convert.ToInt16(dr["VehicleID"]), VehicleCode = dr["vehicle_code"].ToString(), SerialNumber = dr["serial_number"].ToString(), VehicleBrand = dr["vehicle_brand"].ToString(), VehicleDescription = dr["vehicle_description"].ToString() };
                                vpd.VehicleParts = new VehicleParts() { StrSequenceNumber = "P" + Convert.ToInt16(dr["sequence_id"]), SequenceNumber = Convert.ToInt16(dr["sequence_id"]), PartCode = dr["code"].ToString(), PartDescription = dr["description"].ToString() };
                                vpd.VehicleSearchString = Convert.ToInt16(dr["VehicleID"]) + " " + dr["vehicle_code"].ToString() + " " + dr["serial_number"].ToString() + " " + dr["vehicle_brand"].ToString() + " " + dr["vehicle_description"].ToString();
                                vehicleWorkOrderList.Add(vpd);
                            }
                        }
                    }
                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return vehicleWorkOrderList;
        }

        public static VehicleWorkOrder GetVehicleWorkOrderByID(Int32 vwoid)
        {
            VehicleWorkOrder vwo = new VehicleWorkOrder();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                conn.Open();
                try
                {
                    SqlCommand cmdGetData = new SqlCommand("SELECT VehicleWorkOrder.id AS VehicleWorkOrderNo,VehicleWorkOrder.work_order_type,StockLocation.stock_name,Vehicles.id AS VehicleID,Vehicles.serial_number,Vehicles.vehicle_brand,Vehicles.vehicle_description,VehicleWorkOrder.first_service_date,VehicleWorkOrder.next_service_date,VehicleWorkOrder.maintenance_frequency,VehicleWorkOrder.created_date,VehicleWorkOrder.odometer_reading, " +
                                                           "VehicleCategory.id AS VehicleCategoryID,VehicleCategory.vehicle_type, " +
                                                           "Users.FirstName,Users.LastName " +
                                                           "FROM VehicleWorkOrder " +
                                                           "INNER JOIN Vehicles ON VehicleWorkOrder.vehicle_id = Vehicles.id " +
                                                           "INNER JOIN StockLocation ON Vehicles.stock_location_id = StockLocation.id " +
                                                           "INNER JOIN VehicleCategory ON Vehicles.vehicle_category_id = VehicleCategory.id " +
                                                           "INNER JOIN Users ON VehicleWorkOrder.user_id = Users.ID " +
                                                           "WHERE VehicleWorkOrder.id=@VehicleWorkOrderID AND VehicleWorkOrder.is_completed = 'false' AND (VehicleWorkOrder.status <> 'Cancelled' AND VehicleWorkOrder.status <> 'Completed') " +
                                                           "ORDER BY VehicleWorkOrder.next_service_date ASC", conn);

                    cmdGetData.Parameters.AddWithValue("@VehicleWorkOrderID", vwoid);
                    using (SqlDataReader dr = cmdGetData.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {

                                vwo.User = new User() { FullName = dr["FirstName"].ToString() + " " + dr["LastName"].ToString() };
                                vwo.OdometerReading = Convert.ToInt64(dr["odometer_reading"]);
                                vwo.VehicleWorkOrderID = Convert.ToInt32(dr["VehicleWorkOrderNo"]);
                                vwo.WorkOrderType = dr["work_order_type"].ToString();
                                vwo.Vehicle = new Vehicle() { ID = Convert.ToInt16(dr["VehicleID"]), SerialNumber = dr["serial_number"].ToString(), VehicleBrand = dr["vehicle_brand"].ToString(), VehicleDescription = dr["vehicle_description"].ToString(), StockLocation = new StockLocation() { StockName = dr["stock_name"].ToString() }, VehicleCategory = new VehicleCategory() { ID = Convert.ToInt16(dr["VehicleCategoryID"]), VehicleType = dr["vehicle_type"].ToString() } };
                                vwo.FirstServiceDate = Convert.ToDateTime(dr["first_service_date"]);
                                vwo.NextServiceDate = Convert.ToDateTime(dr["next_service_date"]);
                                vwo.MaintenanceFrequency = dr["maintenance_frequency"].ToString();
                                vwo.CreatedDate = Convert.ToDateTime(dr["created_date"]);
                                vwo.VehicleSearchString = Convert.ToInt16(dr["VehicleID"]) + " " + dr["serial_number"].ToString() + " " + dr["vehicle_brand"].ToString() + " " + dr["vehicle_description"].ToString();

                            }
                        }
                    }
                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return vwo;
        }

        public static ObservableCollection<VehicleWorkDescription> GetVehicleWorkDescription(Int32 vwoid)
        {
            ObservableCollection<VehicleWorkDescription> VehicleWorkDescription = new ObservableCollection<VehicleWorkDescription>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                conn.Open();
                try
                {
                    SqlCommand cmdGetData = new SqlCommand("SELECT VehicleWorkDescription.id,VehicleWorkDescription.vehicle_maintenance_info_id,VehicleWorkDescription.vehicle_work_order_id,VehicleWorkDescription.vehicle_maintenance_sequence_id,VehicleWorkDescription.description,VehicleWorkDescription.is_completed,VehicleWorkDescription.is_active,VehicleWorkDescription.comment, " +
                                                           "VehicleMaintenanceInfo.code " +
                                                           "FROM VehicleWorkDescription " +
                                                           "INNER JOIN VehicleMaintenanceInfo ON VehicleWorkDescription.vehicle_maintenance_info_id = VehicleMaintenanceInfo.id " +
                                                           "WHERE vehicle_work_order_id =@VehicleWorkOrderID", conn);

                    cmdGetData.Parameters.AddWithValue("@VehicleWorkOrderID", vwoid);
                    using (SqlDataReader dr = cmdGetData.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                VehicleWorkDescription vwd = new VehicleWorkDescription();
                                vwd.ID = Convert.ToInt16(dr["id"]);
                                vwd.VehicleMaintenanceInfo = new VehicleMaintenanceInfo() { ID = Convert.ToInt16(dr["vehicle_maintenance_info_id"]), Code = dr["code"].ToString() };
                                vwd.VehicleMaintenanceSequenceID = Convert.ToInt16(dr["vehicle_maintenance_sequence_id"]);
                                vwd.Description = dr["description"].ToString();
                                vwd.IsCompleted = Convert.ToBoolean(dr["is_completed"]);
                                vwd.IsActive = Convert.ToBoolean(dr["is_active"]);
                                vwd.Comment = dr["comment"].ToString();
                                VehicleWorkDescription.Add(vwd);
                            }
                        }
                    }
                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return VehicleWorkDescription;
        }

        public static int UpdateVehicleWorkOrder(VehicleWorkOrder vwo, ObservableCollection<VehicleWorkDescription> vwd, string userName)
        {
            int result = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdUpdateVehicleWorkOrder = new SqlCommand("UPDATE VehicleWorkOrder SET maintenance_frequency = @MaintenanceFreq,first_service_date=@FirstServiceDate,next_service_date=@NextServiceDate,created_date=@CreatedDate,created_by=@CreatedBy " +
                                                                      "WHERE id = @ID", conn);

                SqlCommand cmdInsertVehicleRepairDescription = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM VehicleRepairDescription " +
                                                                              "WHERE vehicle_work_description_id = @VehicleWorkDescriptionID AND vehicle_work_order_id = @VehicleWorkOrderID AND sequence_id = @SequenceID) " +
                                                                              "INSERT INTO VehicleRepairDescription VALUES(@VehicleWorkDescriptionID,@VehicleWorkOrderID,@SequenceID,@Description,@PartsOrded,@IsCompleted,@IsActive) " +
                                                                              "ELSE " +
                                                                              "UPDATE VehicleRepairDescription SET description=@Description " +
                                                                              "WHERE vehicle_work_description_id = @VehicleWorkDescriptionID AND vehicle_work_order_id = @VehicleWorkOrderID AND sequence_id = @SequenceID", conn);

                SqlCommand cmdInsertVehiclePartDescription = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM VehiclePartDescription " +
                                                                            "WHERE vehicle_repair_id = @VehicleRepairID AND sequence_id = @SequenceID) " +
                                                                            "INSERT INTO VehiclePartDescription VALUES(@VehicleRepairID,@SequenceID,@Code,@Description,@IsActive,@Completed) " +
                                                                            "ELSE " +
                                                                            "UPDATE VehiclePartDescription SET code=@Code " +
                                                                            "WHERE vehicle_repair_id = @VehicleRepairID AND sequence_id = @SequenceID", conn);

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {
                    cmdUpdateVehicleWorkOrder.Transaction = trans;
                    cmdUpdateVehicleWorkOrder.Parameters.AddWithValue("@ID", vwo.VehicleWorkOrderID);
                    cmdUpdateVehicleWorkOrder.Parameters.AddWithValue("@MaintenanceFreq", vwo.MaintenanceFrequency);
                    cmdUpdateVehicleWorkOrder.Parameters.AddWithValue("@FirstServiceDate", vwo.FirstServiceDate);
                    cmdUpdateVehicleWorkOrder.Parameters.AddWithValue("@NextServiceDate", vwo.NextServiceDate);
                    cmdUpdateVehicleWorkOrder.Parameters.AddWithValue("@CreatedDate", DateTime.Now);
                    cmdUpdateVehicleWorkOrder.Parameters.AddWithValue("@CreatedBy", userName);
                    result = cmdUpdateVehicleWorkOrder.ExecuteNonQuery();

                    //TODO
                    //foreach (var item in vwd)
                    //{                                        

                    //    foreach (var items in item.VehicleRepairDescription)
                    //    {
                    //        cmdInsertVehicleRepairDescription.Transaction = trans;
                    //        cmdInsertVehicleRepairDescription.Parameters.AddWithValue("@VehicleWorkDescriptionID", items.VehicleWorkDescriptionID);
                    //        cmdInsertVehicleRepairDescription.Parameters.AddWithValue("@VehicleWorkOrderID", vwo.VehicleWorkOrderID);
                    //        cmdInsertVehicleRepairDescription.Parameters.AddWithValue("@SequenceID", items.SequenceNumber);
                    //        cmdInsertVehicleRepairDescription.Parameters.AddWithValue("@Description", items.RepairDescription);
                    //        cmdInsertVehicleRepairDescription.Parameters.AddWithValue("@PartsOrded", items.PartsOrdered);
                    //        cmdInsertVehicleRepairDescription.Parameters.AddWithValue("@IsCompleted", items.IsCompleted);
                    //        cmdInsertVehicleRepairDescription.Parameters.AddWithValue("@IsActive", items.IsActive);
                    //        result = cmdInsertVehicleRepairDescription.ExecuteNonQuery();
                    //        cmdInsertVehicleRepairDescription.Parameters.Clear();        

                    //        foreach (var itemz in items.Vehicleparts)
                    //        {
                    //            cmdInsertVehiclePartDescription.Transaction = trans;                               
                    //            cmdInsertVehiclePartDescription.Parameters.AddWithValue("@VehicleRepairID", items.ID);
                    //            cmdInsertVehiclePartDescription.Parameters.AddWithValue("@SequenceID", itemz.SequenceNumber);
                    //            cmdInsertVehiclePartDescription.Parameters.AddWithValue("@Code", itemz.PartCode);
                    //            cmdInsertVehiclePartDescription.Parameters.AddWithValue("@Description", itemz.PartDescription ?? (object)DBNull.Value);
                    //            cmdInsertVehiclePartDescription.Parameters.AddWithValue("@IsActive", itemz.Active);
                    //            cmdInsertVehiclePartDescription.Parameters.AddWithValue("@Completed", false);
                    //            result = cmdInsertVehiclePartDescription.ExecuteNonQuery();
                    //            cmdInsertVehiclePartDescription.Parameters.Clear();
                    //        }

                    //    }
                    //}

                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("Error: Updating SalesOrder Required Date" + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return result;
        }

        public static int UpdateVehicleRepairWorkOrder(VehicleWorkOrder vwo, ObservableCollection<VehicleWorkDescription> vwd, string userName)
        {
            int result = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdUpdateVehicleWorkOrder = new SqlCommand("UPDATE VehicleWorkOrder SET maintenance_frequency = @MaintenanceFreq,first_service_date=@FirstServiceDate,next_service_date=@NextServiceDate,created_date=@CreatedDate,created_by=@CreatedBy " +
                                                                      "WHERE id = @ID", conn);

                SqlCommand cmdDeleteVehicleWorkDescription = new SqlCommand("DELETE FROM VehicleRepairDescription " +
                                                                            "WHERE vehicle_work_order_id=@VehicleWorkOrderID", conn);

                SqlCommand cmdInsertVehicleRepairDescription = new SqlCommand("INSERT INTO VehicleRepairDescription(vehicle_work_order_id,sequence_id,description,parts_orded,is_completed,is_active) " +
                                                                            "VALUES (@VehicleWorkOrderID,@SequenceID,@Description,@PartsOrded,@IsCompleted,@IsActive)", conn);

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {
                    cmdUpdateVehicleWorkOrder.Transaction = trans;
                    cmdUpdateVehicleWorkOrder.Parameters.AddWithValue("@ID", vwo.VehicleWorkOrderID);
                    cmdUpdateVehicleWorkOrder.Parameters.AddWithValue("@MaintenanceFreq", vwo.MaintenanceFrequency);
                    cmdUpdateVehicleWorkOrder.Parameters.AddWithValue("@FirstServiceDate", vwo.FirstServiceDate);
                    cmdUpdateVehicleWorkOrder.Parameters.AddWithValue("@NextServiceDate", vwo.NextServiceDate);
                    cmdUpdateVehicleWorkOrder.Parameters.AddWithValue("@CreatedDate", DateTime.Now);
                    cmdUpdateVehicleWorkOrder.Parameters.AddWithValue("@CreatedBy", userName);
                    result = cmdUpdateVehicleWorkOrder.ExecuteNonQuery();

                    foreach (var item in vwd)
                    {
                        cmdDeleteVehicleWorkDescription.Transaction = trans;
                        cmdDeleteVehicleWorkDescription.Parameters.AddWithValue("@VehicleWorkOrderID", vwo.VehicleWorkOrderID);
                        int res = cmdDeleteVehicleWorkDescription.ExecuteNonQuery();
                        cmdDeleteVehicleWorkDescription.Parameters.Clear();
                    }

                    foreach (var item in vwd)
                    {
                        cmdInsertVehicleRepairDescription.Transaction = trans;
                        cmdInsertVehicleRepairDescription.Parameters.AddWithValue("@VehicleWorkOrderID", vwo.VehicleWorkOrderID);
                        cmdInsertVehicleRepairDescription.Parameters.AddWithValue("@SequenceID", item.VehicleMaintenanceInfo.Code);
                        cmdInsertVehicleRepairDescription.Parameters.AddWithValue("@Description", item.Description);
                        cmdInsertVehicleRepairDescription.Parameters.AddWithValue("@PartsOrded", item.PartsOrdered);
                        cmdInsertVehicleRepairDescription.Parameters.AddWithValue("@IsCompleted", false);
                        cmdInsertVehicleRepairDescription.Parameters.AddWithValue("@IsActive", item.IsActive);
                        result = cmdInsertVehicleRepairDescription.ExecuteNonQuery();
                        cmdInsertVehicleRepairDescription.Parameters.Clear();
                    }

                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("Error: Updating SalesOrder Required Date" + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return result;
        }

        public static int DeleteVehicleWorkOrder(VehicleWorkOrder vwo, string userName)
        {
            int result = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdUpdateVehicleWorkOrder = new SqlCommand("UPDATE VehicleWorkOrder SET status = @Status " +
                                                                      "WHERE id = @ID", conn);

                //SqlCommand cmdDeleteVehicleWorkDescription = new SqlCommand("DELETE FROM VehicleWorkDescription " +
                //                                                            "WHERE vehicle_work_order_id=@VehicleWorkOrderID", conn);

                //SqlCommand cmdInsertVehicleWorkDescription = new SqlCommand("INSERT INTO VehicleWorkDescription(vehicle_maintenance_info_id,vehicle_work_order_id,vehicle_maintenance_sequence_id,description,is_completed,is_active,comment) " +
                //                                                            "VALUES (@VehicleMaintenanceInfoID,@VehicleWorkOrderID,@VehicleMaintenanceSequenceID,@Description,@IsCompleted,@IsActive,@Comment)", conn);

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {
                    cmdUpdateVehicleWorkOrder.Transaction = trans;
                    cmdUpdateVehicleWorkOrder.Parameters.AddWithValue("@ID", vwo.VehicleWorkOrderID);
                    cmdUpdateVehicleWorkOrder.Parameters.AddWithValue("@Status", VehicleWorkOrderEnum.Cancelled.ToString());
                    result = cmdUpdateVehicleWorkOrder.ExecuteNonQuery();

                    //foreach (var item in vwo.VehicleMaintenanceInfo)
                    //{
                    //    cmdDeleteVehicleWorkDescription.Transaction = trans;
                    //    cmdDeleteVehicleWorkDescription.Parameters.AddWithValue("@VehicleWorkOrderID", vwo.VehicleWorkOrderID);
                    //    int res = cmdDeleteVehicleWorkDescription.ExecuteNonQuery();
                    //    cmdDeleteVehicleWorkDescription.Parameters.Clear();
                    //}

                    //foreach (var item in vwo.VehicleMaintenanceInfo)
                    //{
                    //    cmdInsertVehicleWorkDescription.Transaction = trans;
                    //    cmdInsertVehicleWorkDescription.Parameters.AddWithValue("@VehicleMaintenanceInfoID", item.ID);
                    //    cmdInsertVehicleWorkDescription.Parameters.AddWithValue("@VehicleWorkOrderID", vwo.VehicleWorkOrderID);
                    //    cmdInsertVehicleWorkDescription.Parameters.AddWithValue("@VehicleMaintenanceSequenceID", item.VehicleMaintenanceSequence.ID);
                    //    cmdInsertVehicleWorkDescription.Parameters.AddWithValue("@Description", item.Description);
                    //    cmdInsertVehicleWorkDescription.Parameters.AddWithValue("@IsCompleted", false);
                    //    cmdInsertVehicleWorkDescription.Parameters.AddWithValue("@IsActive", item.Active);
                    //    cmdInsertVehicleWorkDescription.Parameters.AddWithValue("@Comment", string.Empty);
                    //    result = cmdInsertVehicleWorkDescription.ExecuteNonQuery();
                    //    cmdInsertVehicleWorkDescription.Parameters.Clear();
                    //}

                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("Error: Updating SalesOrder Required Date" + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return result;
        }

        public static ObservableCollection<VehicleWorkOrder> GetVehicleWorkOrdersByDate(DateTime searchDate, string state)
        {
            string nDate = searchDate.ToString("yyyy-MM-dd");
            string currDate = DateTime.Now.ToString("yyyy-MM-dd");
            string op = "=";

            if (nDate == currDate)
            {
                op = "<=";
            }

            ObservableCollection<VehicleWorkOrder> vehicleWorkOrderList = new ObservableCollection<VehicleWorkOrder>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                conn.Open();
                try
                {
                    SqlCommand cmdGetData = new SqlCommand("SELECT VehicleWorkOrder.id AS VehicleWorkOrderNo,VehicleWorkOrder.work_order_type,StockLocation.stock_name,Vehicles.id AS VehicleID,Vehicles.serial_number,vehicles.vehicle_code,Vehicles.vehicle_brand,Vehicles.vehicle_description,VehicleWorkOrder.first_service_date,VehicleWorkOrder.next_service_date,VehicleWorkOrder.created_date,VehicleWorkOrder.last_odometer_reading,VehicleWorkOrder.odometer_reading,VehicleWorkOrder.urgency,VehicleWorkOrder.is_viewed, " +
                                                           "VehicleCategory.id AS VehicleCategoryID,VehicleCategory.vehicle_type, " +
                                                           "Users.FirstName,Users.LastName " +
                                                           "FROM VehicleWorkOrder " +
                                                           "INNER JOIN Vehicles ON VehicleWorkOrder.vehicle_id = Vehicles.id " +
                                                           "INNER JOIN StockLocation ON Vehicles.stock_location_id = StockLocation.id " +
                                                           "INNER JOIN VehicleCategory ON Vehicles.vehicle_category_id = VehicleCategory.id " +
                                                           "LEFT JOIN Users ON VehicleWorkOrder.user_id = Users.ID " +
                                                           "WHERE VehicleWorkOrder.next_service_date" + op + "@DateSearch AND VehicleWorkOrder.is_completed = 'false' AND (VehicleWorkOrder.status <> 'Cancelled' AND VehicleWorkOrder.status <> 'Completed') AND StockLocation.stock_name = @State " +
                                                           "ORDER BY VehicleWorkOrder.next_service_date ASC,VehicleWorkOrder.urgency", conn);

                    cmdGetData.Parameters.AddWithValue("@DateSearch", nDate);
                    cmdGetData.Parameters.AddWithValue("@State", state);
                    using (SqlDataReader dr = cmdGetData.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                VehicleWorkOrder vwo = new VehicleWorkOrder();
                                vwo.VehicleWorkOrderID = Convert.ToInt32(dr["VehicleWorkOrderNo"]);
                                vwo.User = new User() { FullName = dr["FirstName"].ToString() + " " + dr["LastName"].ToString() };
                                vwo.LastOdometerReading = Convert.ToInt64(dr["last_odometer_reading"]);
                                vwo.OdometerReading = Convert.ToInt64(dr["odometer_reading"]);                                
                                vwo.WorkOrderType = dr["work_order_type"].ToString();
                                vwo.Vehicle = new Vehicle() { ID = Convert.ToInt16(dr["VehicleID"]), VehicleCode = dr["vehicle_code"].ToString(), SerialNumber = dr["serial_number"].ToString(), VehicleBrand = dr["vehicle_brand"].ToString(), VehicleDescription = dr["vehicle_description"].ToString(), StockLocation = new StockLocation() { StockName = dr["stock_name"].ToString() }, VehicleCategory = new VehicleCategory() { ID = Convert.ToInt16(dr["VehicleCategoryID"]), VehicleType = dr["vehicle_type"].ToString() } };
                                vwo.FirstServiceDate = Convert.ToDateTime(dr["first_service_date"]);
                                vwo.NextServiceDate = Convert.ToDateTime(dr["next_service_date"]);
                                vwo.CreatedDate = Convert.ToDateTime(dr["created_date"]);
                                vwo.VehicleSearchString = Convert.ToInt16(dr["VehicleID"]) + " " + dr["serial_number"].ToString() + " " + dr["vehicle_brand"].ToString() + " " + dr["vehicle_description"].ToString();
                                vwo.Urgency = Convert.ToInt16(dr["urgency"]);
                                vwo.UrgencyStr = Convert.ToInt16(dr["urgency"]) == 1 ? "Urgent" : "Normal";
                                vwo.IsViewed = Convert.ToBoolean(dr["is_viewed"]);
                                vehicleWorkOrderList.Add(vwo);


                            }
                        }
                    }
                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return vehicleWorkOrderList;
        }

        public static ObservableCollection<VehicleWorkDescription> GetVehicleWorkDescriptionByID(Int32 Id)
        {
            ObservableCollection<VehicleWorkDescription> vehicleWorkDescription = new ObservableCollection<VehicleWorkDescription>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                conn.Open();
                try
                {
                    SqlCommand cmdGetData = new SqlCommand("SELECT VehicleWorkDescription.id,VehicleWorkDescription.vehicle_repair_work_order_id,VehicleWorkDescription.description,VehicleMaintenanceInfo.code,VehicleWorkDescription.is_completed,VehicleWorkDescription.is_active,VehicleWorkDescription.vehicle_maintenance_info_id,VehicleWorkDescription.vehicle_maintenance_sequence_id " +
                                                           "FROM VehicleWorkDescription " +
                                                           "INNER JOIN VehicleMaintenanceInfo ON VehicleWorkDescription.vehicle_maintenance_info_id = VehicleMaintenanceInfo.id " +
                                                           "WHERE VehicleWorkDescription.vehicle_work_order_id=@ID AND VehicleWorkDescription.is_active = 'True' ", conn);

                    cmdGetData.Parameters.AddWithValue("@ID", Id);
                    using (SqlDataReader dr = cmdGetData.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                VehicleWorkDescription vwo = new VehicleWorkDescription();
                                vwo.ID = Convert.ToInt32(dr["id"]);
                                vwo.Description = dr["description"].ToString();
                                vwo.IsCompleted = Convert.ToBoolean(dr["is_completed"]);
                                vwo.VehicleMaintenanceInfo = new VehicleMaintenanceInfo() { ID = Convert.ToInt16(dr["vehicle_maintenance_info_id"]), Code = dr["code"].ToString() };
                                vwo.VehicleRepairWorkOrderID = Convert.ToInt32(dr["vehicle_repair_work_order_id"]);
                                vwo.ProblemBtnEnabled = Convert.ToInt32(dr["vehicle_repair_work_order_id"]) > 0 ? false : true;
                                vwo.ItemRepair = Convert.ToInt32(dr["vehicle_repair_work_order_id"]) > 0 ? true : false;
                                vwo.ItemRepairEnabled = Convert.ToInt32(dr["vehicle_repair_work_order_id"]) > 0 ? false : true;
                                vwo.ItemDoneEnabled = Convert.ToInt32(dr["vehicle_repair_work_order_id"]) > 0 ? false : true;
                                vwo.NormalVisibility = "Visible";
                                vwo.RepairVisibility = "Collapsed";
                                vwo.IsActive = Convert.ToBoolean(dr["is_active"]);
                                vwo.VehicleMaintenanceSequenceID = Convert.ToInt16(dr["vehicle_maintenance_sequence_id"]);
                                vehicleWorkDescription.Add(vwo);
                            }
                        }
                    }
                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return vehicleWorkDescription;

        }

        public static ObservableCollection<VehicleRepairDescription> GetVehicleRepairDescriptionByID(ObservableCollection<VehicleWorkDescription> vwdList)
        {
            ObservableCollection<VehicleRepairDescription> vehicleWorkDescription = new ObservableCollection<VehicleRepairDescription>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                conn.Open();
                try
                {
                    SqlCommand cmdGetData = new SqlCommand("SELECT * FROM VehicleRepairDescription " +
                                                           "WHERE vehicle_work_description_id=@ID AND is_active = 'True' ", conn);

                    foreach (var item in vwdList)
                    {
                        cmdGetData.Parameters.AddWithValue("@ID", item.ID);
                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    VehicleRepairDescription vwo = new VehicleRepairDescription();
                                    vwo.ID = Convert.ToInt32(dr["id"]);
                                    vwo.VehicleWorkDescriptionID = Convert.ToInt32(dr["vehicle_work_description_id"]);
                                    vwo.VehicleWorkOrderID = Convert.ToInt32(dr["vehicle_work_order_id"]);
                                    vwo.SequenceNumber = Convert.ToInt16(dr["sequence_id"]);
                                    vwo.RepairDescription = dr["description"].ToString();
                                    vwo.PartsOrdered = Convert.ToBoolean(dr["parts_orded"]);
                                    vwo.IsCompleted = Convert.ToBoolean(dr["is_completed"]);
                                    vwo.IsActive = Convert.ToBoolean(dr["is_active"]);
                                    vehicleWorkDescription.Add(vwo);
                                }
                            }
                        }
                        cmdGetData.Parameters.Clear();
                    }
                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return vehicleWorkDescription;

        }

        public static ObservableCollection<VehicleRepairDescription> GetVehicleRepairDescriptionByID2(Int32 Id)
        {
            ObservableCollection<VehicleRepairDescription> vehicleWorkDescription = new ObservableCollection<VehicleRepairDescription>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                conn.Open();
                try
                {
                    SqlCommand cmdGetData = new SqlCommand("SELECT * FROM VehicleRepairDescription " +
                                                           "WHERE vehicle_work_order_id=@ID AND is_active = 'True' ", conn);


                    cmdGetData.Parameters.AddWithValue("@ID", Id);
                    using (SqlDataReader dr = cmdGetData.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                VehicleRepairDescription vwo = new VehicleRepairDescription();
                                vwo.ID = Convert.ToInt32(dr["id"]);
                                vwo.VehicleWorkDescriptionID = Convert.ToInt32(dr["vehicle_work_description_id"]);
                                vwo.VehicleWorkOrderID = Convert.ToInt32(dr["vehicle_work_order_id"]);
                                vwo.SequenceNumber = Convert.ToInt16(dr["sequence_id"]);
                                vwo.RepairDescription = dr["description"].ToString();
                                vwo.PartsOrdered = Convert.ToBoolean(dr["parts_orded"]);
                                vwo.IsCompleted = Convert.ToBoolean(dr["is_completed"]);
                                vwo.IsActive = Convert.ToBoolean(dr["is_active"]);
                                vehicleWorkDescription.Add(vwo);
                            }
                        }
                    }

                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return vehicleWorkDescription;

        }

        public static ObservableCollection<MachineRepairDescription> GetMachineRepairDescriptionByID2(Int32 Id)
        {
            ObservableCollection<MachineRepairDescription> machineWorkDescription = new ObservableCollection<MachineRepairDescription>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                conn.Open();
                try
                {
                    SqlCommand cmdGetData = new SqlCommand("SELECT * FROM MachineRepairDescription " +
                                                           "WHERE machine_work_order_id=@ID AND is_active = 'True' ", conn);


                    cmdGetData.Parameters.AddWithValue("@ID", Id);
                    using (SqlDataReader dr = cmdGetData.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                MachineRepairDescription vwo = new MachineRepairDescription();
                                vwo.ID = Convert.ToInt32(dr["id"]);
                                vwo.MachineWorkDescriptionID = Convert.ToInt32(dr["machine_work_description_id"]);
                                vwo.MachineWorkOrderID = Convert.ToInt32(dr["machine_work_order_id"]);
                                vwo.SequenceNumber = Convert.ToInt16(dr["sequence_id"]);
                                vwo.RepairDescription = dr["description"].ToString();
                                vwo.PartsOrdered = Convert.ToBoolean(dr["parts_orded"]);
                                vwo.IsCompleted = Convert.ToBoolean(dr["is_completed"]);
                                vwo.IsActive = Convert.ToBoolean(dr["is_active"]);
                                machineWorkDescription.Add(vwo);
                            }
                        }
                    }

                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return machineWorkDescription;

        }

        public static ObservableCollection<VehicleParts> GetVehiclePartsDescriptionByID(ObservableCollection<VehicleRepairDescription> vrdList)
        {
            ObservableCollection<VehicleParts> vehicleWorkDescription = new ObservableCollection<VehicleParts>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                conn.Open();
                try
                {
                    SqlCommand cmdGetData = new SqlCommand("SELECT * FROM VehiclePartDescription " +
                                                           "WHERE vehicle_repair_id=@ID AND active = 'True' ", conn);

                    foreach (var item in vrdList)
                    {
                        cmdGetData.Parameters.AddWithValue("@ID", item.ID);
                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    VehicleParts vp = new VehicleParts();
                                    vp.PartID = Convert.ToInt32(dr["id"]);
                                    vp.VehicleRepairID = Convert.ToInt32(dr["vehicle_repair_id"]);
                                    vp.SequenceNumber = Convert.ToInt16(dr["sequence_id"]);
                                    vp.PartCode = dr["code"].ToString();
                                    vp.PartDescription = dr["description"].ToString();
                                    vp.Active = Convert.ToBoolean(dr["active"]);
                                    vehicleWorkDescription.Add(vp);
                                }
                            }
                        }
                        cmdGetData.Parameters.Clear();
                    }
                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return vehicleWorkDescription;

        }

        public static ObservableCollection<VehicleWorkDescription> GetVehicleWorkDescriptionByIDForMaintenance(Int32 Id)
        {
            ObservableCollection<VehicleWorkDescription> vehicleWorkDescription = new ObservableCollection<VehicleWorkDescription>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                conn.Open();
                try
                {
                    SqlCommand cmdGetData = new SqlCommand("SELECT VehicleWorkDescription.id,VehicleWorkDescription.vehicle_repair_work_order_id,VehicleWorkDescription.description,VehicleMaintenanceInfo.code,VehicleWorkDescription.is_completed,VehicleWorkDescription.is_active,VehicleWorkDescription.vehicle_maintenance_info_id,VehicleWorkDescription.vehicle_maintenance_sequence_id, " +
                                                           "VehicleRepairDescription.id AS VRDID,VehicleRepairDescription.vehicle_work_description_id,VehicleRepairDescription.vehicle_work_order_id,VehicleRepairDescription.sequence_id AS RSeqID,VehicleRepairDescription.description AS RDes,VehicleRepairDescription.parts_orded,VehicleRepairDescription.is_completed,VehicleRepairDescription.is_active, " +
                                                           "VehiclePartDescription.vehicle_repair_id,VehiclePartDescription.sequence_id AS PSeq,VehiclePartDescription.code AS PCode,VehiclePartDescription.description,VehiclePartDescription.active,VehiclePartDescription.completed " +
                                                           "FROM VehicleWorkDescription " +
                                                           "INNER JOIN VehicleMaintenanceInfo ON VehicleWorkDescription.vehicle_maintenance_info_id = VehicleMaintenanceInfo.id " +
                                                           "LEFT JOIN VehicleRepairDescription ON VehicleWorkDescription.id = VehicleRepairDescription.vehicle_work_description_id " +
                                                           "LEFT JOIN VehiclePartDescription ON VehicleRepairDescription.id = VehiclePartDescription.vehicle_repair_id " +
                                                           "WHERE VehicleWorkDescription.vehicle_work_order_id=@ID AND VehicleWorkDescription.is_active = 'True' ", conn);

                    cmdGetData.Parameters.AddWithValue("@ID", Id);
                    using (SqlDataReader dr = cmdGetData.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                if (vehicleWorkDescription.Count == 0)
                                {
                                    VehicleWorkDescription vwo = new VehicleWorkDescription();
                                    vwo.ID = Convert.ToInt32(dr["id"]);
                                    vwo.Description = dr["description"].ToString();
                                    vwo.IsCompleted = Convert.ToBoolean(dr["is_completed"]);
                                    vwo.VehicleMaintenanceInfo = new VehicleMaintenanceInfo() { ID = Convert.ToInt16(dr["vehicle_maintenance_info_id"]), Code = dr["code"].ToString() };
                                    vwo.VehicleRepairWorkOrderID = Convert.ToInt32(dr["vehicle_repair_work_order_id"]);
                                    vwo.ProblemBtnEnabled = Convert.ToInt32(dr["vehicle_repair_work_order_id"]) > 0 ? false : true;
                                    vwo.ItemRepair = Convert.ToInt32(dr["vehicle_repair_work_order_id"]) > 0 ? true : false;
                                    vwo.ItemRepairEnabled = Convert.ToInt32(dr["vehicle_repair_work_order_id"]) > 0 ? false : true;
                                    vwo.ItemDoneEnabled = Convert.ToInt32(dr["vehicle_repair_work_order_id"]) > 0 ? false : true;
                                    vwo.NormalVisibility = "Visible";
                                    vwo.RepairVisibility = "Collapsed";
                                    vwo.IsActive = Convert.ToBoolean(dr["is_active"]);
                                    vwo.VehicleMaintenanceSequenceID = Convert.ToInt16(dr["vehicle_maintenance_sequence_id"]);
                                    vwo.VehicleRepairDescription = new ObservableCollection<VehicleRepairDescription>()
                                    {
                                        new VehicleRepairDescription()
                                        {
                                            ID =  Convert.ToInt32(dr["VRDID"]),
                                            VehicleWorkDescriptionID = Convert.ToInt32(dr["vehicle_work_description_id"]),
                                            SequenceNumber = Convert.ToInt16(dr["RSeqID"]),
                                            RepairDescription = dr["RDes"].ToString(),
                                            Vehicleparts = new ObservableCollection<VehicleParts>()
                                            {                                          
                                                new VehicleParts()
                                                {
                                                    VehicleRepairID = CheckNull<int>(dr["vehicle_repair_id"]),
                                                    SequenceNumber = CheckNull<int>(dr["PSeq"]),
                                                    PartCode = dr["PCode"].ToString(),
                                                }
                                            }
                                        }
                                    };

                                    vehicleWorkDescription.Add(vwo);
                                }
                                else
                                {
                                    for (int x = 0; x < vehicleWorkDescription.Count; x++)
                                    {
                                        if (Convert.ToInt32(dr["id"]) == vehicleWorkDescription[x].ID)
                                        {
                                            for (int z = 0; z < vehicleWorkDescription[x].VehicleRepairDescription.Count; z++)
                                            {
                                                if ((Convert.ToInt32(dr["vehicle_work_description_id"]) == vehicleWorkDescription[x].VehicleRepairDescription[z].VehicleWorkDescriptionID) && (Convert.ToInt16(dr["RSeqID"]) == vehicleWorkDescription[x].VehicleRepairDescription[z].SequenceNumber)) //Repair
                                                {
                                                    for (int i = 0; i < vehicleWorkDescription[x].VehicleRepairDescription[z].Vehicleparts.Count; i++)
                                                    {
                                                        if (Convert.ToInt32(dr["vehicle_repair_id"]) == vehicleWorkDescription[x].VehicleRepairDescription[z].Vehicleparts[i].VehicleRepairID)
                                                        {
                                                            vehicleWorkDescription[x].VehicleRepairDescription[z].Vehicleparts.Add(new VehicleParts() { VehicleRepairID = Convert.ToInt32(dr["vehicle_repair_id"]), SequenceNumber = Convert.ToInt16(dr["PSeq"]), PartCode = dr["PCode"].ToString() });
                                                            break;
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    vehicleWorkDescription[z].VehicleRepairDescription.Add(new VehicleRepairDescription()
                                                    {
                                                        ID = Convert.ToInt32(dr["VRDID"]),
                                                        VehicleWorkDescriptionID = Convert.ToInt32(dr["vehicle_work_description_id"]),
                                                        SequenceNumber = Convert.ToInt16(dr["RSeqID"]),
                                                        RepairDescription = dr["RDes"].ToString(),
                                                        Vehicleparts = new ObservableCollection<VehicleParts>() 
                                                        { 
                                                            new VehicleParts()
                                                            {
                                                                VehicleRepairID = CheckNull<int>(dr["vehicle_repair_id"]),
                                                                SequenceNumber = CheckNull<int>(dr["PSeq"]),
                                                                PartCode = dr["PCode"].ToString()
                                                            }
                                                        }
                                                    });
                                                }
                                                //break;
                                            }
                                        }
                                        else
                                        {
                                            ObservableCollection<VehicleRepairDescription> vrd = new ObservableCollection<VehicleRepairDescription>();
                                            if (CheckNull<int>(dr["RSeqID"]) > 0)
                                            {
                                                ObservableCollection<VehicleParts> vp = new ObservableCollection<VehicleParts>();
                                                if (CheckNull<int>(dr["PSeq"]) > 0)
                                                {
                                                    vp.Add(new VehicleParts()
                                                    {
                                                        VehicleRepairID = CheckNull<int>(dr["vehicle_repair_id"]),
                                                        SequenceNumber = CheckNull<int>(dr["PSeq"]),
                                                        PartCode = dr["PCode"].ToString()
                                                    });
                                                }

                                                vrd.Add(new VehicleRepairDescription()
                                                {
                                                    ID = Convert.ToInt32(dr["VRDID"]),
                                                    VehicleWorkDescriptionID = CheckNull<int>(dr["vehicle_work_description_id"]),
                                                    SequenceNumber = CheckNull<int>(dr["RSeqID"]),
                                                    RepairDescription = dr["RDes"].ToString(),
                                                    Vehicleparts = vp
                                                });
                                            }

                                            vehicleWorkDescription.Add(new VehicleWorkDescription()
                                            {
                                                ID = Convert.ToInt32(dr["id"]),
                                                Description = dr["description"].ToString(),
                                                IsCompleted = Convert.ToBoolean(dr["is_completed"]),
                                                VehicleMaintenanceInfo = new VehicleMaintenanceInfo() { ID = Convert.ToInt16(dr["vehicle_maintenance_info_id"]), Code = dr["code"].ToString() },
                                                VehicleRepairWorkOrderID = Convert.ToInt32(dr["vehicle_repair_work_order_id"]),
                                                ProblemBtnEnabled = Convert.ToInt32(dr["vehicle_repair_work_order_id"]) > 0 ? false : true,
                                                ItemRepair = Convert.ToInt32(dr["vehicle_repair_work_order_id"]) > 0 ? true : false,
                                                ItemRepairEnabled = Convert.ToInt32(dr["vehicle_repair_work_order_id"]) > 0 ? false : true,
                                                ItemDoneEnabled = Convert.ToInt32(dr["vehicle_repair_work_order_id"]) > 0 ? false : true,
                                                NormalVisibility = "Visible",
                                                RepairVisibility = "Collapsed",
                                                IsActive = Convert.ToBoolean(dr["is_active"]),
                                                VehicleMaintenanceSequenceID = Convert.ToInt16(dr["vehicle_maintenance_sequence_id"]),
                                                VehicleRepairDescription = vrd
                                                //VehicleRepairDescription = new ObservableCollection<VehicleRepairDescription>()
                                                //{
                                                //    new VehicleRepairDescription()
                                                //    {
                                                //        VehicleWorkDescriptionID = CheckNull<int>(dr["vehicle_work_description_id"]),
                                                //        SequenceNumber = CheckNull<int>(dr["RSeqID"]),
                                                //        RepairDescription = dr["RDes"].ToString(),
                                                //        Vehicleparts = new ObservableCollection<VehicleParts>()
                                                //        {                                          
                                                //            new VehicleParts()
                                                //            {
                                                //                VehicleRepairID = CheckNull<int>(dr["vehicle_repair_id"]),
                                                //                SequenceNumber = CheckNull<int>(dr["PSeq"]),
                                                //                PartCode = dr["PCode"].ToString(),
                                                //            }
                                                //        }
                                                //    }
                                                //}
                                            });
                                        }
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return vehicleWorkDescription;
        }       

        public static ObservableCollection<VehicleWorkDescription> GetVehicleWorkDescriptionForRepair(Int32 Id)
        {
            ObservableCollection<VehicleWorkDescription> vehicleWorkDescription = new ObservableCollection<VehicleWorkDescription>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                conn.Open();
                try
                {
                    SqlCommand cmdGetData = new SqlCommand("SELECT * FROM VehicleWorkDescription " +
                                                           "WHERE id=@ID", conn);

                    cmdGetData.Parameters.AddWithValue("@ID", Id);
                    using (SqlDataReader dr = cmdGetData.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                VehicleWorkDescription vwo = new VehicleWorkDescription();
                                vwo.ID = Convert.ToInt32(dr["id"]);
                                vwo.Description = dr["description"].ToString();
                                vwo.IsCompleted = Convert.ToBoolean(dr["is_completed"]);
                                //vwo.VehicleMaintenanceInfo = new VehicleMaintenanceInfo() { Code = dr["sequence_id"].ToString() };
                                //vwo.PartsOrdered = Convert.ToBoolean(dr["parts_orded"]);
                                vwo.IsActive = Convert.ToBoolean(dr["is_active"]);
                                //vwo.ProblemBtnEnabled = false;
                                //vwo.ItemDoneEnabled = true;
                                //vwo.NormalVisibility = "Collapsed";
                                //vwo.RepairVisibility = "Visible";
                                vehicleWorkDescription.Add(vwo);
                                break;
                            }
                        }
                    }
                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return vehicleWorkDescription;
        }

        public static ObservableCollection<VehicleWorkDescription> GetVehicleWorkDescriptionByIDForRepair(Int32 Id)
        {
            ObservableCollection<VehicleWorkDescription> vehicleWorkDescription = new ObservableCollection<VehicleWorkDescription>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                conn.Open();
                try
                {
                    SqlCommand cmdGetData = new SqlCommand("SELECT id,vehicle_work_order_id,sequence_id,description,parts_orded,is_completed,is_active " +
                                                           "FROM VehicleRepairDescription " +
                                                           "WHERE vehicle_work_order_id=@ID AND is_active='True'", conn);

                    cmdGetData.Parameters.AddWithValue("@ID", Id);
                    using (SqlDataReader dr = cmdGetData.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                VehicleWorkDescription vwo = new VehicleWorkDescription();
                                vwo.ID = Convert.ToInt32(dr["id"]);
                                vwo.Description = dr["description"].ToString();
                                vwo.IsCompleted = Convert.ToBoolean(dr["is_completed"]);
                                vwo.VehicleMaintenanceInfo = new VehicleMaintenanceInfo() { Code = dr["sequence_id"].ToString() };
                                vwo.PartsOrdered = Convert.ToBoolean(dr["parts_orded"]);
                                vwo.IsActive = Convert.ToBoolean(dr["is_active"]);
                                vwo.ProblemBtnEnabled = false;
                                vwo.ItemDoneEnabled = true;
                                vwo.NormalVisibility = "Collapsed";
                                vwo.RepairVisibility = "Visible";
                                vehicleWorkDescription.Add(vwo);
                            }
                        }
                    }
                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return vehicleWorkDescription;
        }

        public static ObservableCollection<VehicleWorkDescription> GetVehicleWorkDescriptionByIDForRepairNoActive(Int32 Id)
        {
            ObservableCollection<VehicleWorkDescription> vehicleWorkDescription = new ObservableCollection<VehicleWorkDescription>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                conn.Open();
                try
                {
                    SqlCommand cmdGetData = new SqlCommand("SELECT vehicle_work_order_id,sequence_id,description,is_completed,is_active,parts_orded " +
                                                           "FROM VehicleRepairDescription " +
                                                           "WHERE vehicle_work_order_id=@ID", conn);

                    cmdGetData.Parameters.AddWithValue("@ID", Id);
                    using (SqlDataReader dr = cmdGetData.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                VehicleWorkDescription vwo = new VehicleWorkDescription();
                                vwo.Description = dr["description"].ToString();
                                vwo.IsCompleted = Convert.ToBoolean(dr["is_completed"]);
                                vwo.VehicleMaintenanceInfo = new VehicleMaintenanceInfo() { Code = dr["sequence_id"].ToString() };
                                vwo.PartsOrdered = Convert.ToBoolean(dr["parts_orded"]);
                                vwo.IsActive = Convert.ToBoolean(dr["is_active"]);
                                vwo.ProblemBtnEnabled = false;
                                vehicleWorkDescription.Add(vwo);
                            }
                        }
                    }
                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return vehicleWorkDescription;
        }



        public static int CompleteWorkOrder(VehicleWorkOrder vwo, string userName)
        {
            int result = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                //SqlCommand cmdUpdateVehicleWorkOrder = new SqlCommand("UPDATE VehicleWorkOrder SET maintenance_frequency = @MaintenanceFreq,first_service_date=@FirstServiceDate,next_service_date=@NextServiceDate,created_date=@CreatedDate,created_by=@CreatedBy " +
                //                                                      "WHERE id = @ID", conn);

                //SqlCommand cmdDeleteVehicleWorkDescription = new SqlCommand("DELETE FROM VehicleWorkDescription " +
                //                                                            "WHERE vehicle_work_order_id=@VehicleWorkOrderID", conn);

                //SqlCommand cmdInsertVehicleWorkDescription = new SqlCommand("INSERT INTO VehicleWorkDescription(vehicle_maintenance_info_id,vehicle_work_order_id,vehicle_maintenance_sequence_id,description,is_completed,is_active,comment) " +
                //                                                            "VALUES (@VehicleMaintenanceInfoID,@VehicleWorkOrderID,@VehicleMaintenanceSequenceID,@Description,@IsCompleted,@IsActive,@Comment)", conn);

                //SqlTransaction trans = null;
                //conn.Open();
                //trans = conn.BeginTransaction();
                //try
                //{
                //    cmdUpdateVehicleWorkOrder.Transaction = trans;
                //    cmdUpdateVehicleWorkOrder.Parameters.AddWithValue("@ID", vwo.VehicleWorkOrderID);
                //    cmdUpdateVehicleWorkOrder.Parameters.AddWithValue("@MaintenanceFreq", vwo.MaintenanceFrequency);
                //    cmdUpdateVehicleWorkOrder.Parameters.AddWithValue("@FirstServiceDate", vwo.FirstServiceDate);
                //    cmdUpdateVehicleWorkOrder.Parameters.AddWithValue("@NextServiceDate", vwo.NextServiceDate);
                //    cmdUpdateVehicleWorkOrder.Parameters.AddWithValue("@CreatedDate", DateTime.Now);
                //    cmdUpdateVehicleWorkOrder.Parameters.AddWithValue("@CreatedBy", userName);
                //    result = cmdUpdateVehicleWorkOrder.ExecuteNonQuery();

                //    foreach (var item in vwo.VehicleMaintenanceInfo)
                //    {
                //        cmdDeleteVehicleWorkDescription.Transaction = trans;
                //        cmdDeleteVehicleWorkDescription.Parameters.AddWithValue("@VehicleWorkOrderID", vwo.VehicleWorkOrderID);
                //        int res = cmdDeleteVehicleWorkDescription.ExecuteNonQuery();
                //        cmdDeleteVehicleWorkDescription.Parameters.Clear();
                //    }

                //    foreach (var item in vwo.VehicleMaintenanceInfo)
                //    {
                //        cmdInsertVehicleWorkDescription.Transaction = trans;
                //        cmdInsertVehicleWorkDescription.Parameters.AddWithValue("@VehicleMaintenanceInfoID", item.ID);
                //        cmdInsertVehicleWorkDescription.Parameters.AddWithValue("@VehicleWorkOrderID", vwo.VehicleWorkOrderID);
                //        cmdInsertVehicleWorkDescription.Parameters.AddWithValue("@VehicleMaintenanceSequenceID", item.VehicleMaintenanceSequence.ID);
                //        cmdInsertVehicleWorkDescription.Parameters.AddWithValue("@Description", item.Description);
                //        cmdInsertVehicleWorkDescription.Parameters.AddWithValue("@IsCompleted", false);
                //        cmdInsertVehicleWorkDescription.Parameters.AddWithValue("@IsActive", item.Active);
                //        cmdInsertVehicleWorkDescription.Parameters.AddWithValue("@Comment", string.Empty);
                //        result = cmdInsertVehicleWorkDescription.ExecuteNonQuery();
                //        cmdInsertVehicleWorkDescription.Parameters.Clear();
                //    }

                //    trans.Commit();
                //}
                //catch (Exception e)
                //{
                //    trans.Rollback();
                //    Debug.WriteLine("Error: Updating SalesOrder Required Date" + e);
                //}
                //finally
                //{
                //    conn.Close();
                //}
            }

            return result;
        }

        public static List<UserPosition> GetAllUserPositions(string position)
        {
            List<UserPosition> userPositions = new List<UserPosition>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                conn.Open();
                try
                {
                    SqlCommand cmdGetData = new SqlCommand("SELECT UserPositions.id,UserPositions.position, " +
                                                           "Users.ID,Users.Username,Users.FirstName,Users.LastName,Users.State " +
                                                           "FROM UserPositions " +
                                                           "INNER JOIN Users ON UserPositions.user_id = Users.ID " +
                                                           "WHERE UserPositions.position=@PositionName AND Users.is_active='True' " + 
                                                           "ORDER BY Users.ID", conn);

                    cmdGetData.Parameters.AddWithValue("@PositionName", position);
                    using (SqlDataReader dr = cmdGetData.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                UserPosition up = new UserPosition();
                                up.ID = Convert.ToInt16(dr["id"]);
                                up.Position = dr["position"].ToString();
                                up.User = new User() { ID = Convert.ToInt16(dr["ID"]), Username = dr["Username"].ToString(), FirstName = dr["FirstName"].ToString(), LastName = dr["LastName"].ToString(), State = dr["State"].ToString() };
                                up.FullName = dr["FirstName"].ToString() + " " + dr["LastName"].ToString();
                                userPositions.Add(up);
                            }
                        }
                    }
                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return userPositions;
        }

        public static int UpdateVehicleWorkOrderUserOdometer(VehicleWorkOrder vwo)
        {
            int result = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdUpdateVehicleWorkOrder = new SqlCommand("UPDATE VehicleWorkOrder SET user_id = @UserID,odometer_reading=@OdometerReading " +
                                                                      "WHERE id = @ID", conn);

                //SqlTransaction trans = null;
                conn.Open();
                //trans = conn.BeginTransaction();
                try
                {
                    //cmdUpdateVehicleWorkOrder.Transaction = trans;
                    cmdUpdateVehicleWorkOrder.Parameters.AddWithValue("@ID", vwo.VehicleWorkOrderID);
                    cmdUpdateVehicleWorkOrder.Parameters.AddWithValue("@UserID", vwo.User.ID);
                    cmdUpdateVehicleWorkOrder.Parameters.AddWithValue("@OdometerReading", vwo.OdometerReading);
                    result = cmdUpdateVehicleWorkOrder.ExecuteNonQuery();

                    //    trans.Commit();
                }
                catch (Exception e)
                {
                    //    trans.Rollback();
                    Debug.WriteLine("Error: Updating SalesOrder Required Date" + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return result;
        }

        public static Int32 UpdateVehicleWorkOrderViewed(Int32 id,Int64 Odo)
        {
            int res = 0;
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdVehicleWorkOrder = new SqlCommand("UPDATE VehicleWorkOrder SET is_viewed='True',odometer_reading=@Odometer " +
                                                                "WHERE id = @ID", conn);
                conn.Open();

                try
                {

                    cmdVehicleWorkOrder.Parameters.AddWithValue("@ID", id);
                    cmdVehicleWorkOrder.Parameters.AddWithValue("@Odometer", Odo);
                    res = cmdVehicleWorkOrder.ExecuteNonQuery();
                    
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Production SQL Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return res;

        }

        public static Int32 VehicleWorkOrderCompleted(VehicleWorkOrder vwo,ObservableCollection<VehicleMaintenanceInfo> mfi)
        {
            int res = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            { 

                SqlCommand cmdUpdateVehicleWorkDescription = new SqlCommand("UPDATE VehicleWorkDescription SET is_completed = @IsCompleted " +
                                                                            "WHERE id = @ID", conn);

                SqlCommand cmdUpdateVehicleRepairDescription = new SqlCommand("UPDATE VehicleRepairDescription SET is_completed = @IsCompleted " +
                                                                              "WHERE id = @ID", conn);

                SqlCommand cmdUpdateVehiclePartDescription = new SqlCommand("UPDATE VehiclePartDescription SET completed = @IsCompleted " +
                                                                              "WHERE vehicle_repair_id = @ID", conn);

                SqlCommand cmdVehicleWorkOrder = new SqlCommand("UPDATE VehicleWorkOrder SET user_id=@UserID,maintenance_seq_id=@MainSeqID,completed_date=@CompletedDate,completed_by=@CompletedBy,is_completed = 'True',status='Completed',odometer_reading=@Odometer, extra_notes=@ExtraNotes " +
                                                                "WHERE id = @ID", conn);

                SqlCommand cmdNewVehicleWorkOrder = new SqlCommand("INSERT INTO VehicleWorkOrder(vehicle_id,user_id,maintenance_seq_id,largest_seq_id,work_order_type,first_service_date,next_service_date,last_odometer_reading,odometer_reading,is_completed,created_date,created_by,status,urgency,is_viewed, extra_notes) " +
                                                                   "VALUES (@VehicleID,@UserID,@MaintenanceSeqID,@LargestSeqID,@WorkOrderType,@FirstServiceDate,@NextServiceDate,@LastOdometerReading,@OdometerReading,@IsCompleted,@CreatedDate,@CreatedBy,@Status,@Urgency,@IsViewed,@ExtraNotes)", conn);

                SqlCommand cmdVehicleMaintenanceCompleted = new SqlCommand("INSERT INTO VehicleMaintenanceDescriptionsCompleted(vehicle_maintenance_info_id,vehicle_work_order_id,code,description,is_completed,completed_date) " +
                                                                         "VALUES (@MainInfoID,@VehicleWorkOrderID,@Code,@Description,@IsCompleted,@CompletedDate)", conn);

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {
                    int upVeWorkOrder = 0;
                    cmdVehicleWorkOrder.Transaction = trans;
                    cmdVehicleWorkOrder.Parameters.AddWithValue("@ID", vwo.VehicleWorkOrderID);
                    cmdVehicleWorkOrder.Parameters.AddWithValue("@UserID", vwo.User.ID);
                    cmdVehicleWorkOrder.Parameters.AddWithValue("@MainSeqID", vwo.VehicleMaintenanceSequence.ID);
                    cmdVehicleWorkOrder.Parameters.AddWithValue("@CompletedDate", DateTime.Now);
                    cmdVehicleWorkOrder.Parameters.AddWithValue("@CompletedBy", vwo.CreatedBy);
                    cmdVehicleWorkOrder.Parameters.AddWithValue("@Odometer", vwo.OdometerReading);
                    cmdVehicleWorkOrder.Parameters.AddWithValue("@ExtraNotes", vwo.ExtraNotes);
                    upVeWorkOrder = cmdVehicleWorkOrder.ExecuteNonQuery();

                    cmdNewVehicleWorkOrder.Transaction = trans;
                    cmdNewVehicleWorkOrder.Parameters.AddWithValue("@VehicleID", vwo.Vehicle.ID);
                    cmdNewVehicleWorkOrder.Parameters.AddWithValue("@UserID", 0);
                    cmdNewVehicleWorkOrder.Parameters.AddWithValue("@MaintenanceSeqID", vwo.VehicleMaintenanceSequence.ID);
                    cmdNewVehicleWorkOrder.Parameters.AddWithValue("@LargestSeqID", vwo.LargestSeqID);    
                    cmdNewVehicleWorkOrder.Parameters.AddWithValue("@WorkOrderType", vwo.WorkOrderType);
                    cmdNewVehicleWorkOrder.Parameters.AddWithValue("@FirstServiceDate", vwo.FirstServiceDate);
                    cmdNewVehicleWorkOrder.Parameters.AddWithValue("@NextServiceDate", vwo.NextServiceDate);
                    cmdNewVehicleWorkOrder.Parameters.AddWithValue("@LastOdometerReading", vwo.LastOdometerReading);
                    cmdNewVehicleWorkOrder.Parameters.AddWithValue("@OdometerReading", 0);
                    cmdNewVehicleWorkOrder.Parameters.AddWithValue("@IsCompleted", vwo.IsCompleted);
                    cmdNewVehicleWorkOrder.Parameters.AddWithValue("@CreatedDate", vwo.CreatedDate);
                    cmdNewVehicleWorkOrder.Parameters.AddWithValue("@CreatedBy", vwo.CreatedBy);
                    cmdNewVehicleWorkOrder.Parameters.AddWithValue("@Status", vwo.Status);
                    cmdNewVehicleWorkOrder.Parameters.AddWithValue("@Urgency", vwo.Urgency);
                    cmdNewVehicleWorkOrder.Parameters.AddWithValue("@IsViewed", vwo.IsViewed);
                    cmdNewVehicleWorkOrder.Parameters.AddWithValue("@ExtraNotes", string.Empty);
                    res = cmdNewVehicleWorkOrder.ExecuteNonQuery();

                    int resMainComp = 0;
                    foreach (var item in mfi)
                    {
                        cmdVehicleMaintenanceCompleted.Transaction = trans;
                        cmdVehicleMaintenanceCompleted.Parameters.AddWithValue("@MainInfoID", item.ID);
                        cmdVehicleMaintenanceCompleted.Parameters.AddWithValue("@VehicleWorkOrderID", vwo.VehicleWorkOrderID);
                        cmdVehicleMaintenanceCompleted.Parameters.AddWithValue("@Code", item.Code);
                        cmdVehicleMaintenanceCompleted.Parameters.AddWithValue("@Description", item.Description);
                        cmdVehicleMaintenanceCompleted.Parameters.AddWithValue("@IsCompleted", true);
                        cmdVehicleMaintenanceCompleted.Parameters.AddWithValue("@CompletedDate", DateTime.Now);
                        resMainComp = cmdVehicleMaintenanceCompleted.ExecuteNonQuery();
                        cmdVehicleMaintenanceCompleted.Parameters.Clear();
                    }                    
                    
                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("Production SQL Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return res;
        }


        public static Int32 RepairVehicleWorkOrderCompleted(VehicleWorkOrder vwo,ObservableCollection<VehicleWorkDescription> vwd)
        {
            int res = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {

               
                //SqlCommand cmdUpdateVehicleWorkDescription = new SqlCommand("UPDATE VehicleWorkDescription SET is_completed = @IsCompleted " +
                //                                                            "WHERE id = @ID", conn);

                //SqlCommand cmdUpdateVehicleRepairDescription = new SqlCommand("UPDATE VehicleRepairDescription SET is_completed = @IsCompleted " +
                //                                                              "WHERE id = @ID", conn);

                SqlCommand cmdVehicleWorkOrder = new SqlCommand("UPDATE VehicleWorkOrder SET user_id=@UserID,completed_date=@CompletedDate,completed_by=@CompletedBy,is_completed = 'True',status='Completed' " +
                                                                "WHERE id = @ID", conn);

                SqlCommand cmdUpdateVehicleRepairDescription = new SqlCommand("UPDATE VehicleRepairDescription SET is_completed = 'true' " +
                                                                             "WHERE vehicle_work_order_id = @ID", conn);

                SqlCommand cmdUpdateVehiclePartDescription = new SqlCommand("UPDATE VehiclePartDescription SET completed = 'true' " +
                                                                             "WHERE vehicle_repair_id = @VehicleRepairID", conn);

                //SqlCommand cmdNewVehicleWorkOrder = new SqlCommand("INSERT INTO VehicleWorkOrder(vehicle_id,user_id,work_order_type,first_service_date,next_service_date,last_odometer_reading,odometer_reading,is_completed,created_date,created_by,status,urgency) " +
                //                                                   "VALUES (@VehicleID,@UserID,@WorkOrderType,@FirstServiceDate,@NextServiceDate,@LastOdometerReading,@OdometerReading,@IsCompleted,@CreatedDate,@CreatedBy,@Status,@Urgency)", conn);

                //SqlCommand cmdVehicleMaintenanceCompleted = new SqlCommand("INSERT INTO VehicleMaintenanceDescriptionsCompleted(vehicle_maintenance_info_id,vehicle_work_order_id,code,description,is_completed,completed_date) " +
                //                                                         "VALUES (@MainInfoID,@VehicleWorkOrderID,@Code,@Description,@IsCompleted,@CompletedDate)", conn);

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {
                    int upVeWorkOrder = 0;
                    int upVehRep = 0;

                    cmdVehicleWorkOrder.Transaction = trans;
                    cmdVehicleWorkOrder.Parameters.AddWithValue("@ID", vwo.VehicleWorkOrderID);
                    cmdVehicleWorkOrder.Parameters.AddWithValue("@UserID", vwo.User.ID);
                    cmdVehicleWorkOrder.Parameters.AddWithValue("@CompletedDate", DateTime.Now);
                    cmdVehicleWorkOrder.Parameters.AddWithValue("@CompletedBy", vwo.CreatedBy);
                    upVeWorkOrder = cmdVehicleWorkOrder.ExecuteNonQuery();

                    foreach (var item in vwd)
                    {
                        foreach (var items in item.VehicleRepairDescription)
                        {
                            cmdUpdateVehicleRepairDescription.Transaction = trans;
                            cmdUpdateVehicleRepairDescription.Parameters.AddWithValue("@ID", items.VehicleWorkOrderID);
                            upVehRep = cmdUpdateVehicleRepairDescription.ExecuteNonQuery();
                            cmdUpdateVehicleRepairDescription.Parameters.Clear();

                            foreach (var itemz in items.Vehicleparts)
                            {
                                cmdUpdateVehiclePartDescription.Transaction = trans;
                                cmdUpdateVehiclePartDescription.Parameters.AddWithValue("@VehicleRepairID", itemz.VehicleRepairID);
                                cmdUpdateVehiclePartDescription.ExecuteNonQuery();
                                cmdUpdateVehiclePartDescription.Parameters.Clear();
                            }
                        }                        
                    }
                    if (upVeWorkOrder > 0 && upVehRep > 0)
                    {
                        res = 1;
                    }

                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("Production SQL Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return res;
        }

        public static ObservableCollection<VehicleWorkOrderHistory> GetVehicleWorkOrderHistory()
        {

            ObservableCollection<VehicleWorkOrderHistory> vehicleWorkOrderHistory = new ObservableCollection<VehicleWorkOrderHistory>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                conn.Open();
                try
                {
                    SqlCommand cmdGetData = new SqlCommand("SELECT VehicleWorkOrder.id AS WOID,VehicleWorkOrder.work_order_type,VehicleWorkOrder.completed_date,VehicleWorkOrder.completed_by,VehicleWorkOrder.odometer_reading, VehicleWorkOrder.extra_notes, " +
                                                           "Users.FirstName,Users.LastName, " +
                                                           "Vehicles.id,Vehicles.serial_number,Vehicles.vehicle_code,Vehicles.vehicle_brand,Vehicles.vehicle_description, " +
                                                           "VehicleMaintenanceSequence.kmhrs,VehicleMaintenanceSequence.unit " +
                                                           "FROM VehicleWorkOrder " +
                                                           "INNER JOIN Users ON VehicleWorkOrder.user_id = Users.ID " +
                                                           "INNER JOIN Vehicles ON VehicleWorkOrder.vehicle_id = Vehicles.id " +
                                                           "LEFT JOIN VehicleMaintenanceSequence ON VehicleWorkOrder.maintenance_seq_id = VehicleMaintenanceSequence.id " +
                                                           "WHERE VehicleWorkOrder.status='Completed' AND VehicleWorkOrder.is_completed='True' " +
                                                           "ORDER BY VehicleWorkOrder.completed_date DESC", conn);

                    //cmdGetData.Parameters.AddWithValue("@SearchDate", dt);
                    using (SqlDataReader dr = cmdGetData.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                string str=string.Empty;
                                if (!DBNull.Value.Equals(dr["kmhrs"]) && !DBNull.Value.Equals(dr["unit"]))
                                {
                                    //not null
                                    str=Convert.ToString(Convert.ToInt64(dr["kmhrs"]) > 0 ? dr["kmhrs"] : "") + Convert.ToString(dr["unit"]).First().ToString().ToUpper() + dr["unit"].ToString().Substring(1);//(CheckNull<Int64>(dr["kmhrs"])).ToString();// +CheckNull<string>(dr["unit"]);
                                }
                                else
                                {
                                    //null
                                    str = "Repair";
                                }

                                VehicleWorkOrderHistory vwoh = new VehicleWorkOrderHistory();
                                vwoh.VehicleWorkOrderID = Convert.ToInt32(dr["WOID"]);
                                //vwoh.VehicleMaintenanceSequence = new VehicleMaintenanceSequence() { Kmhrs = CheckNull<Int64>(dr["kmhrs"]), Unit = CheckNull<string>(dr["unit"]) };
                                vwoh.MaintenanceFrequency = str;
                                vwoh.WorkOrderType = dr["work_order_type"].ToString();
                                vwoh.User = new User() { FullName = dr["FirstName"].ToString() + " " + dr["LastName"].ToString() };
                                vwoh.CompletedDate = Convert.ToDateTime(dr["completed_date"]);
                                vwoh.WorkOrderCompletedBy = dr["completed_by"].ToString();
                                vwoh.Vehicle = new Vehicle() { ID = Convert.ToInt16(dr["id"]), SerialNumber = dr["serial_number"].ToString(), VehicleCode = dr["vehicle_code"].ToString(), VehicleBrand = dr["vehicle_brand"].ToString(), VehicleDescription = dr["vehicle_description"].ToString() };
                                vwoh.OdometerReading = Convert.ToInt64(dr["odometer_reading"]);
                                vwoh.ExtraNotes = CheckNull<string>(dr["extra_notes"]);
                                vehicleWorkOrderHistory.Add(vwoh);
                            }
                        }
                    }
                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return vehicleWorkOrderHistory;
        }

        public static ObservableCollection<VehicleWorkOrderHistory> GetVehicleMiscellaniousWorkOrderHistory()
        {

            ObservableCollection<VehicleWorkOrderHistory> vehicleWorkOrderHistory = new ObservableCollection<VehicleWorkOrderHistory>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                conn.Open();
                try
                {
                    SqlCommand cmdGetData = new SqlCommand("SELECT VehicleWorkOrder.id AS WOID,VehicleWorkOrder.work_order_type,VehicleWorkOrder.completed_date,VehicleWorkOrder.completed_by,VehicleWorkOrder.odometer_reading, " +
                                                           "Users.FirstName,Users.LastName, " +
                                                           "VehicleMaintenanceSequence.kmhrs,VehicleMaintenanceSequence.unit " +
                                                           "FROM VehicleWorkOrder " +
                                                           "INNER JOIN Users ON VehicleWorkOrder.user_id = Users.ID " +
                                                           "LEFT JOIN VehicleMaintenanceSequence ON VehicleWorkOrder.maintenance_seq_id = VehicleMaintenanceSequence.id " +
                                                           "WHERE VehicleWorkOrder.status='Completed' AND VehicleWorkOrder.is_completed='True' AND VehicleWorkOrder.vehicle_id =0 " +
                                                           "ORDER BY VehicleWorkOrder.completed_date DESC", conn);

                    //cmdGetData.Parameters.AddWithValue("@SearchDate", dt);
                    using (SqlDataReader dr = cmdGetData.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                string str = string.Empty;
                                if (!DBNull.Value.Equals(dr["kmhrs"]) && !DBNull.Value.Equals(dr["unit"]))
                                {
                                    //not null
                                    str = Convert.ToString(Convert.ToInt64(dr["kmhrs"]) > 0 ? dr["kmhrs"] : "") + Convert.ToString(dr["unit"]).First().ToString().ToUpper() + dr["unit"].ToString().Substring(1);//(CheckNull<Int64>(dr["kmhrs"])).ToString();// +CheckNull<string>(dr["unit"]);
                                }
                                else
                                {
                                    //null
                                    str = "Repair";
                                }

                                VehicleWorkOrderHistory vwoh = new VehicleWorkOrderHistory();
                                vwoh.VehicleWorkOrderID = Convert.ToInt32(dr["WOID"]);
                                vwoh.MaintenanceFrequency = str;
                                vwoh.WorkOrderType = dr["work_order_type"].ToString();
                                vwoh.User = new User() { FullName = dr["FirstName"].ToString() + " " + dr["LastName"].ToString() };
                                vwoh.CompletedDate = Convert.ToDateTime(dr["completed_date"]);
                                vwoh.WorkOrderCompletedBy = dr["completed_by"].ToString();
                                vwoh.Vehicle = new Vehicle() { ID = 0, SerialNumber = "", VehicleCode = "Miscellaneous", VehicleBrand = "", VehicleDescription = "Miscellaneous Work Order" };
                                vwoh.OdometerReading = Convert.ToInt64(dr["odometer_reading"]);
                                vehicleWorkOrderHistory.Add(vwoh);
                            }
                        }
                    }
                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return vehicleWorkOrderHistory;
        }

        public static ObservableCollection<VehicleWorkOrderDetailsHistory> GetVehicleWorkDescriptionCompleted(Int32 ID)
        {
            ObservableCollection<VehicleWorkOrderDetailsHistory> vehicleWorkDescription = new ObservableCollection<VehicleWorkOrderDetailsHistory>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                conn.Open();
                try
                {
                    SqlCommand cmdGetData = new SqlCommand("SELECT VehicleMaintenanceInfo.code, VehicleWorkDescription.description,VehicleWorkDescription.vehicle_repair_work_order_id,VehicleWorkDescription.is_completed " +
                                                           "FROM VehicleMaintenanceInfo " +
                                                           "INNER JOIN VehicleWorkDescription ON VehicleMaintenanceInfo.id = VehicleWorkDescription.vehicle_maintenance_info_id " +
                                                           "WHERE vehicle_work_order_id=@WorkOrderID", conn);

                    cmdGetData.Parameters.AddWithValue("@WorkOrderID", ID);
                    using (SqlDataReader dr = cmdGetData.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                VehicleWorkOrderDetailsHistory vwd = new VehicleWorkOrderDetailsHistory();
                                vwd.VehicleMaintenanceInfo = new VehicleMaintenanceInfo() { Code = dr["code"].ToString() };
                                vwd.VehicleRepairString = Convert.ToInt32(dr["vehicle_repair_work_order_id"]) > 0 ? Convert.ToInt32(dr["vehicle_repair_work_order_id"]).ToString() : "No Repair";
                                vwd.VehicleRepairWorkOrderID = Convert.ToInt32(dr["vehicle_repair_work_order_id"]);
                                vwd.Description = dr["description"].ToString();
                                vwd.IsCompleted = Convert.ToBoolean(dr["is_completed"]);
                                vehicleWorkDescription.Add(vwd);
                            }
                        }
                    }
                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return vehicleWorkDescription;
        }

        public static ObservableCollection<VehicleWorkOrderDetailsHistory> GetVehicleWorkDescriptionRepairCompleted(Int32 ID)
        {
            ObservableCollection<VehicleWorkOrderDetailsHistory> vehicleWorkDescription = new ObservableCollection<VehicleWorkOrderDetailsHistory>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                conn.Open();
                try
                {
                    SqlCommand cmdGetData = new SqlCommand("SELECT * FROM VehicleRepairDescription " +
                                                           "WHERE vehicle_work_order_id=@WorkOrderID", conn);

                    cmdGetData.Parameters.AddWithValue("@WorkOrderID", ID);
                    using (SqlDataReader dr = cmdGetData.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                VehicleWorkOrderDetailsHistory vwd = new VehicleWorkOrderDetailsHistory();
                                vwd.VehicleMaintenanceInfo = new VehicleMaintenanceInfo() { Code = dr["sequence_id"].ToString() };
                                vwd.Description = dr["description"].ToString();
                                vwd.IsCompleted = Convert.ToBoolean(dr["is_completed"]);
                                vwd.PartsOrded = Convert.ToBoolean(dr["parts_orded"]);
                                vehicleWorkDescription.Add(vwd);
                            }
                        }
                    }
                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return vehicleWorkDescription;
        }

        public static List<MetaData> GetMetaData()
        {
            List<MetaData> metaData = new List<MetaData>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                conn.Open();
                try
                {
                    SqlCommand cmdGetData = new SqlCommand("SELECT * FROM MetaData", conn);

                    using (SqlDataReader dr = cmdGetData.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                MetaData md = new MetaData();
                                md.ID = Convert.ToInt16(dr["id"]);
                                md.KeyName = dr["key_name"].ToString();
                                md.Description = dr["description"].ToString();
                                metaData.Add(md);
                            }
                        }
                    }
                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return metaData;
        }

        public static bool CheckVehicleWorkOrderCompleted(Int32 Id)
        {
            bool result = false;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    using (SqlCommand cmd = new SqlCommand("SELECT COUNT(*) from VehicleWorkOrder where id=@ID AND status='Pending'", conn))
                    {
                        conn.Open();

                        cmd.Parameters.AddWithValue("@ID", Id);

                        int rowCount = (int)cmd.ExecuteScalar();

                        if (rowCount > 0)
                        {
                            result = true;
                        }
                        else
                        {
                            result = false;
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL SELECT QUOTES ERROR : " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return result;
        }


        public static int UpdateRepairPart(VehicleWorkOrder vwo, ObservableCollection<VehicleWorkDescription> vwd, VehicleWorkOrder repairVehicleWorkOrder)
        {
            int result = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                //SqlCommand cmdUpdateVehicleWorkOrder = new SqlCommand("UPDATE VehicleWorkOrder SET maintenance_frequency = @MaintenanceFreq,first_service_date=@FirstServiceDate,next_service_date=@NextServiceDate,created_date=@CreatedDate,created_by=@CreatedBy " +
                //                                                      "WHERE id = @ID", conn);

                //SqlCommand cmdDeleteVehicleWorkDescription = new SqlCommand("DELETE FROM VehicleRepairDescription " +
                //                                                            "WHERE vehicle_work_order_id=@VehicleWorkOrderID", conn);

                SqlCommand cmdInsertVehicleRepairDescription = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM VehicleRepairDescription " +
                                                                              "WHERE vehicle_work_description_id = @VehicleWorkDescriptionID AND vehicle_work_order_id = @VehicleWorkOrderID AND sequence_id = @SequenceID) " +
                                                                              "INSERT INTO VehicleRepairDescription VALUES(@VehicleWorkDescriptionID,@VehicleWorkOrderID,@SequenceID,@Description,@PartsOrded,@IsCompleted,@IsActive) " +
                                                                              "ELSE " +
                                                                              "UPDATE VehicleRepairDescription SET description=@Description " +
                                                                              "WHERE vehicle_work_description_id = @VehicleWorkDescriptionID AND vehicle_work_order_id = @VehicleWorkOrderID AND sequence_id = @SequenceID", conn);


                //SqlCommand cmdInsertVehicleRepairDescription = new SqlCommand("INSERT INTO VehicleRepairDescription(vehicle_work_description_id,vehicle_work_order_id,sequence_id,description,parts_orded,is_completed,is_active) " +
                //                                                              "VALUES (@VehicleWorkDescriptionID,@VehicleWorkOrderID,@SequenceID,@Description,@PartsOrded,@IsCompleted,@IsActive)", conn);

                SqlCommand cmdGeVehicleRepairDescriptionID = new SqlCommand("SELECT MAX(id) FROM VehicleRepairDescription", conn);

                SqlCommand cmdInsertVehiclePartDescription = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM VehiclePartDescription " +
                                                                            "WHERE vehicle_repair_id = @VehicleRepairID AND sequence_id = @SequenceID) " +
                                                                            "INSERT INTO VehiclePartDescription VALUES(@VehicleRepairID,@SequenceID,@Code,@Description,@IsActive,@Completed) " +
                                                                            "ELSE " +
                                                                            "UPDATE VehiclePartDescription SET code=@Code " +
                                                                            "WHERE vehicle_repair_id = @VehicleRepairID AND sequence_id = @SequenceID", conn);

                SqlCommand cmdNewVehicleWorkOrder = new SqlCommand("INSERT INTO VehicleWorkOrder(vehicle_id,user_id,work_order_type,maintenance_frequency,first_service_date,next_service_date,odometer_reading,is_completed,created_date,created_by,status,urgency) " +
                                                                   "VALUES (@VehicleID,@UserID,@WorkOrderType,@MaintenanceFrequency,@FirstServiceDate,@NextServiceDate,@OdometerReading,@IsCompleted,@CreatedDate,@CreatedBy,@Status,@Urgency)", conn);

                SqlCommand cmdGeWorkOrdertId = new SqlCommand("SELECT MAX(id) FROM VehicleWorkOrder", conn);

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {
                    foreach (var item in vwd)
                    {
                        Int32 workOrderId = 0;
                        //Check
                        foreach (var items in item.VehicleRepairDescription)
                        {
                            if (!String.IsNullOrWhiteSpace(items.RepairDescription))
                            {
                                if (items.ID == 0)//Add a new work order
                                {
                                    cmdNewVehicleWorkOrder.Transaction = trans;
                                    cmdNewVehicleWorkOrder.Parameters.AddWithValue("@VehicleID", repairVehicleWorkOrder.Vehicle.ID);
                                    cmdNewVehicleWorkOrder.Parameters.AddWithValue("@UserID", 0);
                                    cmdNewVehicleWorkOrder.Parameters.AddWithValue("@WorkOrderType", repairVehicleWorkOrder.WorkOrderType);
                                    cmdNewVehicleWorkOrder.Parameters.AddWithValue("@MaintenanceFrequency", repairVehicleWorkOrder.MaintenanceFrequency);
                                    cmdNewVehicleWorkOrder.Parameters.AddWithValue("@FirstServiceDate", repairVehicleWorkOrder.FirstServiceDate);
                                    cmdNewVehicleWorkOrder.Parameters.AddWithValue("@NextServiceDate", repairVehicleWorkOrder.NextServiceDate);
                                    cmdNewVehicleWorkOrder.Parameters.AddWithValue("@OdometerReading", string.Empty);
                                    cmdNewVehicleWorkOrder.Parameters.AddWithValue("@IsCompleted", repairVehicleWorkOrder.IsCompleted);
                                    cmdNewVehicleWorkOrder.Parameters.AddWithValue("@CreatedDate", repairVehicleWorkOrder.CreatedDate);
                                    cmdNewVehicleWorkOrder.Parameters.AddWithValue("@CreatedBy", repairVehicleWorkOrder.CreatedBy);
                                    cmdNewVehicleWorkOrder.Parameters.AddWithValue("@Status", repairVehicleWorkOrder.Status);
                                    cmdNewVehicleWorkOrder.Parameters.AddWithValue("@Urgency", repairVehicleWorkOrder.Urgency);
                                    cmdNewVehicleWorkOrder.ExecuteNonQuery();
                                    cmdNewVehicleWorkOrder.Parameters.Clear();

                                    cmdGeWorkOrdertId.Transaction = trans;
                                    workOrderId = Convert.ToInt32(cmdGeWorkOrdertId.ExecuteScalar());
                                }
                                else
                                {
                                    workOrderId = items.VehicleWorkOrderID;
                                }
                            }
                            break;
                        }

                        foreach (var items in item.VehicleRepairDescription)
                        {
                            if (!String.IsNullOrWhiteSpace(items.RepairDescription))
                            {
                                Int32 id = 0;

                                if (items.ID == 0)//Add a new work order
                                {
                                    cmdInsertVehicleRepairDescription.Transaction = trans;
                                    cmdInsertVehicleRepairDescription.Parameters.AddWithValue("@VehicleWorkDescriptionID", items.VehicleWorkDescriptionID);
                                    cmdInsertVehicleRepairDescription.Parameters.AddWithValue("@VehicleWorkOrderID", workOrderId);
                                    cmdInsertVehicleRepairDescription.Parameters.AddWithValue("@SequenceID", items.SequenceNumber);
                                    cmdInsertVehicleRepairDescription.Parameters.AddWithValue("@Description", items.RepairDescription);
                                    cmdInsertVehicleRepairDescription.Parameters.AddWithValue("@PartsOrded", items.PartsOrdered);
                                    cmdInsertVehicleRepairDescription.Parameters.AddWithValue("@IsCompleted", false);
                                    cmdInsertVehicleRepairDescription.Parameters.AddWithValue("@IsActive", items.IsActive);
                                    result = cmdInsertVehicleRepairDescription.ExecuteNonQuery();
                                    cmdInsertVehicleRepairDescription.Parameters.Clear();

                                    cmdGeVehicleRepairDescriptionID.Transaction = trans;
                                    id = Convert.ToInt32(cmdGeVehicleRepairDescriptionID.ExecuteScalar());
                                    cmdGeVehicleRepairDescriptionID.Parameters.Clear();
                                }

                                foreach (var itemz in items.Vehicleparts)
                                {
                                    if (itemz.PartID == 0)
                                    {
                                        if (itemz.VehicleRepairID > 0)
                                        {
                                            id = itemz.VehicleRepairID;
                                        }

                                        cmdInsertVehiclePartDescription.Transaction = trans;
                                        //cmdInsertVehiclePartDescription.Parameters.AddWithValue("@NewVehicleRepairID", id);
                                        cmdInsertVehiclePartDescription.Parameters.AddWithValue("@VehicleRepairID", id);
                                        cmdInsertVehiclePartDescription.Parameters.AddWithValue("@SequenceID", itemz.SequenceNumber);
                                        cmdInsertVehiclePartDescription.Parameters.AddWithValue("@Code", itemz.PartCode);
                                        cmdInsertVehiclePartDescription.Parameters.AddWithValue("@Description", itemz.PartDescription ?? (object)DBNull.Value);
                                        cmdInsertVehiclePartDescription.Parameters.AddWithValue("@IsActive", true);
                                        cmdInsertVehiclePartDescription.Parameters.AddWithValue("@Completed", false);
                                        result = cmdInsertVehiclePartDescription.ExecuteNonQuery();
                                        cmdInsertVehiclePartDescription.Parameters.Clear();
                                    }
                                }
                            }
                        }

                    }

                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("Error: Updating SalesOrder Required Date" + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return result;
        }

        public static List<VehicleCategory> CheckVehicleWorkOrderCompleted()
        {
            List<VehicleCategory> vcList = new List<VehicleCategory>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    using (SqlCommand cmd = new SqlCommand("SELECT * FROM VehicleCategory", conn))
                    {
                        conn.Open();
                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    VehicleCategory vc = new VehicleCategory();
                                    vc.ID = Convert.ToInt16(dr["id"]);
                                    vc.VehicleType = dr["vehicle_type"].ToString();
                                    vc.Active = Convert.ToBoolean(dr["active"]);
                                    vcList.Add(vc);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL Vehicle Category ERROR : " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return vcList;
        }

        public static ObservableCollection<ScheduledVehicle> GetVehiclesByCategoryID(int id, int locId)
        {
            ObservableCollection<ScheduledVehicle> vcList = new ObservableCollection<ScheduledVehicle>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    using (SqlCommand cmd = new SqlCommand("SELECT * FROM Vehicles WHERE vehicle_category_id=@ID AND stock_location_id=@LocID ORDER BY id", conn))
                    {
                        conn.Open();
                        cmd.Parameters.AddWithValue("@ID", id);
                        cmd.Parameters.AddWithValue("@LocID", locId);
                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    ScheduledVehicle sv = new ScheduledVehicle();
                                    sv.ID = Convert.ToInt16(dr["id"]);
                                    sv.StockLocation = new StockLocation() { ID = Convert.ToInt16(dr["id"]) };
                                    sv.VehicleCategory = new VehicleCategory() { ID = Convert.ToInt16(dr["vehicle_category_id"]) };
                                    sv.SerialNumber = dr["serial_number"].ToString();
                                    sv.VehicleCode = dr["vehicle_code"].ToString();
                                    sv.VehicleBrand = dr["vehicle_brand"].ToString();
                                    sv.VehicleDescription = dr["vehicle_description"].ToString();
                                    sv.Active = Convert.ToBoolean(dr["active"]);
                                    vcList.Add(sv);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL Vehicle Category ERROR : " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return vcList;
        }

        public static ObservableCollection<ScheduledVehicle> GetAllVehiclesByCategoryID(int id)
        {
            ObservableCollection<ScheduledVehicle> vcList = new ObservableCollection<ScheduledVehicle>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    using (SqlCommand cmd = new SqlCommand("SELECT * FROM Vehicles WHERE vehicle_category_id=@ID ORDER BY id", conn))
                    {
                        conn.Open();
                        cmd.Parameters.AddWithValue("@ID", id);
                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    ScheduledVehicle sv = new ScheduledVehicle();
                                    sv.ID = Convert.ToInt16(dr["id"]);
                                    sv.StockLocation = new StockLocation() { ID = Convert.ToInt16(dr["id"]) };
                                    sv.VehicleCategory = new VehicleCategory() { ID = Convert.ToInt16(dr["vehicle_category_id"]) };
                                    sv.SerialNumber = dr["serial_number"].ToString();
                                    sv.VehicleCode = dr["vehicle_code"].ToString();
                                    sv.VehicleBrand = dr["vehicle_brand"].ToString();
                                    sv.VehicleDescription = dr["vehicle_description"].ToString();
                                    sv.Active = Convert.ToBoolean(dr["active"]);
                                    vcList.Add(sv);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL Vehicle Category ERROR : " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return vcList;
        }


        public static List<Tuple<int, DateTime, Int32, int>> GetExistingVehiclesWorkFrequencies(DateTime date)
        {
            List<Tuple<int, DateTime, Int32, int>> freqList = new List<Tuple<int, DateTime, Int32, int>>();


            string newDate = date.ToString("yyyy-MM-dd");
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    using (SqlCommand cmd = new SqlCommand("SELECT id,vehicle_id,maintenance_frequency,next_service_date FROM VehicleWorkOrder  " +
                                                           "WHERE next_service_date >= @Date AND status ='Pending' " +
                                                           "ORDER BY next_service_date  ASC", conn))
                    {
                        conn.Open();
                        cmd.Parameters.AddWithValue("@Date", newDate);
                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    freqList.Add(Tuple.Create(CrateFrequencyList(dr["maintenance_frequency"].ToString()), Convert.ToDateTime(dr["next_service_date"]), Convert.ToInt32(dr["id"]), Convert.ToInt32(dr["vehicle_id"])));
                                    //freqList = Tuple.Create(CrateFrequencyList(dr["maintenance_frequency"].ToString()), Convert.ToDateTime(dr["next_service_date"]));


                                    //freqList = new Tuple<int, DateTime>(CrateFrequencyList(dr["maintenance_frequency"].ToString()), Convert.ToDateTime(dr["next_service_date"]));


                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL Vehicle Category ERROR : " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return freqList;
        }

        public static List<Tuple<Int32, int, DateTime>> CheckIfWorkOrderExist(int vid, DateTime nextAvaDate, DateTime nextAvaDateAfterAdition)
        {
            string nextAvaDateStr = nextAvaDate.ToString("yyyy-MM-dd");
            string nextAvaDateAfterAditionStr = nextAvaDateAfterAdition.ToString("yyyy-MM-dd");
            List<Tuple<Int32, int, DateTime>> avaList = new List<Tuple<Int32, int, DateTime>>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    using (SqlCommand cmd = new SqlCommand("SELECT id,next_service_date,maintenance_frequency FROM VehicleWorkOrder  " +
                                                           "WHERE vehicle_id = @VehicleID AND " +
                                                           "(next_service_date >= @NextAvaDateStr AND next_service_date <= @NextAvaDateAfterAditionStr) " +
                                                           "AND status ='Pending'", conn))
                    {
                        conn.Open();
                        cmd.Parameters.AddWithValue("@VehicleID", vid);
                        cmd.Parameters.AddWithValue("@NextAvaDateStr", nextAvaDateStr);
                        cmd.Parameters.AddWithValue("@NextAvaDateAfterAditionStr", nextAvaDateAfterAditionStr);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    avaList.Add(Tuple.Create(Convert.ToInt32(dr["id"]), CrateFrequencyList(dr["maintenance_frequency"].ToString()), Convert.ToDateTime(dr["next_service_date"])));
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL VehicleWorkOrder error : " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return avaList;
        }

        private static int CrateFrequencyList(string str)
        {
            int x = 0;
            switch (str)
            {
                case "1 Month": x = 1;
                    break;
                case "6 Months": x = 2;
                    break;
                case "1 Year": x = 3;
                    break;
                case "2 Years": x = 4;
                    break;
                default:
                    break;
            }

            return x;
        }


        public static int CencelVehicleWorkOrderCollection(List<Int32> cancelOrders)
        {
            int result = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdUpdateVehicleWorkOrder = new SqlCommand("UPDATE VehicleWorkOrder SET status = @Cancelled " +
                                                                      "WHERE id = @ID", conn);

                conn.Open();
                try
                {
                    foreach (var item in cancelOrders)
                    {
                        cmdUpdateVehicleWorkOrder.Parameters.AddWithValue("@ID", item);
                        cmdUpdateVehicleWorkOrder.Parameters.AddWithValue("@Cancelled", VehicleWorkOrderEnum.Cancelled.ToString());
                        result = cmdUpdateVehicleWorkOrder.ExecuteNonQuery();
                        cmdUpdateVehicleWorkOrder.Parameters.Clear();
                    }

                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error: Updating SalesOrder Required Date" + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return result;
        }


        public static List<StockLocation> GetStockLocations()
        {
            List<StockLocation> stockList = new List<StockLocation>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    using (SqlCommand cmd = new SqlCommand("SELECT * FROM StockLocation", conn))
                    {
                        conn.Open();
                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    StockLocation sl = new StockLocation();
                                    sl.ID = Convert.ToInt16(dr["id"]);
                                    sl.StockName = dr["stock_name"].ToString();
                                    sl.Address = dr["address"].ToString();
                                    sl.Suburb = dr["suburb"].ToString();
                                    sl.State = dr["state"].ToString();
                                    stockList.Add(sl);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL Vehicle Category ERROR : " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return stockList;
        }

        public static List<VehicleCategory> GetVehicleCategory()
        {
            List<VehicleCategory> vehicleCategoryList = new List<VehicleCategory>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    using (SqlCommand cmd = new SqlCommand("SELECT * FROM VehicleCategory", conn))
                    {
                        conn.Open();
                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    VehicleCategory vc = new VehicleCategory();
                                    vc.ID = Convert.ToInt16(dr["id"]);
                                    vc.VehicleType = dr["vehicle_type"].ToString();
                                    vc.Active = Convert.ToBoolean(dr["active"]);
                                    vehicleCategoryList.Add(vc);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL Vehicle Category ERROR : " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return vehicleCategoryList;
        }

        public static int InsertNewVehicle(Vehicle vehicle)
        {
            int result = 0;
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmd1 = new SqlCommand("INSERT INTO Vehicles(stock_location_id,vehicle_category_id,serial_number,vehicle_code,vehicle_brand,vehicle_description,active) " +
                                                 "VALUES (@StockLocationID,@VehicleCategoryID,@SerialNumber,@VehicleCode,@VehicleBrand,@VehicleDescription,@Active)", conn);

                SqlTransaction trans = null;
                conn.Open();

                try
                {
                    cmd1.Parameters.AddWithValue("@StockLocationID", vehicle.StockLocation.ID);
                    cmd1.Parameters.AddWithValue("@VehicleCategoryID", vehicle.VehicleCategory.ID);
                    cmd1.Parameters.AddWithValue("@SerialNumber", vehicle.SerialNumber);
                    cmd1.Parameters.AddWithValue("@VehicleCode", vehicle.VehicleCode);
                    cmd1.Parameters.AddWithValue("@VehicleBrand", vehicle.VehicleBrand);
                    cmd1.Parameters.AddWithValue("@VehicleDescription", vehicle.VehicleDescription);
                    cmd1.Parameters.AddWithValue("@Active", true);
                    result = cmd1.ExecuteNonQuery();

                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("Error adding data to products: " + e);
                }
                finally
                {
                    conn.Close();
                }
                return result;
            }

        }

        public static int UpdateVehicleMaintenanceInfo(int location, int maintenanceFrequency, string userName, ObservableCollection<VehicleMaintenanceInfo> vehicleMaintenanceInfo)
        {
            int res1 = 0;
            int res2 = 0;
            int result = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {

                SqlCommand cmdDeleteVehicleMainInfo = new SqlCommand("DELETE FROM VehicleMaintenanceInfo " +
                                                                     "WHERE location_id=@LocationID", conn);

                SqlCommand cmdInsertVehicleRepairDescription = new SqlCommand("INSERT INTO VehicleMaintenanceInfo(vehicle_maintenance_sequence_id,vehicle_category_id,location_id,code,description,active,created_date,created_by) " +
                                                                              "VALUES (@VehicleMaintenanceSequenceID,@VehicleCategoryID,@Location,@Code,@Description,@Active,@CreatedDate,@CreatedBy)", conn);

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {
                    cmdDeleteVehicleMainInfo.Transaction = trans;
                    cmdDeleteVehicleMainInfo.Parameters.AddWithValue("@LocationID", location);
                    res1 = cmdDeleteVehicleMainInfo.ExecuteNonQuery();

                    foreach (var item in vehicleMaintenanceInfo)
                    {
                        if (!string.IsNullOrWhiteSpace(item.Description))
                        {
                            cmdInsertVehicleRepairDescription.Transaction = trans;
                            cmdInsertVehicleRepairDescription.Parameters.AddWithValue("@VehicleMaintenanceSequenceID", item.VehicleMaintenanceSequence.ID);
                            cmdInsertVehicleRepairDescription.Parameters.AddWithValue("@VehicleCategoryID", item.VehicleCategory.ID);
                            cmdInsertVehicleRepairDescription.Parameters.AddWithValue("@Location", location);
                            cmdInsertVehicleRepairDescription.Parameters.AddWithValue("@Code", (item.Code == null ? item.SequenceStr : item.Code));
                            cmdInsertVehicleRepairDescription.Parameters.AddWithValue("@Description", item.Description);
                            cmdInsertVehicleRepairDescription.Parameters.AddWithValue("@Active", true);
                            cmdInsertVehicleRepairDescription.Parameters.AddWithValue("@CreatedDate", DateTime.Now);
                            cmdInsertVehicleRepairDescription.Parameters.AddWithValue("@CreatedBy", userName);
                            res2 = cmdInsertVehicleRepairDescription.ExecuteNonQuery();
                            cmdInsertVehicleRepairDescription.Parameters.Clear();
                        }
                    }

                    if (res1 > 0 && res2 > 0)
                    {
                        result = 1;
                    }

                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("Error: Updating SalesOrder Required Date" + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return result;
        }

        public static Vehicle GetVehiclesByVehicleID(int id)
        {
            Vehicle vehicle = new Vehicle();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    using (SqlCommand cmd = new SqlCommand("SELECT * FROM Vehicles WHERE id=@VehID", conn))
                    {
                        conn.Open();
                        cmd.Parameters.AddWithValue("@VehID", id);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {

                                    vehicle.ID = Convert.ToInt16(dr["id"]);
                                    vehicle.StockLocation = new StockLocation() { ID = Convert.ToInt16(dr["stock_location_id"]) };
                                    vehicle.VehicleCategory = new VehicleCategory() { ID = Convert.ToInt16(dr["vehicle_category_id"]) };
                                    vehicle.SerialNumber = dr["serial_number"].ToString();
                                    vehicle.VehicleCode = dr["vehicle_code"].ToString();
                                    vehicle.VehicleBrand = dr["vehicle_brand"].ToString();
                                    vehicle.VehicleDescription = dr["vehicle_description"].ToString();
                                    vehicle.Active = Convert.ToBoolean(dr["active"]);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL Vehicle ERROR : " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return vehicle;
        }

        public static int UpdateVehicle(Vehicle vehicle)
        {
            int result = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdUpdateVehicle = new SqlCommand("UPDATE Vehicles " +
                                                             "SET stock_location_id = @StockLocID,vehicle_category_id=@VehicleCatID,serial_number=@SerialNumber,vehicle_code=@VehicleCode,vehicle_brand=@VehicleBrand,vehicle_description=@VehDes,active=@Active " +
                                                             "WHERE id = @ID", conn);

                conn.Open();
                try
                {

                    cmdUpdateVehicle.Parameters.AddWithValue("@ID", vehicle.ID);
                    cmdUpdateVehicle.Parameters.AddWithValue("@StockLocID", vehicle.StockLocation.ID);
                    cmdUpdateVehicle.Parameters.AddWithValue("@VehicleCatID", vehicle.VehicleCategory.ID);
                    cmdUpdateVehicle.Parameters.AddWithValue("@SerialNumber", vehicle.SerialNumber);
                    cmdUpdateVehicle.Parameters.AddWithValue("@VehicleCode", vehicle.VehicleCode);
                    cmdUpdateVehicle.Parameters.AddWithValue("@VehicleBrand", vehicle.VehicleBrand);
                    cmdUpdateVehicle.Parameters.AddWithValue("@VehDes", vehicle.VehicleDescription);
                    cmdUpdateVehicle.Parameters.AddWithValue("@Active", vehicle.Active);
                    result = cmdUpdateVehicle.ExecuteNonQuery();

                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error: Updating SalesOrder Required Date" + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return result;
        }

        public static ObservableCollection<VehicleMaintenanceInfo> GetMaintenanceInfoByLocation(int loc)
        {
            ObservableCollection<VehicleMaintenanceInfo> vehicleMaintenanceInfo = new ObservableCollection<VehicleMaintenanceInfo>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT * FROM VehicleMaintenanceInfo " +
                                                                  "WHERE location_id=@Loc ORDER BY id", conn))
                    {
                        cmdGetData.Parameters.AddWithValue("@Loc", loc);
                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    VehicleMaintenanceInfo vmi = new VehicleMaintenanceInfo();
                                    vmi.ID = Convert.ToInt16(dr["id"]);
                                    vmi.VehicleMaintenanceSequence = new VehicleMaintenanceSequence() { ID = Convert.ToInt16(dr["vehicle_maintenance_sequence_id"]) };
                                    vmi.VehicleCategory = new VehicleCategory() { ID = Convert.ToInt16(dr["vehicle_category_id"]) };
                                    vmi.LocationID = Convert.ToInt16(dr["location_id"]);
                                    vmi.Code = dr["code"].ToString();
                                    vmi.Description = dr["description"].ToString();
                                    vmi.Active = Convert.ToBoolean(dr["active"]);
                                    vmi.CreatedDate = Convert.ToDateTime(dr["created_date"]);
                                    vmi.CreatedBy = dr["created_by"].ToString();
                                    vehicleMaintenanceInfo.Add(vmi);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading production line: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return vehicleMaintenanceInfo;
        }


        public static bool CheckWorkOrderExistBeforInsert(int vId, DateTime sDate, DateTime eDate)
        {
            bool exist = false;
            string startDate = sDate.ToString("yyyy-MM-dd");
            string endDate = eDate.ToString("yyyy-MM-dd");

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    using (SqlCommand cmd = new SqlCommand("SELECT COUNT(*) FROM VehicleWorkOrder  " +
                                                           "WHERE vehicle_id = @VehicleID AND (next_service_date >= @StartDate AND next_service_date <= @EndDate) " +
                                                           "AND status ='Pending'", conn))
                    {
                        conn.Open();
                        cmd.Parameters.AddWithValue("@VehicleID", vId);
                        cmd.Parameters.AddWithValue("@StartDate", startDate);
                        cmd.Parameters.AddWithValue("@EndDate", endDate);

                        int userCount = (int)cmd.ExecuteScalar();
                        exist = userCount > 0 ? true : false;
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL VehicleWorkOrder error : " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return exist;
        }

        public static ObservableCollection<MachineMaintenanceInfo> GetMachineMaintenanceInfo()
        {
            ObservableCollection<MachineMaintenanceInfo> machineMaintenanceInfo = new ObservableCollection<MachineMaintenanceInfo>();
            double x = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdSelect = new SqlCommand("SELECT MachineMaintenanceInfo.id,MachineMaintenanceInfo.machine_id,Machines.machine_name,Machines.type,Machines.machine_description,MachineMaintenanceInfo.machine_maintenance_freq_id,MachineMaintenanceFrequency.frequency,MachineMaintenanceInfo.machine_code,MachineMaintenanceInfo.machine_description AS MaintenanceDes,MachineMaintenanceInfo.repetition,MachineMaintenanceInfo.created_date,MachineMaintenanceInfo.created_by,MachineMaintenanceInfo.active,MachineMaintenanceInfo.order_type " +
                                                      "FROM MachineMaintenanceInfo " +
                                                      "INNER JOIN Machines ON MachineMaintenanceInfo.machine_id = Machines.machine_id " +
                                                      "INNER JOIN MachineMaintenanceFrequency ON MachineMaintenanceInfo.machine_maintenance_freq_id = MachineMaintenanceFrequency.id", conn);

                conn.Open();
                try
                {
                    //cmdSelect.Parameters.AddWithValue("@LocId", id);
                    using (SqlDataReader dr = cmdSelect.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    MachineMaintenanceInfo m = new MachineMaintenanceInfo();
                                    m.ID = Convert.ToInt16(dr["id"]);
                                    m.Machine = new Machines(0) { MachineID = Convert.ToInt16(dr["machine_id"]), MachineName = dr["machine_name"].ToString(), MachineType = dr["type"].ToString(), MachineDescription = dr["machine_description"].ToString() };
                                    m.MachineMaintenanceFrequency = new MachineMaintenanceFrequency() { ID = Convert.ToInt16(dr["machine_maintenance_freq_id"]), Frequency = dr["frequency"].ToString() };
                                    m.MachineCode = dr["machine_code"].ToString();
                                    m.MachineDescription = dr["MaintenanceDes"].ToString();
                                    m.Repetition = dr["repetition"].ToString();
                                    m.CreatedDate = Convert.ToDateTime(dr["created_date"]);
                                    m.CreatedBy = dr["created_by"].ToString();
                                    m.IsActive = Convert.ToBoolean(dr["active"]);
                                    m.OrderType = dr["order_type"].ToString();
                                    machineMaintenanceInfo.Add(m);
                                }
                            }
                        }
                    }

                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL UPDATE COMMAND ERROR OCCURED :  Updating Orders table" + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return machineMaintenanceInfo;
        }


        public static ObservableCollection<MachineMaintenanceInfo> GetMachineMaintenanceInfoBySequence(int machineId, int machineMainFreId,string orderType)
        {
            ObservableCollection<MachineMaintenanceInfo> machineMaintenanceInfo = new ObservableCollection<MachineMaintenanceInfo>();
         
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT MachineMaintenanceInfo.id,MachineMaintenanceInfo.machine_id, " + 
                                                                  "MachineMaintenanceInfo.machine_maintenance_freq_id,MachineMaintenanceInfo.machine_code, " + 
                                                                  "MachineMaintenanceInfo.machine_description,MachineMaintenanceInfo.repetition, " + 
                                                                  "MachineMaintenanceInfo.created_date,MachineMaintenanceInfo.created_by, " +
                                                                  "MachineMaintenanceInfo.active, MachineMaintenanceInfo.order_type,MachineMaintenanceInfo.provider_id,MachineMaintenanceInfo.show_order_before_days " +
                                                                  "FROM MachineMaintenanceInfo " +
                                                                  "WHERE MachineMaintenanceInfo.machine_id=@MachineID AND MachineMaintenanceInfo.machine_maintenance_freq_id=@MMSID AND MachineMaintenanceInfo.order_type=@OrderType", conn))
                    {
                        cmdGetData.Parameters.AddWithValue("@MachineID", machineId);
                        cmdGetData.Parameters.AddWithValue("@MMSID", machineMainFreId);
                        cmdGetData.Parameters.AddWithValue("@OrderType", orderType);
                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    MachineMaintenanceInfo mmi = new MachineMaintenanceInfo();
                                    mmi.ID = Convert.ToInt16(dr["id"]);
                                    mmi.Machine = new Machines(0) { MachineID = Convert.ToInt16(dr["machine_id"]) };
                                    mmi.MachineMaintenanceFrequency = new MachineMaintenanceFrequency() { ID = Convert.ToInt16(dr["machine_maintenance_freq_id"]) };
                                    mmi.MachineCode = dr["machine_code"].ToString();
                                    mmi.MachineDescription = dr["machine_description"].ToString();
                                    mmi.Repetition = dr["repetition"].ToString();
                                    mmi.CreatedDate = Convert.ToDateTime(dr["created_date"]);
                                    mmi.CreatedBy = dr["created_by"].ToString();
                                    mmi.IsActive = Convert.ToBoolean(dr["active"]);
                                    mmi.OrderType = dr["order_type"].ToString();
                                    mmi.ProviderID = Convert.ToInt16(dr["provider_id"]);
                                    mmi.ShowOrderBeforeDays = Convert.ToInt16(dr["show_order_before_days"]);
                                    machineMaintenanceInfo.Add(mmi);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading machineMaintenanceInfo: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return machineMaintenanceInfo;
        }


        public static ObservableCollection<MachineMaintenanceInfo> GetMachineMaintenanceInfoMachine(int machineID)
        {
            ObservableCollection<MachineMaintenanceInfo> machineMaintenanceInfo = new ObservableCollection<MachineMaintenanceInfo>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT * FROM MachineMaintenanceInfo " +
                                                                  "WHERE machine_id=@MachineID ORDER BY machine_maintenance_freq_id", conn))
                    {
                        cmdGetData.Parameters.AddWithValue("@MachineID", machineID);
                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    MachineMaintenanceInfo mmi = new MachineMaintenanceInfo();
                                    mmi.ID = Convert.ToInt16(dr["id"]);
                                    mmi.Machine = new Machines(0) { MachineID = Convert.ToInt16(dr["machine_id"]) };
                                    mmi.MachineMaintenanceFrequency = new MachineMaintenanceFrequency() { ID = Convert.ToInt16(dr["machine_maintenance_freq_id"]) };
                                    mmi.MachineCode = dr["machine_code"].ToString();
                                    mmi.MachineDescription = dr["machine_description"].ToString();
                                    mmi.Repetition = dr["repetition"].ToString();
                                    mmi.CreatedDate = Convert.ToDateTime(dr["created_date"]);
                                    mmi.CreatedBy = dr["created_by"].ToString();
                                    mmi.LastDate = Convert.ToDateTime(dr["last_completed_date"]);
                                    mmi.IsActive = Convert.ToBoolean(dr["active"]);
                                    mmi.OrderType = dr["order_type"].ToString();
                                    mmi.ProviderID = Convert.ToInt16(dr["provider_id"]);
                                    mmi.ShowOrderBeforeDays = Convert.ToInt16(dr["show_order_before_days"]);
                                    machineMaintenanceInfo.Add(mmi);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading production line: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return machineMaintenanceInfo;
        }


        public static int UpdateMachineMaintenanceInfo(int machineId, string userName, ObservableCollection<MachineMaintenanceInfo> machineMaintenanceInfo,List<long> removedList)
        {
            List<int> delRes = new List<int>();
            List<int> mmiRes = new List<int>();
            int result = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {

                SqlCommand cmdDeleteMachineMainInfo = new SqlCommand("DELETE FROM MachineMaintenanceInfo " +
                                                                     "WHERE id=@ID ", conn);

                SqlCommand cmdInsertMachineMaintWorkDes = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM MachineMaintenanceInfo " +
                                                                         "WHERE  id = @ID) " +
                                                                         "INSERT INTO MachineMaintenanceInfo(machine_id,machine_maintenance_freq_id,machine_code,machine_description,repetition,created_date,last_completed_date,created_by,active,order_type,provider_id,show_order_before_days) " +
                                                                         "VALUES (@MachineID,@MachineMaintenanceFreqID,@MachineCode,@MachineDescription,@Repetition,@CreatedDate,@LastCompletedDate,@CreatedBy,@Active,@OrderType,@ProviderID,@ShowOrderBeforeDays) " +
                                                                         "ELSE " +
                                                                         "UPDATE MachineMaintenanceInfo SET machine_id=@MachineID,machine_maintenance_freq_id=@MachineMaintenanceFreqID,machine_code = @MachineCode,machine_description = @MachineDescription,repetition=@Repetition,created_date=@CreatedDate,created_by=@CreatedBy,last_completed_date=@LastCompletedDate,order_type=@OrderType,provider_id=@ProviderID,show_order_before_days=@ShowOrderBeforeDays " +
                                                                         "WHERE id = @ID AND ( machine_id <> @MachineID OR machine_maintenance_freq_id <> @MachineMaintenanceFreqID OR machine_code <> @MachineCode OR machine_description <> @MachineDescription OR repetition <> @Repetition OR order_type <> @OrderType OR provider_id <> @ProviderID OR show_order_before_days <> @ShowOrderBeforeDays)", conn);

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {
                    foreach (var item in removedList)
                    {
                        cmdDeleteMachineMainInfo.Transaction = trans;
                        cmdDeleteMachineMainInfo.Parameters.AddWithValue("@ID", item);
                        delRes.Add(cmdDeleteMachineMainInfo.ExecuteNonQuery());
                        cmdDeleteMachineMainInfo.Parameters.Clear();
                    }
                    

                    foreach (var item in machineMaintenanceInfo)
                    {
                        if (!string.IsNullOrWhiteSpace(item.MachineDescription))
                        {
                            cmdInsertMachineMaintWorkDes.Transaction = trans;
                            cmdInsertMachineMaintWorkDes.Parameters.AddWithValue("@ID", item.ID);
                            cmdInsertMachineMaintWorkDes.Parameters.AddWithValue("@MachineID", item.Machine.MachineID);
                            cmdInsertMachineMaintWorkDes.Parameters.AddWithValue("@MachineMaintenanceFreqID", item.MachineMaintenanceFrequency.ID);
                            cmdInsertMachineMaintWorkDes.Parameters.AddWithValue("@MachineCode", item.MachineCode);
                            cmdInsertMachineMaintWorkDes.Parameters.AddWithValue("@MachineDescription", item.MachineDescription);
                            cmdInsertMachineMaintWorkDes.Parameters.AddWithValue("@Repetition", item.Repetition ?? (object)DBNull.Value);
                            cmdInsertMachineMaintWorkDes.Parameters.AddWithValue("@CreatedDate", DateTime.Now);
                            cmdInsertMachineMaintWorkDes.Parameters.AddWithValue("@CreatedBy", userName);
                            cmdInsertMachineMaintWorkDes.Parameters.AddWithValue("@LastCompletedDate", item.LastDate.Date);
                            cmdInsertMachineMaintWorkDes.Parameters.AddWithValue("@Active", true);
                            cmdInsertMachineMaintWorkDes.Parameters.AddWithValue("@OrderType", item.OrderType);
                            cmdInsertMachineMaintWorkDes.Parameters.AddWithValue("@ProviderID", item.ProviderID);
                            cmdInsertMachineMaintWorkDes.Parameters.AddWithValue("@ShowOrderBeforeDays", item.ShowOrderBeforeDays);
                            mmiRes.Add(cmdInsertMachineMaintWorkDes.ExecuteNonQuery());
                            cmdInsertMachineMaintWorkDes.Parameters.Clear();
                        }
                    }

                    if (delRes.Any(x=>x > 0) || mmiRes.Any(x=>x > 0))
                    {
                        result = 1;
                    }
                    else
                    {
                        result = -1;
                    }

                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("Error: Updating SalesOrder Required Date" + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return result;
        }


        public static int CreateMachineWorkOrder(string userName, List<MachineWorkOrder> machineWorkOrderList, string selectedOrderType, int providerID,
            ObservableCollection<MachineMaintenanceInfo> machineMaintenanceInfo, List<long> removedList)
        {
            List<int> delRes = new List<int>();
            List<int> mmiRes = new List<int>();
            int noOfRecs = 0;            
            Int32 workOrderId = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdInsertMachineWorkOrder = null;
                if (selectedOrderType.Equals("Internal"))
                {
                    cmdInsertMachineWorkOrder = new SqlCommand("INSERT INTO MachineMaintenanceWorkOrder(machine_id,user_id,urgency,work_order_type,maintenance_freq,maintenance_freq_str,first_service_date,next_service_date,created_date,created_by,is_completed,completed_by,status, order_type, provider_id,external_mechanic_name,reasons ) " +
                                                               "VALUES (@MachineID,@UserID,@Urgency,@WorkOrderType,@MaintenanceFreqID,@MaintenanceFreq,@FirstServiceDate,@NextServiceDate,@CreatedDate,@CreatedBy,@IsCompleted,@CompletedBy,@Status, @OrderType, @ProviderID,@ExternalMechanic,@Reasons)", conn);
                }
                else
                {
                    cmdInsertMachineWorkOrder = new SqlCommand("INSERT INTO MachineMaintenanceWorkOrder(machine_id,user_id,urgency,work_order_type,maintenance_freq,maintenance_freq_str,first_service_date,next_service_date,created_date,created_by,is_completed,completed_by,status, order_type, provider_id, show_order_date,external_mechanic_name,reasons ) " +
                                                               "VALUES (@MachineID,@UserID,@Urgency,@WorkOrderType,@MaintenanceFreqID,@MaintenanceFreq,@FirstServiceDate,@NextServiceDate,@CreatedDate,@CreatedBy,@IsCompleted,@CompletedBy,@Status, @OrderType, @ProviderID, @ShowOrderDate,@ExternalMechanic,@Reasons)", conn);

                }

                SqlCommand cmdGeMachineWorkOrderID = new SqlCommand("SELECT MAX(id) FROM MachineMaintenanceWorkOrder", conn);

                SqlCommand cmdInsertMachineWorkDescription = new SqlCommand("INSERT INTO MachineWorkDescription(machine_work_order_id,machine_maintenance_info_id,machine_repair_work_order_id,code,description,is_completed,active) " +
                                                                            "VALUES (@MachineWorkOrderID,@MachineMaintenanceInfoID,@MachineRepairWorkOrderID,@Code,@Description,@IsCompleted,@Active)", conn);

                //SqlCommand cmdDeleteMachineMainInfo = new SqlCommand("DELETE FROM MachineMaintenanceInfo " +
                //                                                     "WHERE id=@ID ", conn);

                //SqlCommand cmdInsertVehicleRepairDescription = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM MachineMaintenanceInfo " +
                //                                                              "WHERE  id = @ID) " +
                //                                                              "INSERT INTO MachineMaintenanceInfo(machine_id,machine_maintenance_freq_id,machine_code,machine_description,repetition,created_date,last_completed_date,created_by,active,order_type,provider_id,show_order_before_days) " +
                //                                                              "VALUES (@MachineID,@MachineMaintenanceFreqID,@MachineCode,@MachineDescription,@Repetition,@CreatedDate,@LastCompletedDate,@CreatedBy,@Active,@OrderType,@ProviderID,@ShowOrderBeforeDays) " +
                //                                                              "ELSE " +
                //                                                              "UPDATE MachineMaintenanceInfo SET machine_description = @MachineDescription,repetition=@Repetition,created_date=@CreatedDate,created_by=@CreatedBy,last_completed_date=@LastCompletedDate,order_type=@OrderType,provider_id=@ProviderID,show_order_before_days=@ShowOrderBeforeDays " +
                //                                                              "WHERE id = @ID AND (machine_description <> @MachineDescription OR repetition <> @Repetition OR order_type <> @OrderType OR provider_id <> @ProviderID OR show_order_before_days <> @ShowOrderBeforeDays)", conn);

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {                   

                    foreach (var item in machineWorkOrderList)
                    {
                        cmdInsertMachineWorkOrder.Transaction = trans;
                        cmdInsertMachineWorkOrder.Parameters.AddWithValue("@MachineID", item.Machine.MachineID);
                        cmdInsertMachineWorkOrder.Parameters.AddWithValue("@UserID", item.User.ID);
                        cmdInsertMachineWorkOrder.Parameters.AddWithValue("@Urgency", item.Urgency);
                        cmdInsertMachineWorkOrder.Parameters.AddWithValue("@WorkOrderType", item.WorkOrderType);
                        cmdInsertMachineWorkOrder.Parameters.AddWithValue("@MaintenanceFreqID", item.MachineMaintenanceFrequency.ID);
                        cmdInsertMachineWorkOrder.Parameters.AddWithValue("@MaintenanceFreq", item.MachineMaintenanceFrequency.Frequency);
                        cmdInsertMachineWorkOrder.Parameters.AddWithValue("@FirstServiceDate", item.FirstServiceDate);
                        cmdInsertMachineWorkOrder.Parameters.AddWithValue("@NextServiceDate", item.NextServiceDate);
                        cmdInsertMachineWorkOrder.Parameters.AddWithValue("@CreatedDate", DateTime.Now);
                        cmdInsertMachineWorkOrder.Parameters.AddWithValue("@CreatedBy", userName);
                        cmdInsertMachineWorkOrder.Parameters.AddWithValue("@IsCompleted", false);
                        cmdInsertMachineWorkOrder.Parameters.AddWithValue("@CompletedBy", string.Empty);
                        cmdInsertMachineWorkOrder.Parameters.AddWithValue("@Status", item.Status);
                        cmdInsertMachineWorkOrder.Parameters.AddWithValue("@OrderType", selectedOrderType);
                        cmdInsertMachineWorkOrder.Parameters.AddWithValue("@ProviderID", providerID);
                        if (selectedOrderType.Equals("External"))
                        {
                            cmdInsertMachineWorkOrder.Parameters.AddWithValue("@ShowOrderDate", Convert.ToDateTime(item.ShowOrderDate).Date);
                        }
                        cmdInsertMachineWorkOrder.Parameters.AddWithValue("@ExternalMechanic", item.ExternalMechanicName);
                        cmdInsertMachineWorkOrder.Parameters.AddWithValue("@Reasons", item.Reason);
                        cmdInsertMachineWorkOrder.ExecuteNonQuery();
                        cmdInsertMachineWorkOrder.Parameters.Clear();

                        cmdGeMachineWorkOrderID.Transaction = trans;
                        workOrderId = Convert.ToInt32(cmdGeMachineWorkOrderID.ExecuteScalar());
                        cmdGeMachineWorkOrderID.Parameters.Clear();

                        foreach (var items in item.MachineMaintenanceInfo)
                        {
                            cmdInsertMachineWorkDescription.Transaction = trans;
                            cmdInsertMachineWorkDescription.Parameters.AddWithValue("@MachineWorkOrderID", workOrderId);
                            cmdInsertMachineWorkDescription.Parameters.AddWithValue("@MachineMaintenanceInfoID", items.ID);
                            cmdInsertMachineWorkDescription.Parameters.AddWithValue("@MachineRepairWorkOrderID", 0);
                            cmdInsertMachineWorkDescription.Parameters.AddWithValue("@Code", items.MachineCode);
                            cmdInsertMachineWorkDescription.Parameters.AddWithValue("@Description", items.MachineDescription);
                            cmdInsertMachineWorkDescription.Parameters.AddWithValue("@IsCompleted", false);
                            cmdInsertMachineWorkDescription.Parameters.AddWithValue("@Active", true);
                            cmdInsertMachineWorkDescription.ExecuteNonQuery();
                            cmdInsertMachineWorkDescription.Parameters.Clear();
                        }

                        noOfRecs++;
                    }

                    //foreach (var item in removedList)
                    //{
                    //    cmdDeleteMachineMainInfo.Transaction = trans;
                    //    cmdDeleteMachineMainInfo.Parameters.AddWithValue("@ID", item);
                    //    delRes.Add(cmdDeleteMachineMainInfo.ExecuteNonQuery());
                    //}

                    //foreach (var item in machineMaintenanceInfo)
                    //{
                    //    if (!string.IsNullOrWhiteSpace(item.MachineDescription))
                    //    {
                    //        cmdInsertVehicleRepairDescription.Transaction = trans;
                    //        cmdInsertVehicleRepairDescription.Parameters.AddWithValue("@ID", item.ID);
                    //        cmdInsertVehicleRepairDescription.Parameters.AddWithValue("@MachineID", item.Machine.MachineID);
                    //        cmdInsertVehicleRepairDescription.Parameters.AddWithValue("@MachineMaintenanceFreqID", item.MachineMaintenanceFrequency.ID);
                    //        cmdInsertVehicleRepairDescription.Parameters.AddWithValue("@MachineCode", item.MachineCode);
                    //        cmdInsertVehicleRepairDescription.Parameters.AddWithValue("@MachineDescription", item.MachineDescription);
                    //        cmdInsertVehicleRepairDescription.Parameters.AddWithValue("@Repetition", item.Repetition ?? (object)DBNull.Value);
                    //        cmdInsertVehicleRepairDescription.Parameters.AddWithValue("@CreatedDate", DateTime.Now);
                    //        cmdInsertVehicleRepairDescription.Parameters.AddWithValue("@CreatedBy", userName);
                    //        cmdInsertVehicleRepairDescription.Parameters.AddWithValue("@LastCompletedDate", item.LastDate.Date);
                    //        cmdInsertVehicleRepairDescription.Parameters.AddWithValue("@Active", true);
                    //        cmdInsertVehicleRepairDescription.Parameters.AddWithValue("@OrderType", item.OrderType);
                    //        cmdInsertVehicleRepairDescription.Parameters.AddWithValue("@ProviderID", item.ProviderID);
                    //        cmdInsertVehicleRepairDescription.Parameters.AddWithValue("@ShowOrderBeforeDays", item.ShowOrderBeforeDays);
                    //        mmiRes.Add(cmdInsertVehicleRepairDescription.ExecuteNonQuery());
                    //        cmdInsertVehicleRepairDescription.Parameters.Clear();
                    //    }
                    //}

                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("Error: Inserting Machine WorkOrder" + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return noOfRecs;
        }

        public static ObservableCollection<MachineWorkOrder> GetAllMachineWorkOrders()
        {
            ObservableCollection<MachineWorkOrder> machineWorkOrders = new ObservableCollection<MachineWorkOrder>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT * FROM MachineMaintenanceWorkOrder " +
                                                                  "WHERE status=@Status AND is_completed=@IsCompleted ORDER BY next_service_date", conn))
                    {
                        cmdGetData.Parameters.AddWithValue("@Status", VehicleWorkOrderEnum.Pending.ToString());
                        cmdGetData.Parameters.AddWithValue("@IsCompleted", false);
                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    DateTime? dt = dr["completed_date"] as DateTime?;

                                    MachineWorkOrder mwo = new MachineWorkOrder();
                                    mwo.WorkOrderNo = Convert.ToInt32(dr["id"]);
                                    mwo.Machine = new Machines(0) { MachineID = Convert.ToInt16(dr["machine_id"]) };
                                    mwo.User = new User() { ID = Convert.ToInt16(dr["user_id"]) };
                                    mwo.Urgency = Convert.ToInt16(dr["urgency"]);
                                    mwo.WorkOrderType = dr["work_order_type"].ToString();
                                    mwo.MachineMaintenanceFrequency = new MachineMaintenanceFrequency() { ID = Convert.ToInt16(dr["maintenance_freq"]) };
                                    mwo.FirstServiceDate = Convert.ToDateTime(dr["first_service_date"]);
                                    mwo.NextServiceDate = Convert.ToDateTime(dr["next_service_date"]);
                                    mwo.CreatedDate = Convert.ToDateTime(dr["created_date"]);
                                    mwo.CreatedBy = dr["created_by"].ToString();
                                    mwo.IsCompleted = Convert.ToBoolean(dr["is_completed"]);
                                    mwo.CompletedDate = dt;
                                    mwo.CompletedBy = dr["completed_by"].ToString();
                                    mwo.Status = dr["status"].ToString();
                                    mwo.MachineProvider = new MachineProvider() { ProviderID = CheckNull<int>(dr["provider_id"]) };
                                    mwo.OrderType = dr["order_type"].ToString();
                                    machineWorkOrders.Add(mwo);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading production line: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return machineWorkOrders;
        }

        public static ObservableCollection<MachineWorkOrder> GetMachineWorkOrdersByDate(DateTime sd)
        {
            string currDate = DateTime.Now.ToString("yyyy-MM-dd");
            string searchDate = sd.ToString("yyyy-MM-dd");
            
            string wstr = string.Empty;
            if(DateTime.Now.Date == sd.Date)
            {
                wstr = "((MachineMaintenanceWorkOrder.order_type='Internal' AND CONVERT(date,MachineMaintenanceWorkOrder.next_service_date) <= @CurrDate) OR (MachineMaintenanceWorkOrder.order_type='External' AND CONVERT(date,MachineMaintenanceWorkOrder.show_order_date) <= @SearchDate)) AND ";

            }
            else
            {
                wstr = "((MachineMaintenanceWorkOrder.order_type='Internal' AND CONVERT(date,MachineMaintenanceWorkOrder.next_service_date) <= @SearchDate) OR (MachineMaintenanceWorkOrder.order_type='External' AND CONVERT(date,MachineMaintenanceWorkOrder.show_order_date) <= @SearchDate)) AND ";

            }

            ObservableCollection<MachineWorkOrder> machineWorkOrderList = new ObservableCollection<MachineWorkOrder>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                conn.Open();
                try
                {
                    SqlCommand cmdGetData = new SqlCommand("SELECT MachineMaintenanceWorkOrder.id,MachineMaintenanceWorkOrder.machine_id,Machines.machine_name,Machines.type,MachineMaintenanceWorkOrder.user_id,Users.FirstName,Users.LastName,MachineMaintenanceWorkOrder.urgency,MachineMaintenanceWorkOrder.work_order_type,MachineMaintenanceWorkOrder.first_service_date, " +
                                                           "MachineMaintenanceWorkOrder.maintenance_freq,MachineMaintenanceWorkOrder.maintenance_freq_str,MachineMaintenanceWorkOrder.next_service_date,MachineMaintenanceWorkOrder.created_date,MachineMaintenanceWorkOrder.created_by,MachineMaintenanceWorkOrder.is_completed, " +
                                                           "MachineMaintenanceWorkOrder.completed_date,MachineMaintenanceWorkOrder.completed_by,MachineMaintenanceWorkOrder.status, " +
                                                           "MachineGroup.group_id,MachineGroup.group_name,MachineGroup.group_active, MachineMaintenanceWorkOrder.order_type, MachineMaintenanceWorkOrder.show_order_date, MachineMaintenanceWorkOrder.provider_id " +
                                                           "FROM MachineMaintenanceWorkOrder " +
                                                           "INNER JOIN Machines ON MachineMaintenanceWorkOrder.machine_id = Machines.machine_id " +
                                                           "LEFT JOIN Users ON MachineMaintenanceWorkOrder.user_id = Users.ID " +
                                                           "LEFT JOIN MachineGroup ON Machines.group_id = MachineGroup.group_id " +
                                                           "WHERE " + wstr + " MachineMaintenanceWorkOrder.is_completed ='false' AND (MachineMaintenanceWorkOrder.status <> 'Cancelled' AND MachineMaintenanceWorkOrder.status <> 'Completed' AND MachineMaintenanceWorkOrder.status <> 'Not Completed') " +
                                                           "ORDER BY MachineMaintenanceWorkOrder.next_service_date,MachineMaintenanceWorkOrder.urgency", conn);


                    cmdGetData.Parameters.AddWithValue("@CurrDate", currDate);
                    cmdGetData.Parameters.AddWithValue("@SearchDate", searchDate);
                    using (SqlDataReader dr = cmdGetData.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                MachineGroup mg = new MachineGroup();
                                if (Convert.ToInt16(dr["maintenance_freq"]) != 7)
                                {

                                    mg.GroupID = CheckNull<int>(dr["group_id"]);
                                    mg.GroupName = dr["group_name"].ToString();
                                    mg.GroupActive = CheckNull<bool>(dr["group_active"]);
                                }

                                DateTime? dt = dr["completed_date"] as DateTime?;
                                MachineWorkOrder vwo = new MachineWorkOrder();
                                vwo.WorkOrderNo = Convert.ToInt32(dr["id"]);
                                vwo.FirstServiceDate = Convert.ToDateTime(dr["first_service_date"]);
                                vwo.Machine = new Machines(0) { MachineID = Convert.ToInt16(dr["machine_id"]), MachineName = dr["machine_name"].ToString(), MachineType = dr["type"].ToString(), MachineGroup = mg };
                                vwo.User = new User() { ID = Convert.ToInt16(dr["user_id"]), FullName = dr["FirstName"].ToString() + " " + dr["LastName"].ToString() };
                                vwo.Urgency = Convert.ToInt16(dr["urgency"]);
                                vwo.WorkOrderType = dr["work_order_type"].ToString();
                                vwo.MachineMaintenanceFrequency = new MachineMaintenanceFrequency() { ID = Convert.ToInt16(dr["maintenance_freq"]), Frequency = dr["maintenance_freq_str"].ToString() };
                                vwo.NextServiceDate = Convert.ToDateTime(dr["next_service_date"]);
                                vwo.CreatedDate = Convert.ToDateTime(dr["created_date"]);
                                vwo.CreatedBy = dr["created_by"].ToString();
                                vwo.IsCompleted = Convert.ToBoolean(dr["is_completed"]);
                                vwo.CompletedDate = dt;
                                vwo.UrgencyStr = Convert.ToInt16(dr["urgency"]) == 1 ? "Urgent" : "Normal";
                                vwo.OrderType = string.IsNullOrWhiteSpace(dr["order_type"].ToString()) ? "Internal" : dr["order_type"].ToString();
                                vwo.ShowOrderDate = CheckNull<DateTime>(dr["show_order_date"]);
                                //vwo.MachineProvider = new MachineProvider() { ProviderID = (string.IsNullOrWhiteSpace(dr["provider_id"].ToString()))? 0 : Convert.ToInt16(dr["provider_id"]) };
                                vwo.MachineProvider = new MachineProvider() { ProviderID = CheckNull<int>(dr["provider_id"]) };

                                machineWorkOrderList.Add(vwo);
                            }
                        }
                    }
                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return machineWorkOrderList;
        }


        public static ObservableCollection<MachineWorkOrder> GetMiscelaniousMachineWorkOrdersByDate(DateTime searchDate)
        {
            string nDate = searchDate.ToString("yyyy-MM-dd");
            string currDate = DateTime.Now.ToString("yyyy-MM-dd");
            string op = "=";

            if (nDate == currDate)
            {
                op = "<=";
            }

            ObservableCollection<MachineWorkOrder> machineWorkOrderList = new ObservableCollection<MachineWorkOrder>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                conn.Open();
                try
                {
                    SqlCommand cmdGetData = new SqlCommand("SELECT MachineMaintenanceWorkOrder.id,MachineMaintenanceWorkOrder.machine_id,MachineMaintenanceWorkOrder.user_id,Users.FirstName,Users.LastName,MachineMaintenanceWorkOrder.urgency,MachineMaintenanceWorkOrder.work_order_type,MachineMaintenanceWorkOrder.first_service_date, MachineMaintenanceWorkOrder.order_type, " +
                                                           "MachineMaintenanceWorkOrder.maintenance_freq,MachineMaintenanceWorkOrder.maintenance_freq_str,MachineMaintenanceWorkOrder.next_service_date,MachineMaintenanceWorkOrder.created_date,MachineMaintenanceWorkOrder.created_by,MachineMaintenanceWorkOrder.is_completed, " +
                                                           "MachineMaintenanceWorkOrder.completed_date,MachineMaintenanceWorkOrder.completed_by,MachineMaintenanceWorkOrder.status " +
                                                           "FROM MachineMaintenanceWorkOrder " +
                                                           "LEFT JOIN Users ON MachineMaintenanceWorkOrder.user_id = Users.ID " +
                                                           "WHERE (MachineMaintenanceWorkOrder.next_service_date" + op + "@DateSearch OR MachineMaintenanceWorkOrder.show_order_date " + op + "@DateSearch) AND MachineMaintenanceWorkOrder.is_completed ='false' AND (MachineMaintenanceWorkOrder.status <> 'Cancelled' AND MachineMaintenanceWorkOrder.status <> 'Completed') AND MachineMaintenanceWorkOrder.machine_id=0 " +
                                                           "ORDER BY MachineMaintenanceWorkOrder.next_service_date,MachineMaintenanceWorkOrder.urgency", conn);

                                                            


                    cmdGetData.Parameters.AddWithValue("@DateSearch", nDate);
                    //cmdGetData.Parameters.AddWithValue("@State", state);
                    using (SqlDataReader dr = cmdGetData.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                MachineGroup mg = new MachineGroup();
                                if (Convert.ToInt16(dr["maintenance_freq"]) != 7)
                                {

                                    mg.GroupID = 0;
                                    mg.GroupName = "Ungrouped";
                                    mg.GroupActive = true;
                                }

                                DateTime? dt = dr["completed_date"] as DateTime?;
                                MachineWorkOrder vwo = new MachineWorkOrder();
                                vwo.WorkOrderNo = Convert.ToInt32(dr["id"]);
                                vwo.FirstServiceDate = Convert.ToDateTime(dr["first_service_date"]);
                                vwo.Machine = new Machines(0) { MachineID = 0, MachineName = "Miscellaneous Work Order", MachineType = "Miscellaneous", MachineGroup = mg };
                                vwo.User = new User() { ID = Convert.ToInt16(dr["user_id"]), FullName = dr["FirstName"].ToString() + " " + dr["LastName"].ToString() };
                                vwo.Urgency = Convert.ToInt16(dr["urgency"]);
                                vwo.WorkOrderType = dr["work_order_type"].ToString();
                                vwo.MachineMaintenanceFrequency = new MachineMaintenanceFrequency() { ID = Convert.ToInt16(dr["maintenance_freq"]), Frequency = dr["maintenance_freq_str"].ToString() };
                                vwo.NextServiceDate = Convert.ToDateTime(dr["next_service_date"]);

                                vwo.CreatedDate = Convert.ToDateTime(dr["created_date"]);
                                vwo.CreatedBy = dr["created_by"].ToString();
                                vwo.IsCompleted = Convert.ToBoolean(dr["is_completed"]);
                                vwo.CompletedDate = dt;
                                vwo.UrgencyStr = Convert.ToInt16(dr["urgency"]) == 1 ? "Urgent" : "Normal";
                                vwo.OrderType = string.IsNullOrWhiteSpace(dr["order_type"].ToString()) ? "Internal" : dr["order_type"].ToString();
                                machineWorkOrderList.Add(vwo);
                            }
                        }
                    }
                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return machineWorkOrderList;
        }

        public static ObservableCollection<VehicleWorkOrder> GetVehicleMiscelaniousMachineWorkOrdersByDate(DateTime searchDate)
        {
            string nDate = searchDate.ToString("yyyy-MM-dd");
            string currDate = DateTime.Now.ToString("yyyy-MM-dd");
            string op = "=";

            if (nDate == currDate)
            {
                op = "<=";
            }

            ObservableCollection<VehicleWorkOrder> vehicleWorkOrderList = new ObservableCollection<VehicleWorkOrder>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                conn.Open();
                try
                {
                    SqlCommand cmdGetData = new SqlCommand("SELECT VehicleWorkOrder.id AS VehicleWorkOrderNo,VehicleWorkOrder.work_order_type,VehicleWorkOrder.first_service_date,VehicleWorkOrder.next_service_date,VehicleWorkOrder.created_date,VehicleWorkOrder.last_odometer_reading,VehicleWorkOrder.odometer_reading,VehicleWorkOrder.urgency,VehicleWorkOrder.is_viewed,VehicleWorkOrder.largest_seq_id " +
                                                           "FROM dbo.VehicleWorkOrder " +
                                                           "WHERE dbo.VehicleWorkOrder.next_service_date" + op + "@DateSearch AND VehicleWorkOrder.is_completed = 'false' AND (VehicleWorkOrder.status <> 'Cancelled' AND VehicleWorkOrder.status <> 'Completed') AND VehicleWorkOrder.vehicle_id=0 " +
                                                           "ORDER BY VehicleWorkOrder.urgency ASC,dbo.VehicleWorkOrder.next_service_date ASC", conn);


                    cmdGetData.Parameters.AddWithValue("@DateSearch", nDate);
                    //cmdGetData.Parameters.AddWithValue("@State", state);
                    using (SqlDataReader dr = cmdGetData.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                VehicleWorkOrder vwo = new VehicleWorkOrder();
                                vwo.VehicleWorkOrderID = Convert.ToInt32(dr["VehicleWorkOrderNo"]);
                                vwo.LastOdometerReading = Convert.ToInt64(dr["last_odometer_reading"]);
                                vwo.OdometerReading = Convert.ToInt64(dr["odometer_reading"]);
                                vwo.WorkOrderType = dr["work_order_type"].ToString();
                                vwo.LargestSeqID = Convert.ToInt16(dr["largest_seq_id"]);
                                vwo.Vehicle = new Vehicle() { ID = 0, VehicleCode = "", SerialNumber = "", VehicleBrand = "", VehicleDescription = "Miscellaneous Work Order", StockLocation = new StockLocation() { StockName = "QLD" }, VehicleCategory = new VehicleCategory() { ID = 0, VehicleType = "" } };
                                vwo.FirstServiceDate = Convert.ToDateTime(dr["first_service_date"]);
                                vwo.NextServiceDate = Convert.ToDateTime(dr["next_service_date"]);
                                vwo.CreatedDate = Convert.ToDateTime(dr["created_date"]);
                                vwo.VehicleSearchString = "";
                                vwo.Urgency = Convert.ToInt16(dr["urgency"]);
                                vwo.UrgencyStr = Convert.ToInt16(dr["urgency"]) == 1 ? "Urgent" : "Normal";
                                vwo.IsViewed = Convert.ToBoolean(dr["is_viewed"]);
                                vwo.CompleteBackCol = (Convert.ToBoolean(dr["is_viewed"]) == true ? "#2E8856" : "#81b799");
                                vwo.CompleteBtnEnabled = (Convert.ToBoolean(dr["is_viewed"]) == true ? true : false);
                                vehicleWorkOrderList.Add(vwo);
                            }
                        }
                    }
                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return vehicleWorkOrderList;
        }

        public static ObservableCollection<MachineWorkDescription> GetMachineWorkDescriptionByID(Int32 Id, bool isCompleted)
        {
            ObservableCollection<MachineWorkDescription> machineWorkDescription = new ObservableCollection<MachineWorkDescription>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                conn.Open();
                try
                {
                    SqlCommand cmdGetData = new SqlCommand("SELECT MachineWorkDescription.id AS MWDID,MachineWorkDescription.machine_work_order_id,MachineWorkDescription.machine_repair_work_order_id,MachineWorkDescription.machine_maintenance_info_id,MachineMaintenanceFrequency.id,MachineMaintenanceFrequency.frequency,MachineWorkDescription.code,MachineWorkDescription.description,MachineMaintenanceInfo.repetition,MachineWorkDescription.is_completed,MachineWorkDescription.active " +
                                                           "FROM MachineWorkDescription " +
                                                           "INNER JOIN MachineMaintenanceInfo ON MachineWorkDescription.machine_maintenance_info_id =MachineMaintenanceInfo.id " +
                                                           "INNER JOIN MachineMaintenanceFrequency ON MachineMaintenanceInfo.machine_maintenance_freq_id = MachineMaintenanceFrequency.id " +
                                                           "WHERE machine_work_order_id=@ID AND is_completed=@IsCompleted ORDER BY machine_maintenance_info_id", conn);

                    cmdGetData.Parameters.AddWithValue("@ID", Id);
                    cmdGetData.Parameters.AddWithValue("@IsCompleted", isCompleted);
                    using (SqlDataReader dr = cmdGetData.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                MachineWorkDescription mwd = new MachineWorkDescription();
                                mwd.ID = Convert.ToInt32(dr["MWDID"]);
                                mwd.MachineWorkOrderNo = Convert.ToInt32(dr["machine_work_order_id"]);
                                mwd.MachineRepairWorkOrderNo = Convert.ToInt32(dr["machine_repair_work_order_id"]);
                                mwd.MachineMaintenanceInfo = new MachineMaintenanceInfo() { ID = Convert.ToInt32(dr["machine_maintenance_info_id"]), MachineCode = dr["code"].ToString(), MachineDescription = dr["description"].ToString(), Repetition = dr["repetition"].ToString(), MachineMaintenanceFrequency = new MachineMaintenanceFrequency() { ID = Convert.ToInt32(dr["id"]), Frequency = dr["frequency"].ToString() } };
                                mwd.IsCompleted = Convert.ToBoolean(dr["is_completed"]);
                                mwd.ProblemBtnEnabled = Convert.ToInt32(dr["machine_repair_work_order_id"]) > 0 ? false : true;
                                mwd.ItemRepair = Convert.ToInt32(dr["machine_repair_work_order_id"]) > 0 ? true : false;
                                mwd.ItemRepairEnabled = Convert.ToInt32(dr["machine_repair_work_order_id"]) > 0 ? false : true;
                                mwd.ItemDoneEnabled = Convert.ToInt32(dr["machine_repair_work_order_id"]) > 0 ? false : true;
                                mwd.NormalVisibility = "Visible";
                                mwd.RepairVisibility = "Collapsed";
                                mwd.Active = Convert.ToBoolean(dr["active"]);
                                machineWorkDescription.Add(mwd);
                            }
                        }
                    }
                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return machineWorkDescription;

        }

        public static ObservableCollection<MachineWorkDescription> GetAllMachineWorkDescriptionByID(Int32 Id)
        {
            ObservableCollection<MachineWorkDescription> machineWorkDescription = new ObservableCollection<MachineWorkDescription>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                conn.Open();
                try
                {
                    SqlCommand cmdGetData = new SqlCommand("SELECT MachineWorkDescription.id AS MWDID,MachineWorkDescription.machine_work_order_id,MachineWorkDescription.machine_repair_work_order_id,MachineWorkDescription.machine_maintenance_info_id,MachineMaintenanceFrequency.id,MachineMaintenanceFrequency.frequency,MachineWorkDescription.code,MachineWorkDescription.description,MachineMaintenanceInfo.repetition,MachineWorkDescription.is_completed,MachineWorkDescription.active " +
                                                           "FROM MachineWorkDescription " +
                                                           "INNER JOIN MachineMaintenanceInfo ON MachineWorkDescription.machine_maintenance_info_id =MachineMaintenanceInfo.id " +
                                                           "INNER JOIN MachineMaintenanceFrequency ON MachineMaintenanceInfo.machine_maintenance_freq_id = MachineMaintenanceFrequency.id " +
                                                           "WHERE machine_work_order_id=@ID AND MachineMaintenanceInfo.active = 'True' " + 
                                                           "ORDER BY machine_maintenance_info_id", conn);

                    cmdGetData.Parameters.AddWithValue("@ID", Id);
                    using (SqlDataReader dr = cmdGetData.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {

                                MachineWorkDescription mwd = new MachineWorkDescription();
                                mwd.ID = Convert.ToInt32(dr["MWDID"]);
                                mwd.MachineWorkOrderNo = Convert.ToInt32(dr["machine_work_order_id"]);
                                mwd.MachineRepairWorkOrderNo = Convert.ToInt32(dr["machine_repair_work_order_id"]);
                                mwd.MachineMaintenanceInfo = new MachineMaintenanceInfo() { ID = Convert.ToInt32(dr["machine_maintenance_info_id"]), MachineCode = dr["code"].ToString(), MachineDescription = dr["description"].ToString(), Repetition = dr["repetition"].ToString(), MachineMaintenanceFrequency = new MachineMaintenanceFrequency() { ID = Convert.ToInt32(dr["id"]), Frequency = dr["frequency"].ToString() } };
                                mwd.IsCompleted = Convert.ToBoolean(dr["is_completed"]);
                                mwd.ProblemBtnEnabled = Convert.ToInt32(dr["machine_repair_work_order_id"]) > 0 ? false : true;
                                mwd.ItemRepair = Convert.ToInt32(dr["machine_repair_work_order_id"]) > 0 ? true : false;
                                mwd.ItemRepairEnabled = Convert.ToInt32(dr["machine_repair_work_order_id"]) > 0 ? false : true;
                                mwd.ItemDoneEnabled = Convert.ToInt32(dr["machine_repair_work_order_id"]) > 0 ? false : true;
                                mwd.NormalVisibility = "Visible";
                                mwd.RepairVisibility = "Collapsed";
                                mwd.Active = Convert.ToBoolean(dr["active"]);
                                mwd.TickBoxEnabled = Convert.ToBoolean(dr["is_completed"]) == true ? false : true;
                                machineWorkDescription.Add(mwd);
                            }
                        }
                    }
                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return machineWorkDescription;

        }


        public static List<MachineWorkDescription> GetMachineMaintenanceInfoByWorkOrderID(List<MachineWorkOrder> wo)
        {
            List<MachineWorkDescription> machineWorkDescription = new List<MachineWorkDescription>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                conn.Open();
                try
                {
                    SqlCommand cmdGetData = new SqlCommand("SELECT MachineWorkDescription.id AS MWDID,MachineWorkDescription.machine_work_order_id,MachineWorkDescription.machine_repair_work_order_id,MachineWorkDescription.machine_maintenance_info_id,MachineWorkDescription.code,MachineWorkDescription.description,MachineMaintenanceInfo.machine_id,MachineMaintenanceInfo.repetition,MachineWorkDescription.is_completed,MachineWorkDescription.active, " +
                                                           "MachineMaintenanceFrequency.id AS FreqID,MachineMaintenanceFrequency.frequency " +
                                                           "FROM MachineWorkDescription " +
                                                           "INNER JOIN MachineMaintenanceInfo ON MachineWorkDescription.machine_maintenance_info_id =MachineMaintenanceInfo.id " +
                                                           "INNER JOIN MachineMaintenanceFrequency ON MachineMaintenanceInfo.machine_maintenance_freq_id = MachineMaintenanceFrequency.id " +
                                                           "WHERE machine_work_order_id=@ID AND MachineWorkDescription.is_completed='False' ORDER BY machine_maintenance_info_id", conn);

                    foreach (var item in wo)
                    {

                        cmdGetData.Parameters.AddWithValue("@ID", item.WorkOrderNo);
                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {


                                    MachineWorkDescription mwd = new MachineWorkDescription();
                                    mwd.ID = Convert.ToInt32(dr["MWDID"]);
                                    mwd.MachineWorkOrderNo = Convert.ToInt32(dr["machine_work_order_id"]);
                                    mwd.MachineRepairWorkOrderNo = Convert.ToInt32(dr["machine_repair_work_order_id"]);
                                    mwd.MachineMaintenanceInfo = new MachineMaintenanceInfo() { ID = Convert.ToInt32(dr["machine_maintenance_info_id"]), MachineCode = dr["code"].ToString(), MachineDescription = dr["description"].ToString(), Repetition = dr["repetition"].ToString(), Machine = new Machines(0) { MachineID = Convert.ToInt32(dr["machine_id"]) }, MachineMaintenanceFrequency = new MachineMaintenanceFrequency() { ID = Convert.ToInt16(dr["FreqID"]), Frequency = dr["frequency"].ToString() } };
                                    //mwd.MachineRepairDescription = new ObservableCollection<MachineRepairDescription>();
                                    //mwd.Description = dr["description"].ToString();
                                    mwd.IsCompleted = Convert.ToBoolean(dr["is_completed"]);
                                    mwd.ProblemBtnEnabled = Convert.ToInt32(dr["machine_repair_work_order_id"]) > 0 ? false : true;
                                    mwd.ItemRepair = Convert.ToInt32(dr["machine_repair_work_order_id"]) > 0 ? true : false;
                                    mwd.ItemRepairEnabled = Convert.ToInt32(dr["machine_repair_work_order_id"]) > 0 ? false : true;
                                    mwd.ItemDoneEnabled = Convert.ToInt32(dr["machine_repair_work_order_id"]) > 0 ? false : true;
                                    mwd.NormalVisibility = "Visible";
                                    mwd.RepairVisibility = "Collapsed";
                                    mwd.Active = Convert.ToBoolean(dr["active"]);
                                    machineWorkDescription.Add(mwd);

                                }
                            }
                        }
                        cmdGetData.Parameters.Clear();

                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return machineWorkDescription;

        }

        public static ObservableCollection<MachineRepairDescription> GetMachineRepairDescriptionByID(ObservableCollection<MachineWorkDescription> vwdList)
        {
            ObservableCollection<MachineRepairDescription> machineRepairDescription = new ObservableCollection<MachineRepairDescription>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                conn.Open();
                try
                {
                    SqlCommand cmdGetData = new SqlCommand("SELECT * FROM MachineRepairDescription " +
                                                           "WHERE machine_work_description_id=@ID AND is_active = 'True' ", conn);

                    foreach (var item in vwdList)
                    {
                        cmdGetData.Parameters.AddWithValue("@ID", item.ID);
                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    MachineRepairDescription mrd = new MachineRepairDescription();
                                    mrd.ID = Convert.ToInt32(dr["id"]);
                                    mrd.MachineWorkDescriptionID = Convert.ToInt32(dr["machine_work_description_id"]);
                                    mrd.MachineWorkOrderID = Convert.ToInt32(dr["machine_work_order_id"]);
                                    mrd.SequenceNumber = Convert.ToInt16(dr["sequence_id"]);
                                    mrd.RepairDescription = dr["description"].ToString();
                                    mrd.PartsOrdered = Convert.ToBoolean(dr["parts_orded"]);
                                    mrd.IsCompleted = Convert.ToBoolean(dr["is_completed"]);
                                    mrd.IsActive = Convert.ToBoolean(dr["is_active"]);
                                    machineRepairDescription.Add(mrd);
                                }
                            }
                        }
                        cmdGetData.Parameters.Clear();
                    }
                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return machineRepairDescription;
        }

        public static ObservableCollection<MachineParts> GetMachinePartsDescriptionByID(ObservableCollection<MachineRepairDescription> vrdList)
        {
            ObservableCollection<MachineParts> machineWorkDescription = new ObservableCollection<MachineParts>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                conn.Open();
                try
                {
                    SqlCommand cmdGetData = new SqlCommand("SELECT * FROM MachinePartDescription " +
                                                           "WHERE machine_repair_id=@ID AND active = 'True' ", conn);

                    foreach (var item in vrdList)
                    {
                        cmdGetData.Parameters.AddWithValue("@ID", item.ID);
                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    MachineParts mp = new MachineParts();
                                    mp.PartID = Convert.ToInt32(dr["id"]);
                                    mp.MachineRepairID = Convert.ToInt32(dr["machine_repair_id"]);
                                    mp.SequenceNumber = Convert.ToInt16(dr["sequence_id"]);
                                    mp.PartCode = dr["code"].ToString();
                                    mp.PartDescription = dr["description"].ToString();
                                    mp.Active = Convert.ToBoolean(dr["active"]);
                                    machineWorkDescription.Add(mp);
                                }
                            }
                        }
                        cmdGetData.Parameters.Clear();
                    }
                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return machineWorkDescription;
        }

        public static ObservableCollection<MachineRepairDescription> GetMahcineRepairDescriptionByID2(Int32 Id)
        {
            ObservableCollection<MachineRepairDescription> machineRepairDescription = new ObservableCollection<MachineRepairDescription>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                conn.Open();
                try
                {
                    SqlCommand cmdGetData = new SqlCommand("SELECT * FROM MachineRepairDescription " +
                                                           "WHERE machine_work_order_id=@ID AND is_active = 'True' ", conn);


                    cmdGetData.Parameters.AddWithValue("@ID", Id);
                    using (SqlDataReader dr = cmdGetData.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                MachineRepairDescription mrd = new MachineRepairDescription();
                                mrd.ID = Convert.ToInt32(dr["id"]);
                                mrd.MachineWorkDescriptionID = Convert.ToInt32(dr["machine_work_description_id"]);
                                mrd.MachineWorkOrderID = Convert.ToInt32(dr["machine_work_order_id"]);
                                mrd.SequenceNumber = Convert.ToInt16(dr["sequence_id"]);
                                mrd.RepairDescription = dr["description"].ToString();
                                mrd.PartsOrdered = Convert.ToBoolean(dr["parts_orded"]);
                                mrd.IsCompleted = Convert.ToBoolean(dr["is_completed"]);
                                mrd.IsActive = Convert.ToBoolean(dr["is_active"]);
                                machineRepairDescription.Add(mrd);
                            }
                        }
                    }

                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return machineRepairDescription;

        }

        public static ObservableCollection<MachineWorkDescription> GetMachineWorkDescriptionForRepair(Int32 Id)
        {
            ObservableCollection<MachineWorkDescription> machineWorkDescription = new ObservableCollection<MachineWorkDescription>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                conn.Open();
                try
                {
                    SqlCommand cmdGetData = new SqlCommand("SELECT * FROM MachineWorkDescription " +
                                                           "WHERE id=@ID", conn);

                    cmdGetData.Parameters.AddWithValue("@ID", Id);
                    using (SqlDataReader dr = cmdGetData.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                MachineWorkDescription mwd = new MachineWorkDescription();
                                mwd.ID = Convert.ToInt32(dr["id"]);
                                mwd.MachineWorkOrderNo = Convert.ToInt32(dr["machine_work_order_id"]);
                                mwd.MachineMaintenanceInfo = new MachineMaintenanceInfo() { ID = Convert.ToInt32(dr["machine_maintenance_info_id"]) };
                                mwd.MachineRepairWorkOrderNo = Convert.ToInt32(dr["machine_repair_work_order_id"]);
                                mwd.MachineMaintenanceInfo = new MachineMaintenanceInfo() { MachineCode = dr["code"].ToString(), MachineDescription = dr["description"].ToString() };
                                mwd.IsCompleted = Convert.ToBoolean(dr["is_completed"]);
                                mwd.Active = Convert.ToBoolean(dr["active"]);
                                machineWorkDescription.Add(mwd);
                                break;
                            }
                        }
                    }
                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return machineWorkDescription;
        }

        public static int UpdateMachineRepairPart(MachineWorkOrder mwo, ObservableCollection<MachineWorkDescription> mwd, MachineWorkOrder machineVehicleWorkOrder)
        {
            int result = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                //SqlCommand cmdUpdateVehicleWorkOrder = new SqlCommand("UPDATE VehicleWorkOrder SET maintenance_frequency = @MaintenanceFreq,first_service_date=@FirstServiceDate,next_service_date=@NextServiceDate,created_date=@CreatedDate,created_by=@CreatedBy " +
                //                                                      "WHERE id = @ID", conn);

                //SqlCommand cmdDeleteVehicleWorkDescription = new SqlCommand("DELETE FROM VehicleRepairDescription " +
                //                                                            "WHERE vehicle_work_order_id=@VehicleWorkOrderID", conn);

                SqlCommand cmdInsertVehicleRepairDescription = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM MachineRepairDescription " +
                                                                              "WHERE machine_work_description_id = @MachineWorkDescriptionID AND machine_work_order_id = @MachineWorkOrderID AND sequence_id = @SequenceID) " +
                                                                              "INSERT INTO MachineRepairDescription VALUES(@MachineWorkDescriptionID,@MachineWorkOrderID,@SequenceID,@Description,@PartsOrded,@IsCompleted,@IsActive) " +
                                                                              "ELSE " +
                                                                              "UPDATE MachineRepairDescription SET description=@Description " +
                                                                              "WHERE machine_work_description_id = @MachineWorkDescriptionID AND machine_work_order_id = @MachineWorkOrderID AND sequence_id = @SequenceID", conn);


                //SqlCommand cmdInsertVehicleRepairDescription = new SqlCommand("INSERT INTO VehicleRepairDescription(vehicle_work_description_id,vehicle_work_order_id,sequence_id,description,parts_orded,is_completed,is_active) " +
                //                                                              "VALUES (@VehicleWorkDescriptionID,@VehicleWorkOrderID,@SequenceID,@Description,@PartsOrded,@IsCompleted,@IsActive)", conn);

                SqlCommand cmdGeVehicleRepairDescriptionID = new SqlCommand("SELECT MAX(id) FROM MachineRepairDescription", conn);

                SqlCommand cmdInsertVehiclePartDescription = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM MachinePartDescription " +
                                                                            "WHERE machine_repair_id = @MachineRepairID AND sequence_id = @SequenceID) " +
                                                                            "INSERT INTO MachinePartDescription VALUES(@MachineRepairID,@SequenceID,@Code,@Description,@IsActive,@Completed) " +
                                                                            "ELSE " +
                                                                            "UPDATE MachinePartDescription SET code=@Code " +
                                                                            "WHERE machine_repair_id = @MachineRepairID AND sequence_id = @SequenceID", conn);

                SqlCommand cmdNewVehicleWorkOrder = null;

                if (machineVehicleWorkOrder.OrderType.Equals("External"))
                {
                    cmdNewVehicleWorkOrder = new SqlCommand("INSERT INTO MachineMaintenanceWorkOrder(machine_id,user_id,urgency,work_order_type,maintenance_freq,maintenance_freq_str,first_service_date,next_service_date,created_date,created_by,is_completed,completed_by,status,order_type,provider_id,show_order_date) " +
                                                            "VALUES (@MachineID,@UserID,@Urgency,@WorkOrderType,@MaintenanceFrequency,@MaintenanceFrequencyStr,@FirstServiceDate,@NextServiceDate,@CreatedDate,@CreatedBy,@IsCompleted,@CompletedBy,@Status,@OrderType,@ProviderID,@ShowOrderDate)", conn);
                }
                else
                {
                    cmdNewVehicleWorkOrder = new SqlCommand("INSERT INTO MachineMaintenanceWorkOrder(machine_id,user_id,urgency,work_order_type,maintenance_freq,maintenance_freq_str,first_service_date,next_service_date,created_date,created_by,is_completed,completed_by,status,order_type,provider_id) " +
                                                            "VALUES (@MachineID,@UserID,@Urgency,@WorkOrderType,@MaintenanceFrequency,@MaintenanceFrequencyStr,@FirstServiceDate,@NextServiceDate,@CreatedDate,@CreatedBy,@IsCompleted,@CompletedBy,@Status,@OrderType,@ProviderID)", conn);

                }

                SqlCommand cmdGeWorkOrdertId = new SqlCommand("SELECT MAX(id) FROM MachineMaintenanceWorkOrder", conn);

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {
                    foreach (var item in mwd)
                    {

                        Int32 workOrderId = 0;
                        //Check
                        if (item.MachineRepairDescription != null)
                        {
                            foreach (var items in item.MachineRepairDescription)
                            {
                                if (!String.IsNullOrWhiteSpace(items.RepairDescription))
                                {
                                    if (items.ID == 0)//Add a new work order
                                    {
                                        cmdNewVehicleWorkOrder.Transaction = trans;
                                        cmdNewVehicleWorkOrder.Parameters.AddWithValue("@MachineID", machineVehicleWorkOrder.Machine.MachineID);
                                        cmdNewVehicleWorkOrder.Parameters.AddWithValue("@UserID", 0);
                                        cmdNewVehicleWorkOrder.Parameters.AddWithValue("@Urgency", machineVehicleWorkOrder.Urgency);
                                        cmdNewVehicleWorkOrder.Parameters.AddWithValue("@WorkOrderType", machineVehicleWorkOrder.WorkOrderType);
                                        cmdNewVehicleWorkOrder.Parameters.AddWithValue("@MaintenanceFrequency", machineVehicleWorkOrder.MachineMaintenanceFrequency.ID);
                                        cmdNewVehicleWorkOrder.Parameters.AddWithValue("@MaintenanceFrequencyStr", machineVehicleWorkOrder.MachineMaintenanceFrequency.Frequency);
                                        cmdNewVehicleWorkOrder.Parameters.AddWithValue("@FirstServiceDate", machineVehicleWorkOrder.FirstServiceDate);
                                        cmdNewVehicleWorkOrder.Parameters.AddWithValue("@NextServiceDate", machineVehicleWorkOrder.NextServiceDate);
                                        cmdNewVehicleWorkOrder.Parameters.AddWithValue("@CreatedDate", machineVehicleWorkOrder.CreatedDate);
                                        cmdNewVehicleWorkOrder.Parameters.AddWithValue("@CreatedBy", machineVehicleWorkOrder.CreatedBy);
                                        cmdNewVehicleWorkOrder.Parameters.AddWithValue("@IsCompleted", machineVehicleWorkOrder.IsCompleted);
                                        cmdNewVehicleWorkOrder.Parameters.AddWithValue("@CompletedBy", machineVehicleWorkOrder.CompletedBy);
                                        cmdNewVehicleWorkOrder.Parameters.AddWithValue("@Status", machineVehicleWorkOrder.Status);
                                        if (!string.IsNullOrWhiteSpace(machineVehicleWorkOrder.OrderType) && machineVehicleWorkOrder.OrderType.Equals("External"))
                                        {
                                            cmdNewVehicleWorkOrder.Parameters.AddWithValue("@OrderType", machineVehicleWorkOrder.OrderType);
                                            cmdNewVehicleWorkOrder.Parameters.AddWithValue("@ProviderID", machineVehicleWorkOrder.MachineProvider.ProviderID);
                                            cmdNewVehicleWorkOrder.Parameters.AddWithValue("@ShowOrderDate", machineVehicleWorkOrder.ShowOrderDate);
                                        }
                                        else
                                        {
                                            cmdNewVehicleWorkOrder.Parameters.AddWithValue("@OrderType", "Internal");
                                            cmdNewVehicleWorkOrder.Parameters.AddWithValue("@ProviderID", 0);
                                        }
                                        cmdNewVehicleWorkOrder.ExecuteNonQuery();
                                        cmdNewVehicleWorkOrder.Parameters.Clear();

                                        cmdGeWorkOrdertId.Transaction = trans;
                                        workOrderId = Convert.ToInt32(cmdGeWorkOrdertId.ExecuteScalar());
                                    }
                                    else
                                    {
                                        workOrderId = items.MachineWorkOrderID;
                                    }
                                }
                                break;
                            }
                        }

                        foreach (var items in item.MachineRepairDescription)
                        {
                            if (!String.IsNullOrWhiteSpace(items.RepairDescription))
                            {
                                Int32 id = 0;

                                if (items.ID == 0)//Add a new work order
                                {
                                    cmdInsertVehicleRepairDescription.Transaction = trans;
                                    cmdInsertVehicleRepairDescription.Parameters.AddWithValue("@MachineWorkDescriptionID", items.MachineWorkDescriptionID);
                                    cmdInsertVehicleRepairDescription.Parameters.AddWithValue("@MachineWorkOrderID", workOrderId);
                                    cmdInsertVehicleRepairDescription.Parameters.AddWithValue("@SequenceID", items.SequenceNumber);
                                    cmdInsertVehicleRepairDescription.Parameters.AddWithValue("@Description", items.RepairDescription);
                                    cmdInsertVehicleRepairDescription.Parameters.AddWithValue("@PartsOrded", items.PartsOrdered);
                                    cmdInsertVehicleRepairDescription.Parameters.AddWithValue("@IsCompleted", false);
                                    cmdInsertVehicleRepairDescription.Parameters.AddWithValue("@IsActive", items.IsActive);
                                    result = cmdInsertVehicleRepairDescription.ExecuteNonQuery();
                                    cmdInsertVehicleRepairDescription.Parameters.Clear();

                                    cmdGeVehicleRepairDescriptionID.Transaction = trans;
                                    id = Convert.ToInt32(cmdGeVehicleRepairDescriptionID.ExecuteScalar());
                                    cmdGeVehicleRepairDescriptionID.Parameters.Clear();
                                }

                                foreach (var itemz in items.MachineParts)
                                {
                                    if (itemz.PartID == 0)
                                    {
                                        if (itemz.MachineRepairID > 0)
                                        {
                                            id = itemz.MachineRepairID;
                                        }

                                        cmdInsertVehiclePartDescription.Transaction = trans;
                                        //cmdInsertVehiclePartDescription.Parameters.AddWithValue("@NewVehicleRepairID", id);
                                        cmdInsertVehiclePartDescription.Parameters.AddWithValue("@MachineRepairID", id);
                                        cmdInsertVehiclePartDescription.Parameters.AddWithValue("@SequenceID", itemz.SequenceNumber);
                                        cmdInsertVehiclePartDescription.Parameters.AddWithValue("@Code", itemz.PartCode);
                                        cmdInsertVehiclePartDescription.Parameters.AddWithValue("@Description", itemz.PartDescription ?? (object)DBNull.Value);
                                        cmdInsertVehiclePartDescription.Parameters.AddWithValue("@IsActive", true);
                                        cmdInsertVehiclePartDescription.Parameters.AddWithValue("@Completed", false);
                                        result = cmdInsertVehiclePartDescription.ExecuteNonQuery();
                                        cmdInsertVehiclePartDescription.Parameters.Clear();
                                    }
                                }
                            }
                        }
                    }

                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("Error: Updating SalesOrder Required Date" + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return result;
        }


        public static bool CheckMachineWorkOrderCompleted(Int32 Id)
        {
            bool result = false;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    using (SqlCommand cmd = new SqlCommand("SELECT COUNT(*) from MachineMaintenanceWorkOrder WHERE id=@ID AND (status='Not Completed' OR status='Pending')", conn))
                    {
                        conn.Open();

                        cmd.Parameters.AddWithValue("@ID", Id);

                        int rowCount = (int)cmd.ExecuteScalar();

                        if (rowCount > 0)
                        {
                            result = true;
                        }
                        else
                        {
                            result = false;
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL SELECT QUOTES ERROR : " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return result;
        }


        public static int UpdateMachineWorkOrderUser(MachineWorkOrder mwo)
        {
            int result = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdUpdateVehicleWorkOrder = new SqlCommand("UPDATE MachineMaintenanceWorkOrder SET user_id = @UserID " +
                                                                      "WHERE id = @ID", conn);

                conn.Open();
                try
                {
                    //cmdUpdateVehicleWorkOrder.Transaction = trans;
                    cmdUpdateVehicleWorkOrder.Parameters.AddWithValue("@ID", mwo.WorkOrderNo);
                    cmdUpdateVehicleWorkOrder.Parameters.AddWithValue("@UserID", mwo.User.ID);
                    result = cmdUpdateVehicleWorkOrder.ExecuteNonQuery();
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error: Updating SalesOrder Required Date" + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return result;
        }

        public static Int32 MachineWorkOrderCompleted(MachineWorkOrder mwo, ObservableCollection<MachineWorkDescription> mwd)
        {
            int res = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdUpdateMachineWorkDescription = new SqlCommand("UPDATE MachineWorkDescription SET is_completed = @IsCompleted " +
                                                                            "WHERE id = @ID", conn);

                SqlCommand cmdUpdateMachineMaintInfo = new SqlCommand("UPDATE MachineMaintenanceInfo SET last_completed_date = @LastCompletedDate " +
                                                                      "WHERE id = @ID", conn);

                SqlCommand cmdUpdateMachineRepairDescription = new SqlCommand("UPDATE MachineRepairDescription SET is_completed = @IsCompleted " +
                                                                              "WHERE id = @ID", conn);

                SqlCommand cmdUpdateMachinePartDescription = new SqlCommand("UPDATE MachinePartDescription SET completed = @IsCompleted " +
                                                                              "WHERE machine_repair_id = @ID", conn);

                SqlCommand cmdMachineWorkOrder = new SqlCommand("UPDATE MachineMaintenanceWorkOrder SET user_id=@UserID,completed_date=@CompletedDate,completed_by=@CompletedBy,is_completed = @IsCompleted,status=@Status, external_mechanic_name = @ExternalName, reasons=@Reasons " +
                                                                "WHERE id = @ID", conn);

                SqlCommand cmdUploadFile = new SqlCommand("INSERT INTO UploadedFiles (machine_id,work_order_id,description,file_path,file_name,uploaded_datetime,uploaded_by) " +
                                                          "VALUES (@MachineID,@WorkOrderID,@Description,@FilePath,@FileName,@UploadedDatetime,@UploadedBy)", conn);

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {
                    foreach (var item in mwd)
                    {
                        cmdUpdateMachineWorkDescription.Transaction = trans;
                        cmdUpdateMachineWorkDescription.Parameters.AddWithValue("@ID", item.ID);
                        cmdUpdateMachineWorkDescription.Parameters.AddWithValue("@IsCompleted", item.ItemDone);
                        cmdUpdateMachineWorkDescription.ExecuteNonQuery();
                        cmdUpdateMachineWorkDescription.Parameters.Clear();

                        cmdUpdateMachineMaintInfo.Transaction = trans;
                        cmdUpdateMachineMaintInfo.Parameters.AddWithValue("@ID", item.MachineMaintenanceInfo.ID);
                        cmdUpdateMachineMaintInfo.Parameters.AddWithValue("@LastCompletedDate", DateTime.Now);
                        cmdUpdateMachineMaintInfo.ExecuteNonQuery();
                        cmdUpdateMachineMaintInfo.Parameters.Clear();                        

                        foreach (var items in item.MachineRepairDescription)
                        {
                            cmdUpdateMachineRepairDescription.Transaction = trans;
                            cmdUpdateMachineRepairDescription.Parameters.AddWithValue("@ID", items.ID);
                            cmdUpdateMachineRepairDescription.Parameters.AddWithValue("@IsCompleted", items.IsCompleted);
                            cmdUpdateMachineRepairDescription.ExecuteNonQuery();
                            cmdUpdateMachineRepairDescription.Parameters.Clear();

                            foreach (var itemz in items.MachineParts)
                            {
                                cmdUpdateMachinePartDescription.Transaction = trans;
                                cmdUpdateMachinePartDescription.Parameters.AddWithValue("@ID", itemz.MachineRepairID);
                                cmdUpdateMachinePartDescription.Parameters.AddWithValue("@IsCompleted", items.IsCompleted);
                                cmdUpdateMachinePartDescription.ExecuteNonQuery();
                                cmdUpdateMachinePartDescription.Parameters.Clear();
                            }
                        }
                    }

                    cmdMachineWorkOrder.Transaction = trans;
                    cmdMachineWorkOrder.Parameters.AddWithValue("@ID", mwo.WorkOrderNo);
                    cmdMachineWorkOrder.Parameters.AddWithValue("@UserID", mwo.User.ID);
                    cmdMachineWorkOrder.Parameters.AddWithValue("@CompletedDate", DateTime.Now);
                    cmdMachineWorkOrder.Parameters.AddWithValue("@CompletedBy", mwo.CreatedBy);
                    cmdMachineWorkOrder.Parameters.AddWithValue("@IsCompleted", mwo.IsCompleted);
                    cmdMachineWorkOrder.Parameters.AddWithValue("@Status", mwo.Status);
                    cmdMachineWorkOrder.Parameters.AddWithValue("@ExternalName", mwo.ExternalMechanicName);
                    cmdMachineWorkOrder.Parameters.AddWithValue("@Reasons", mwo.Reason);
                    res = cmdMachineWorkOrder.ExecuteNonQuery();
                    cmdMachineWorkOrder.Parameters.Clear();

                    List<int> udRes = new List<int>();
                    if (mwo.FileUploadList != null && mwo.FileUploadList.Count > 0)
                    {
                        foreach (var item in mwo.FileUploadList)
                        {
                            cmdUploadFile.Transaction = trans;
                            cmdUploadFile.Parameters.AddWithValue("@MachineID", mwo.Machine.MachineID);
                            cmdUploadFile.Parameters.AddWithValue("@WorkOrderID", mwo.WorkOrderNo);
                            cmdUploadFile.Parameters.AddWithValue("@Description", item.Description);
                            cmdUploadFile.Parameters.AddWithValue("@FilePath", item.FilePathTo);
                            cmdUploadFile.Parameters.AddWithValue("@FileName", item.FileName);
                            cmdUploadFile.Parameters.AddWithValue("@UploadedDatetime", DateTime.Now);
                            cmdUploadFile.Parameters.AddWithValue("@UploadedBy", mwo.CreatedBy);
                            udRes.Add(cmdUploadFile.ExecuteNonQuery());
                            cmdUploadFile.Parameters.Clear();
                        }
                    }

                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("Production SQL Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return res;
        }

        public static List<MachineWorkOrder> CheckIfMachineWorkOrderExist(Int32 mWoId, Int32 mId, List<MachineMaintenanceInfo> mmiSList)
        {
            List<MachineWorkOrder> machineWorkOrderList = new List<MachineWorkOrder>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    using (SqlCommand cmd = new SqlCommand("SELECT MachineMaintenanceWorkOrder.id AS WOID,MachineMaintenanceWorkOrder.next_service_date,MachineMaintenanceWorkOrder.maintenance_freq,MachineMaintenanceWorkOrder.maintenance_freq_str " +
                                                           "FROM MachineMaintenanceWorkOrder " +
                                                           "WHERE machine_id = @MachineID AND " +
                                                           "(next_service_date >= @NextAvaDateStr AND next_service_date <= @NextAvaDateAfterAditionStr) " +
                                                           "AND status ='Pending' AND MachineMaintenanceWorkOrder.work_order_type <> 'Repair' " +
                                                           "AND MachineMaintenanceWorkOrder.id FDB @WorkOrderID", conn))
                    {
                        conn.Open();

                        foreach (var item in mmiSList)
                        {
                            cmd.Parameters.AddWithValue("@WorkOrderID", mWoId);
                            cmd.Parameters.AddWithValue("@MachineID", mId);
                            cmd.Parameters.AddWithValue("@NextAvaDateStr", item.FirstDate.ToString("yyyy-MM-dd"));
                            cmd.Parameters.AddWithValue("@NextAvaDateAfterAditionStr", item.LastDate.ToString("yyyy-MM-dd"));


                            using (SqlDataReader dr = cmd.ExecuteReader())
                            {
                                if (dr != null)
                                {
                                    while (dr.Read())
                                    {
                                        if (machineWorkOrderList.Count == 0)
                                        {
                                            machineWorkOrderList.Add(new MachineWorkOrder() { WorkOrderNo = Convert.ToInt32(dr["WOID"]), NextServiceDate = Convert.ToDateTime(dr["next_service_date"]), MachineMaintenanceInfo = new ObservableCollection<MachineMaintenanceInfo>(), MachineMaintenanceFrequency = new MachineMaintenanceFrequency() { ID = Convert.ToInt16(dr["maintenance_freq"]), Frequency = dr["maintenance_freq_str"].ToString() } });
                                            //avaList.Add(Tuple.Create(Convert.ToInt32(dr["WOID"]), new MachineMaintenanceFrequency() { ID = Convert.ToInt16(dr["maintenance_freq"]), Frequency = dr["maintenance_freq_str"].ToString() }, Convert.ToDateTime(dr["next_service_date"])));
                                        }
                                        else
                                        {
                                            bool ava = machineWorkOrderList.Any(x => x.WorkOrderNo == Convert.ToInt32(dr["WOID"]));
                                            if (ava == false)
                                            {
                                                machineWorkOrderList.Add(new MachineWorkOrder() { WorkOrderNo = Convert.ToInt32(dr["WOID"]), NextServiceDate = Convert.ToDateTime(dr["next_service_date"]), MachineMaintenanceInfo = new ObservableCollection<MachineMaintenanceInfo>(), MachineMaintenanceFrequency = new MachineMaintenanceFrequency() { ID = Convert.ToInt16(dr["maintenance_freq"]), Frequency = dr["maintenance_freq_str"].ToString() } });
                                                //avaList.Add(Tuple.Create(Convert.ToInt32(dr["WOID"]), new MachineMaintenanceFrequency() { ID = Convert.ToInt16(dr["maintenance_freq"]), Frequency = dr["maintenance_freq_str"].ToString() }, Convert.ToDateTime(dr["next_service_date"])));
                                            }
                                        }
                                    }
                                }
                            }
                            cmd.Parameters.Clear();
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL MachineWorkOrder error : " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return machineWorkOrderList;
        }

        public static Int32 InsertNewMachineRepairWorkOrder(MachineRepairWorkOrder vrwo, Int32 id)
        {
            int rc1 = 0;
            int rc2 = 0;
            int rc3 = 0;
            Int32 res = 0;
            Int32 workOrderId = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdNewMachineWorkOrder = new SqlCommand("INSERT INTO MachineMaintenanceWorkOrder(machine_id,user_id,urgency,work_order_type,maintenance_freq,maintenance_freq_str,first_service_date,next_service_date,created_date,created_by,is_completed,status,order_type,provider_id,show_order_date) " +
                                                                   "VALUES (@MachineID,@UserID,@Urgency,@WorkOrderType,@MaintenanceFrequency,@MaintenanceFreqStr,@FirstServiceDate,@NextServiceDate,@CreatedDate,@CreatedBy,@IsCompleted,@Status,@OrderType,@ProviderID,@ShowOrderDate)", conn);

                SqlCommand cmdGeWorkOrdertId = new SqlCommand("SELECT MAX(id) FROM MachineMaintenanceWorkOrder", conn);

                SqlCommand cmdMachineWorkDescription = new SqlCommand("INSERT INTO MachineRepairDescription(machine_work_description_id,machine_work_order_id,sequence_id,description,parts_orded,is_completed,is_active) " +
                                                                      "VALUES (@MachineWorkDescriptionID,@MachineWorkOrderID,@SequenceID,@Description,@PartsOrded,@IsCompleted,@IsActive)", conn);

                SqlCommand cmdUpdateMachineWorkDescription = new SqlCommand("UPDATE MachineWorkDescription SET machine_repair_work_order_id=@MachineRepairWorkOrderID " +
                                                                            "WHERE id = @ID", conn);

                SqlCommand cmdGeMachineRepairDescriptionID = new SqlCommand("SELECT MAX(id) FROM MachineRepairDescription", conn);

                SqlCommand cmdInsertMachinePartDescription = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM MachinePartDescription " +
                                                                            "WHERE machine_repair_id = @MachineRepairID AND sequence_id = @SequenceID) " +
                                                                            "INSERT INTO MachinePartDescription VALUES(@MachineRepairID,@SequenceID,@Code,@Description,@IsActive,@Completed) " +
                                                                            "ELSE " +
                                                                            "UPDATE MachinePartDescription SET code=@Code " +
                                                                            "WHERE machine_repair_id = @MachineRepairID AND sequence_id = @SequenceID", conn);

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {
                    cmdNewMachineWorkOrder.Transaction = trans;
                    //cmdNewVehicleWorkOrder.Parameters.AddWithValue("@VehicleWorkDescriptionID", vrwo.VehicleWorkDescriptionID);
                    cmdNewMachineWorkOrder.Parameters.AddWithValue("@MachineID", vrwo.Machine.MachineID);
                    cmdNewMachineWorkOrder.Parameters.AddWithValue("@UserID", 0);
                    cmdNewMachineWorkOrder.Parameters.AddWithValue("@Urgency", vrwo.Urgency);
                    cmdNewMachineWorkOrder.Parameters.AddWithValue("@WorkOrderType", vrwo.WorkOrderType);
                    cmdNewMachineWorkOrder.Parameters.AddWithValue("@MaintenanceFrequency", MachineMaintenanceFreq.OneOff);
                    cmdNewMachineWorkOrder.Parameters.AddWithValue("@MaintenanceFreqStr", MachineMaintenanceFreq.OneOff.ToString());
                    cmdNewMachineWorkOrder.Parameters.AddWithValue("@FirstServiceDate", vrwo.FirstServiceDate);
                    cmdNewMachineWorkOrder.Parameters.AddWithValue("@NextServiceDate", vrwo.NextServiceDate);
                    cmdNewMachineWorkOrder.Parameters.AddWithValue("@IsCompleted", vrwo.IsCompleted);
                    cmdNewMachineWorkOrder.Parameters.AddWithValue("@CreatedDate", vrwo.CreatedDate);
                    cmdNewMachineWorkOrder.Parameters.AddWithValue("@CreatedBy", vrwo.CreatedBy);
                    cmdNewMachineWorkOrder.Parameters.AddWithValue("@Status", vrwo.Status);
                    cmdNewMachineWorkOrder.Parameters.AddWithValue("@OrderType", "Internal");
                    cmdNewMachineWorkOrder.Parameters.AddWithValue("@ProviderID", 0);
                    cmdNewMachineWorkOrder.Parameters.AddWithValue("@ShowOrderDate", DateTime.Now);


                    rc1 = cmdNewMachineWorkOrder.ExecuteNonQuery();

                    cmdGeWorkOrdertId.Transaction = trans;
                    workOrderId = Convert.ToInt32(cmdGeWorkOrdertId.ExecuteScalar());

                    foreach (var item in vrwo.MachineRepairDescription)
                    {
                        if (item.StrSequenceNumber != "Select")
                        {
                            cmdMachineWorkDescription.Transaction = trans;
                            cmdMachineWorkDescription.Parameters.AddWithValue("@MachineWorkDescriptionID", 0);
                            cmdMachineWorkDescription.Parameters.AddWithValue("@MachineWorkOrderID", workOrderId);
                            cmdMachineWorkDescription.Parameters.AddWithValue("@SequenceID", item.SequenceNumber);
                            cmdMachineWorkDescription.Parameters.AddWithValue("@Description", item.RepairDescription);
                            cmdMachineWorkDescription.Parameters.AddWithValue("@PartsOrded", item.PartsOrdered);
                            cmdMachineWorkDescription.Parameters.AddWithValue("@IsCompleted", false);
                            cmdMachineWorkDescription.Parameters.AddWithValue("@IsActive", true);
                            rc2 = cmdMachineWorkDescription.ExecuteNonQuery();
                            cmdMachineWorkDescription.Parameters.Clear();

                            cmdGeMachineRepairDescriptionID.Transaction = trans;
                            id = Convert.ToInt32(cmdGeMachineRepairDescriptionID.ExecuteScalar());
                            cmdGeMachineRepairDescriptionID.Parameters.Clear();

                            foreach (var itemz in item.MachineParts)
                            {
                                if (itemz.PartDescription != "Select")
                                {
                                    cmdInsertMachinePartDescription.Transaction = trans;
                                    cmdInsertMachinePartDescription.Parameters.AddWithValue("@MachineRepairID", id);
                                    cmdInsertMachinePartDescription.Parameters.AddWithValue("@SequenceID", itemz.SequenceNumber);
                                    cmdInsertMachinePartDescription.Parameters.AddWithValue("@Code", itemz.PartCode);
                                    cmdInsertMachinePartDescription.Parameters.AddWithValue("@Description", itemz.PartDescription ?? (object)DBNull.Value);
                                    cmdInsertMachinePartDescription.Parameters.AddWithValue("@IsActive", true);
                                    cmdInsertMachinePartDescription.Parameters.AddWithValue("@Completed", false);
                                    cmdInsertMachinePartDescription.ExecuteNonQuery();
                                    cmdInsertMachinePartDescription.Parameters.Clear();
                                }
                            }
                        }
                    }
                    cmdUpdateMachineWorkDescription.Transaction = trans;
                    cmdUpdateMachineWorkDescription.Parameters.AddWithValue("@ID", id);
                    cmdUpdateMachineWorkDescription.Parameters.AddWithValue("@MachineRepairWorkOrderID", workOrderId);
                    rc3 = cmdUpdateMachineWorkDescription.ExecuteNonQuery();

                    if (rc1 > 0 && rc2 > 0)
                    {
                        res = workOrderId;
                    }
                    trans.Commit();

                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("Production SQL Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return res;
        }


        public static ObservableCollection<MachineWorkOrderHistory> GetMachineWorkOrderHistory(int selectedMachineId, DateTime fromDate, DateTime toDate, string completed)
        {
            ObservableCollection<MachineWorkOrderHistory> machineWorkOrderHistory = new ObservableCollection<MachineWorkOrderHistory>();
            string where = string.Empty;
            string where2 = string.Empty;
            string fromDateStr = fromDate.ToString("yyyy-MM-dd");
            string toDateStr = toDate.ToString("yyyy-MM-dd");

            if(completed.Equals("Not Completed"))
            {
                where2 = " AND MachineMaintenanceWorkOrder.is_completed='False'";
            }
            else if (completed.Equals("Completed"))
            {
                where2 = " AND MachineMaintenanceWorkOrder.is_completed='True'";
            }

            if (selectedMachineId == 0)
            {
                where = "(CONVERT(date,MachineMaintenanceWorkOrder.completed_date) >= '" + fromDateStr + "' AND CONVERT(date,MachineMaintenanceWorkOrder.completed_date) <= '" + toDateStr + "') ";
            }
            else
            {
                where = "(CONVERT(date,MachineMaintenanceWorkOrder.completed_date) >= '" + fromDateStr + "' AND CONVERT(date,MachineMaintenanceWorkOrder.completed_date) <= '" + toDateStr + "') AND MachineMaintenanceWorkOrder.machine_id = " + selectedMachineId + " ";
            }

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                conn.Open();
                try
                {
                    SqlCommand cmdGetData = new SqlCommand("SELECT MachineMaintenanceWorkOrder.id AS WOID,MachineMaintenanceWorkOrder.maintenance_freq_str,MachineMaintenanceWorkOrder.work_order_type,MachineMaintenanceWorkOrder.maintenance_freq,MachineMaintenanceWorkOrder.completed_date,MachineMaintenanceWorkOrder.completed_by, ISNULL(MachineMaintenanceWorkOrder.order_type,'Internal') as order_type, " +
                                                           "Users.FirstName,Users.LastName, MachineMaintenanceWorkOrder.reasons, MachineMaintenanceWorkOrder.is_completed, " +
                                                           "ISNULL(Machines.machine_id,0) AS machine_id,ISNULL(Machines.machine_name,'') AS machine_name, MachineMaintenanceWorkOrder.external_mechanic_name, ISNULL(Users.ID,0 ) AS user_id,MachineMaintenanceWorkOrder.status, MachineMaintenanceWorkOrder.review,MachineMaintenanceWorkOrder.review_added_date_time,MachineMaintenanceWorkOrder.review_added_by, " +
                                                           "(SELECT COUNT(*) FROM UploadedFiles WHERE work_order_id = MachineMaintenanceWorkOrder.id) as no_of_files " +
                                                           "FROM MachineMaintenanceWorkOrder " +
                                                           "LEFT JOIN Users ON MachineMaintenanceWorkOrder.user_id = Users.ID " +
                                                           "LEFT JOIN Machines ON MachineMaintenanceWorkOrder.machine_id = Machines.machine_id " +
                                                           "WHERE " + where + where2 + " AND MachineMaintenanceWorkOrder.status <> 'Pending'" +
                                                           "ORDER BY MachineMaintenanceWorkOrder.is_completed,MachineMaintenanceWorkOrder.Review,MachineMaintenanceWorkOrder.completed_date DESC", conn);
                                        
                    using (SqlDataReader dr = cmdGetData.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                MachineWorkOrderHistory vwoh = new MachineWorkOrderHistory();
                                vwoh.WorkOrderNo = Convert.ToInt32(dr["WOID"]);
                                vwoh.WorkOrderType = dr["work_order_type"].ToString();
                                vwoh.MachineMaintenanceFrequency = new MachineMaintenanceFrequency() { ID = Convert.ToInt16(dr["maintenance_freq"]), Frequency = ConsFreq(Convert.ToInt16(dr["maintenance_freq"]), dr["maintenance_freq_str"].ToString()) };
                                if (Convert.ToInt16(dr["user_id"]) == 0)
                                {
                                    vwoh.User = new User() { FullName = dr["external_mechanic_name"].ToString() };
                                }
                                else
                                {
                                    vwoh.User = new User() { FullName = dr["FirstName"].ToString() + " " + dr["LastName"].ToString() };
                                }
                                vwoh.WorkOrderCompletedBy = dr["completed_by"].ToString();
                                vwoh.Machine = new Machines(0) { MachineID = Convert.ToInt16(dr["machine_id"]), MachineName = dr["machine_name"].ToString() };
                                vwoh.CompletedDate = Convert.ToDateTime(dr["completed_date"]);
                                vwoh.Status = dr["status"].ToString();
                                vwoh.RowBackground = vwoh.Status.Equals("Not Completed") ? "#ccebf6" : "#ffffff";
                                vwoh.Reason = dr["reasons"].ToString();
                                vwoh.Review = dr["review"].ToString();
                                vwoh.ReviewAddedDateTime = CheckNull<DateTime>(dr["review_added_date_time"]);
                                vwoh.ReviewAddedBy = dr["review_added_by"].ToString();
                                vwoh.IsCompleted = Convert.ToBoolean(dr["is_completed"]);
                                vwoh.NoOfFiles = Convert.ToInt16(dr["no_of_files"]);
                                vwoh.RecordBtnVisibility = vwoh.NoOfFiles > 0 ? "Visible" : "Collapsed";
                                vwoh.ReviewReqVisibility = "Collapsed"; 
                                vwoh.OrderType = dr["order_type"].ToString();
                                if (!vwoh.IsCompleted && string.IsNullOrWhiteSpace(vwoh.Review))
                                {
                                    vwoh.ReviewReqVisibility = "Visible";
                                }
                                machineWorkOrderHistory.Add(vwoh);
                            }
                        }
                    }
                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return machineWorkOrderHistory;
        }

        public static Int32 UpdateReview(MachineWorkOrder mwo, ObservableCollection<MachineWorkDescription> mwd, bool allCompleted)
        {
            int res = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {

                SqlCommand cmdUpdateMMWO = new SqlCommand("UPDATE MachineMaintenanceWorkOrder SET review=@Review,review_added_date_time=@ReviewAddedDateTime,review_added_by=@ReviewAddedBy " +
                                                          "WHERE id =@ID", conn);

                SqlCommand cmdUpdateMMWO2 = new SqlCommand("UPDATE MachineMaintenanceWorkOrder SET is_completed=@IsCompleted,completed_date=@CompletedDate,completed_by=@CompletedBy,status=@Status " +
                                                           "WHERE id =@ID", conn);

                SqlCommand cmdUpdateWD = new SqlCommand("UPDATE MachineWorkDescription SET is_completed=@IsCompleted " +
                                                        "WHERE id =@ID", conn);
                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();

                try
                {
                    if(allCompleted)
                    {
                        foreach (var item in mwd)
                        {

                            cmdUpdateWD.Transaction = trans;
                            cmdUpdateWD.Parameters.AddWithValue("@ID", item.ID);
                            cmdUpdateWD.Parameters.AddWithValue("@IsCompleted", item.IsCompleted);
                            res = cmdUpdateWD.ExecuteNonQuery();
                            cmdUpdateWD.Parameters.Clear();
                        }

                        cmdUpdateMMWO2.Transaction = trans;
                        cmdUpdateMMWO2.Parameters.AddWithValue("@ID", mwo.WorkOrderNo);
                        cmdUpdateMMWO2.Parameters.AddWithValue("@IsCompleted", true);
                        cmdUpdateMMWO2.Parameters.AddWithValue("@CompletedDate", mwo.ReviewAddedDateTime);
                        cmdUpdateMMWO2.Parameters.AddWithValue("@CompletedBy", mwo.ReviewAddedBy);
                        cmdUpdateMMWO2.Parameters.AddWithValue("@Status", "Completed");
                        res = cmdUpdateMMWO2.ExecuteNonQuery();

                    }

                    cmdUpdateMMWO.Transaction = trans;
                    cmdUpdateMMWO.Parameters.AddWithValue("@ID", mwo.WorkOrderNo);
                    cmdUpdateMMWO.Parameters.AddWithValue("@Review", mwo.Review);
                    cmdUpdateMMWO.Parameters.AddWithValue("@ReviewAddedDateTime", mwo.ReviewAddedDateTime);
                    cmdUpdateMMWO.Parameters.AddWithValue("@ReviewAddedBy", mwo.ReviewAddedBy);
                    res = cmdUpdateMMWO.ExecuteNonQuery();

                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("Production SQL Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return res;
        }

        public static ObservableCollection<MachineWorkOrderHistory> GetMiscelaniousWorkOrderHistory()
        {

            ObservableCollection<MachineWorkOrderHistory> machineWorkOrderHistory = new ObservableCollection<MachineWorkOrderHistory>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                conn.Open();
                try
                {
                    SqlCommand cmdGetData = new SqlCommand("SELECT MachineMaintenanceWorkOrder.id AS WOID,MachineMaintenanceWorkOrder.maintenance_freq_str,MachineMaintenanceWorkOrder.work_order_type,MachineMaintenanceWorkOrder.maintenance_freq,MachineMaintenanceWorkOrder.completed_date,MachineMaintenanceWorkOrder.completed_by, " +
                                                           "Users.FirstName,Users.LastName, MachineMaintenanceWorkOrder.status " +
                                                           "FROM MachineMaintenanceWorkOrder " +
                                                           "INNER JOIN Users ON MachineMaintenanceWorkOrder.user_id = Users.ID " +
                                                           "WHERE MachineMaintenanceWorkOrder.status='Completed' AND MachineMaintenanceWorkOrder.is_completed='True' AND MachineMaintenanceWorkOrder.machine_id=0 " +
                                                           "ORDER BY MachineMaintenanceWorkOrder.completed_date DESC", conn);

                    //cmdGetData.Parameters.AddWithValue("@SearchDate", dt);
                    using (SqlDataReader dr = cmdGetData.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                MachineWorkOrderHistory vwoh = new MachineWorkOrderHistory();
                                vwoh.WorkOrderNo = Convert.ToInt32(dr["WOID"]);
                                vwoh.WorkOrderType = dr["work_order_type"].ToString();
                                vwoh.MachineMaintenanceFrequency = new MachineMaintenanceFrequency() { ID = Convert.ToInt16(dr["maintenance_freq"]), Frequency = ConsFreq(Convert.ToInt16(dr["maintenance_freq"]), dr["maintenance_freq_str"].ToString()) };
                                vwoh.User = new User() { FullName = dr["FirstName"].ToString() + " " + dr["LastName"].ToString() };
                                vwoh.WorkOrderCompletedBy = dr["completed_by"].ToString();
                                vwoh.Machine = new Machines(0) { MachineID = 0, MachineName = "Miscellaneous Work Order" };
                                vwoh.CompletedDate = Convert.ToDateTime(dr["completed_date"]);
                                vwoh.Status = dr["status"].ToString();
                                vwoh.RowBackground = vwoh.Status.Equals("Not Completed") ? "#ccebf6" : "#ffffff";
                                machineWorkOrderHistory.Add(vwoh);
                            }
                        }
                    }
                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return machineWorkOrderHistory;
        }

        private static string ConsFreq(int tup,string freqStr)
        {
            string strOne = string.Empty;
            string strTwo = string.Empty;
            List<int> num = new List<int>();

            if (tup == 1 && freqStr.Equals("Daily"))
            {
                strTwo = GetFrequency(1);
            }
            else if (tup == 2 && freqStr.Equals("Weekly"))
            {
                strTwo = GetFrequency(2);
            }
            else if (tup == 3 && freqStr.Equals("Monthly"))
            {
                strTwo = GetFrequency(3);
            }
            else if (tup == 4 && freqStr.Equals("SixMonths"))
            {
                strTwo = GetFrequency(4);
            }
            else if (tup == 5 && freqStr.Equals("OneYear"))
            {
                strTwo = GetFrequency(5);
            }
            else if (tup == 6 && freqStr.Equals("TwoYears"))
            {
                strTwo = GetFrequency(6);
            }
            else if (tup == 7 && freqStr.Equals("Fortnightly"))
            {
                strTwo = GetFrequency(7);
            }
            else if (tup == 8 && freqStr.Equals("2 Months"))
            {
                strTwo = GetFrequency(8);
            }
            else if (tup == 9 && freqStr.Equals("3 Months"))
            {
                strTwo = GetFrequency(9);
            }
            else if (tup == 10 && freqStr.Equals("4 Months"))
            {
                strTwo = GetFrequency(10);
            }
            else if (tup == 11 && freqStr.Equals("5 Months"))
            {
                strTwo = GetFrequency(11);
            }
            else if (tup == 12 && freqStr.Equals("3 Years"))
            {
                strTwo = GetFrequency(12);
            }
            else if (tup == 13 && freqStr.Equals("4 Years"))
            {
                strTwo = GetFrequency(13);
            }
            else if (tup == 14 && freqStr.Equals("5 Years"))
            {
                strTwo = GetFrequency(14);
            }
            else if (tup == 15 && freqStr.Equals("10 Years"))
            {
                strTwo = GetFrequency(15);
            }
            else
            {
                int a = tup;
                while (a != 0)
                {
                    int lastDigit = a % 10;

                    if (a.ToString().Length == 3)
                    {
                        lastDigit = a % 100;
                    }                    

                    num.Add(lastDigit);
                    a /= 10;

                    if (a.ToString().Length == 2)
                    {
                        a /= 10;
                    }
                    else if (a.ToString().Length == 3)
                    {
                        a /= 100;
                    }
                }

                var newTup = num.OrderBy(x => x);

                foreach (var item in newTup)
                {
                    strTwo = strTwo + GetFrequency(item);
                }
            }
            return strTwo;
        }

        private static string GetFrequency(int n)
        {
            string freq = string.Empty;

            switch (n)
            {
                case 1: freq = "Daily";
                    break;
                case 2: freq = "Weekly";
                    break;
                case 3: freq = "Monthly";
                    break;
                case 4: freq = "6 Months";
                    break;
                case 5: freq = "1 Year";
                    break;
                case 6: freq = "2 Year";
                    break;
                case 7: freq = "Fortnightly";
                    break;
                case 8: freq = "2 Months";
                    break;
                case 9: freq = "3 Months";
                    break;
                case 10: freq = "4 Months";
                    break;
                case 11: freq = "5 Months";
                    break;
                case 12: freq = "3 Years";
                    break;
                case 13: freq = "4 Years";
                    break;
                case 14: freq = "5 Years";
                    break;
                case 15: freq = "10 Years";
                    break;
                case 100: freq = "OneOff";
                    break;
                default:
                    break;
            }

            return freq;
        }

        public static ObservableCollection<MachinePartDescription> GetMachineParts(int selectedVehicle)
        {
            ObservableCollection<MachinePartDescription> machineWorkOrderList = new ObservableCollection<MachinePartDescription>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                conn.Open();
                try
                {
                    SqlCommand cmdGetData = new SqlCommand("SELECT MachineMaintenanceWorkOrder.id, Machines.machine_id As VehicleID,Machines.machine_name, " +
                                                           "MachineRepairDescription.machine_work_order_id, " +
                                                           "MachinePartDescription.sequence_id,MachinePartDescription.code,MachinePartDescription.description " +
                                                           "FROM MachineMaintenanceWorkOrder " +
                                                           "INNER JOIN Machines ON MachineMaintenanceWorkOrder.machine_id = Machines.machine_id " +
                                                           "INNER JOIN MachineRepairDescription ON MachineMaintenanceWorkOrder.id = MachineRepairDescription.machine_work_order_id " +
                                                           "INNER JOIN MachinePartDescription ON MachineRepairDescription.id = MachinePartDescription.machine_repair_id  " +
                                                           "WHERE Machines.machine_id=@MachineID AND MachineMaintenanceWorkOrder.is_completed = 'true'", conn);

                    cmdGetData.Parameters.AddWithValue("@MachineID", selectedVehicle);
                    using (SqlDataReader dr = cmdGetData.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                MachinePartDescription mpd = new MachinePartDescription();
                                mpd.ID = Convert.ToInt32(dr["id"]);
                                mpd.Machine = new Machines(0) { MachineID = Convert.ToInt16(dr["VehicleID"]), MachineName = dr["machine_name"].ToString() };
                                mpd.MachinePart = new MachineParts() { StrSequenceNumber = "P" + Convert.ToInt16(dr["sequence_id"]), SequenceNumber = Convert.ToInt16(dr["sequence_id"]), PartCode = dr["code"].ToString(), PartDescription = dr["description"].ToString() };
                                mpd.MachineSearchString = Convert.ToInt16(dr["VehicleID"]) + " " + dr["machine_name"].ToString();
                                machineWorkOrderList.Add(mpd);
                            }
                        }
                    }
                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return machineWorkOrderList;
        }


        public static int InsertNewMachine(Machines machine, string newMachineGroup)
        {
            int newGroupRes = 0, newMachineRes=0,result = 0;
            Int32 machineGroupID = 0, groupId=0;
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdNewGroup = new SqlCommand("IF NOT EXISTS (SELECT * FROM MachineGroup " +
                                                        "WHERE group_name = @GroupName) " +
                                                        "BEGIN " +
                                                        "INSERT INTO MachineGroup(group_name,group_active) " +
                                                        "VALUES (@GroupName,@GroupActive) END", conn);

                SqlCommand cmdGeMaxGroupID = new SqlCommand("SELECT MAX(group_id) FROM MachineGroup", conn);

                SqlCommand cmdInsertMachine = new SqlCommand("INSERT INTO Machines(group_id,stock_location_id,machine_name,type,machine_description,active) " +
                                                             "VALUES (@GroupID,@StockLocationID,@MachineName,@Type,@MachineDescription,@Active)", conn);

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();

                try
                {
                    if (!string.IsNullOrWhiteSpace(newMachineGroup))
                    {
                        cmdNewGroup.Transaction = trans;
                        cmdNewGroup.Parameters.AddWithValue("@GroupName", newMachineGroup);
                        cmdNewGroup.Parameters.AddWithValue("@GroupActive", true);
                        newGroupRes = cmdNewGroup.ExecuteNonQuery();

                        cmdGeMaxGroupID.Transaction = trans;
                        machineGroupID = Convert.ToInt32(cmdGeMaxGroupID.ExecuteScalar());

                        groupId = machineGroupID;
                    }
                    else
                    {
                        groupId = machine.MachineGroup.GroupID;
                    }

                    cmdInsertMachine.Transaction = trans;
                    cmdInsertMachine.Parameters.AddWithValue("@GroupID", groupId);
                    cmdInsertMachine.Parameters.AddWithValue("@StockLocationID", machine.StockLocation.ID);
                    cmdInsertMachine.Parameters.AddWithValue("@MachineName", machine.MachineName);
                    cmdInsertMachine.Parameters.AddWithValue("@Type", machine.MachineType);
                    cmdInsertMachine.Parameters.AddWithValue("@MachineDescription", machine.MachineDescription);
                    cmdInsertMachine.Parameters.AddWithValue("@Active", machine.IsActive);
                    newMachineRes = cmdInsertMachine.ExecuteNonQuery();

                    if (!string.IsNullOrWhiteSpace(newMachineGroup) && newGroupRes > 0 && machineGroupID > 0 && newMachineRes > 0)
                    {
                        result = 1;
                        trans.Commit();
                    }
                    else if (string.IsNullOrWhiteSpace(newMachineGroup) && newMachineRes > 0)
                    {
                        result = 1;
                        trans.Commit();
                    }
                    else
                    {
                        result = -1;
                        trans.Rollback();
                    }
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("Error adding data to Machines: " + e);
                }
                finally
                {
                    conn.Close();
                }
                return result;
            }

        }

        public static int UpdateMachine(Machines Machines,string newMachineGroup)
        {
            int result = 0, newGroupRes = 0;
            Int32 machineGroupID =0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdUpdateMachine = new SqlCommand("UPDATE Machines " +
                                                             "SET stock_location_id = @StockLocID,machine_name=@MachineName,type=@Type,machine_description=@MachineDescription,active=@Active, group_id=@GroupID " +
                                                             "WHERE machine_id = @ID", conn);

                SqlCommand cmdNewGroup = new SqlCommand("IF NOT EXISTS (SELECT * FROM MachineGroup " +
                                                        "WHERE group_name = @GroupName) " +
                                                        "BEGIN " +
                                                        "INSERT INTO MachineGroup(group_name,group_active) " +
                                                        "VALUES (@GroupName,@GroupActive) END", conn);

                SqlCommand cmdGeMaxGroupID = new SqlCommand("SELECT MAX(group_id) FROM MachineGroup", conn);

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();

                try
                {
                    if(Machines.MachineGroup.GroupID == 101)
                    {
                        cmdNewGroup.Transaction = trans;
                        cmdNewGroup.Parameters.AddWithValue("@GroupName", newMachineGroup);
                        cmdNewGroup.Parameters.AddWithValue("@GroupActive", true);
                        newGroupRes = cmdNewGroup.ExecuteNonQuery();

                        cmdGeMaxGroupID.Transaction = trans;
                        machineGroupID = Convert.ToInt32(cmdGeMaxGroupID.ExecuteScalar());
                    }
                    else
                    {
                        machineGroupID = Machines.MachineGroup.GroupID;
                    }

                    cmdUpdateMachine.Transaction = trans;
                    cmdUpdateMachine.Parameters.AddWithValue("@ID", Machines.MachineID);
                    cmdUpdateMachine.Parameters.AddWithValue("@StockLocID", Machines.StockLocation.ID);
                    cmdUpdateMachine.Parameters.AddWithValue("@MachineName", Machines.MachineName);
                    cmdUpdateMachine.Parameters.AddWithValue("@Type", Machines.MachineType);
                    cmdUpdateMachine.Parameters.AddWithValue("@MachineDescription", Machines.MachineDescription);
                    cmdUpdateMachine.Parameters.AddWithValue("@Active", Machines.IsActive);
                    cmdUpdateMachine.Parameters.AddWithValue("@GroupID", machineGroupID);
                    result = cmdUpdateMachine.ExecuteNonQuery();

                    trans.Commit();

                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("Error: Updating SalesOrder Required Date" + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return result;
        }

        public static ObservableCollection<Machines> GetAllMachinesActiveOrNot()
        {
            ObservableCollection<Machines> machineList = new ObservableCollection<Machines>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT Machines.machine_id,Machines.stock_location_id, StockLocation.stock_name,Machines.machine_name,Machines.type,Machines.machine_description,Machines.active " +
                                                                  "FROM Machines " +
                                                                  "INNER JOIN StockLocation ON Machines.stock_location_id = StockLocation.id", conn))
                    {

                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    Machines m = new Machines(0);
                                    m.MachineID = Convert.ToInt16(dr["machine_id"]);
                                    m.StockLocation = new StockLocation() { ID = Convert.ToInt16(dr["stock_location_id"]), StockName = dr["stock_name"].ToString() };
                                    m.MachineName = dr["machine_name"].ToString();
                                    m.MachineType = dr["type"].ToString();
                                    m.MachineDescription = dr["machine_description"].ToString();
                                    m.IsActive = Convert.ToBoolean(dr["active"]);
                                    m.MachineString = dr["machine_id"].ToString() + " | " + dr["machine_name"].ToString();
                                    machineList.Add(m);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading production line: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return machineList;
        }

        public static Machines GetMachineByMachineID(int id)
        {
            Machines machine = new Machines(0);

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    using (SqlCommand cmd = new SqlCommand("SELECT Machines.machine_id,Machines.group_id,Machines.stock_location_id,Machines.machine_name,Machines.type, " +
                                                           "Machines.machine_description,Machines.active, MachineGroup.group_name " + 
                                                           "FROM Machines " +
                                                           "INNER JOIN MachineGroup ON Machines.group_id = MachineGroup.group_id " +
                                                           "WHERE machine_id=@MID", conn))
                    {
                        conn.Open();
                        cmd.Parameters.AddWithValue("@MID", id);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {

                                    machine.MachineID = Convert.ToInt16(dr["machine_id"]);
                                    machine.StockLocation = new StockLocation() { ID = Convert.ToInt16(dr["stock_location_id"]) };
                                    machine.MachineName = dr["machine_name"].ToString();
                                    machine.MachineType = dr["type"].ToString();
                                    machine.MachineDescription = dr["machine_description"].ToString();
                                    machine.MachineGroup = new MachineGroup() { GroupID  = Convert.ToInt16(dr["group_id"]), GroupName = dr["group_name"].ToString() };
                                    machine.IsActive = Convert.ToBoolean(dr["active"]);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL Vehicle ERROR : " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return machine;
        }

        public static int InsertNewUpdateMachineWorkOrders(List<MachineWorkOrder> newMachineWorkOrderList)
        {
            int result = 0;
            int result1 = 0;
            int result2 = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdInsertNewOrder = new SqlCommand("INSERT INTO MachineMaintenanceWorkOrder(machine_id,user_id,urgency,work_order_type,maintenance_freq,maintenance_freq_str,first_service_date,next_service_date,created_date,created_by,is_completed,status) " +
                                                              "VALUES (@MachineID,@UserID,@Urgency,@WorkOrderType,@MaintenanceFreq,@MaintenanceFreqStr,@FirstServiceDate,@NextServiceDate,@CreatedDate,@createdBy,@IsCompleted,@Status)", conn);

                SqlCommand cmdGeMachineWorkOrderID = new SqlCommand("SELECT MAX(id) FROM MachineMaintenanceWorkOrder", conn);

                SqlCommand cmdInsertMachineWorkDescription = new SqlCommand("INSERT INTO MachineWorkDescription(machine_work_order_id,machine_maintenance_info_id,machine_repair_work_order_id,code,description,is_completed,active) " +
                                                                            "VALUES (@MachineWorkOrderID,@MachineMaintenanceInfoID,@MachineRepairWorkOrderID,@Code,@Description,@IsCompleted,@Active)", conn);

                SqlCommand cmdUpdateWorkOrder = new SqlCommand("UPDATE MachineMaintenanceWorkOrder " +
                                                               "SET maintenance_freq = @MaintenanceFreq,maintenance_freq_str=@MaintenanceFreqStr,created_date=@CreatedDate " +
                                                               "WHERE id = @ID", conn);

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {
                    foreach (var item in newMachineWorkOrderList)
                    {
                        Int32 workOrderId = 0;
                        if (item.WorkOrderNo == 0)
                        {
                            cmdInsertNewOrder.Transaction = trans;
                            cmdInsertNewOrder.Parameters.AddWithValue("@MachineID", item.Machine.MachineID);
                            cmdInsertNewOrder.Parameters.AddWithValue("@UserID", item.User.ID);
                            cmdInsertNewOrder.Parameters.AddWithValue("@Urgency", item.Urgency);
                            cmdInsertNewOrder.Parameters.AddWithValue("@WorkOrderType", item.WorkOrderType);
                            cmdInsertNewOrder.Parameters.AddWithValue("@MaintenanceFreq", item.MachineMaintenanceFrequency.ID);
                            cmdInsertNewOrder.Parameters.AddWithValue("@MaintenanceFreqStr", item.MachineMaintenanceFrequency.Frequency);
                            cmdInsertNewOrder.Parameters.AddWithValue("@FirstServiceDate", item.FirstServiceDate);
                            cmdInsertNewOrder.Parameters.AddWithValue("@NextServiceDate", item.NextServiceDate);
                            cmdInsertNewOrder.Parameters.AddWithValue("@CreatedDate", item.CreatedDate);
                            cmdInsertNewOrder.Parameters.AddWithValue("@createdBy", item.CreatedBy);
                            cmdInsertNewOrder.Parameters.AddWithValue("@IsCompleted", item.IsCompleted);
                            cmdInsertNewOrder.Parameters.AddWithValue("@Status", item.Status);
                            result1 = cmdInsertNewOrder.ExecuteNonQuery();
                            cmdInsertNewOrder.Parameters.Clear();

                            cmdGeMachineWorkOrderID.Transaction = trans;
                            workOrderId = Convert.ToInt32(cmdGeMachineWorkOrderID.ExecuteScalar());
                            cmdGeMachineWorkOrderID.Parameters.Clear();

                            foreach (var items in item.MachineMaintenanceInfo)
                            {
                                cmdInsertMachineWorkDescription.Transaction = trans;
                                cmdInsertMachineWorkDescription.Parameters.AddWithValue("@MachineWorkOrderID", workOrderId);
                                cmdInsertMachineWorkDescription.Parameters.AddWithValue("@MachineMaintenanceInfoID", items.ID);
                                cmdInsertMachineWorkDescription.Parameters.AddWithValue("@MachineRepairWorkOrderID", 0);
                                cmdInsertMachineWorkDescription.Parameters.AddWithValue("@Code", items.MachineCode);
                                cmdInsertMachineWorkDescription.Parameters.AddWithValue("@Description", items.MachineDescription);
                                cmdInsertMachineWorkDescription.Parameters.AddWithValue("@IsCompleted", false);
                                cmdInsertMachineWorkDescription.Parameters.AddWithValue("@Active", true);
                                cmdInsertMachineWorkDescription.ExecuteNonQuery();
                                cmdInsertMachineWorkDescription.Parameters.Clear();
                            }
                        }
                        else
                        {
                            cmdUpdateWorkOrder.Transaction = trans;
                            cmdUpdateWorkOrder.Parameters.AddWithValue("@ID", item.WorkOrderNo);
                            cmdUpdateWorkOrder.Parameters.AddWithValue("@MaintenanceFreq", item.MachineMaintenanceFrequency.ID);
                            cmdUpdateWorkOrder.Parameters.AddWithValue("@MaintenanceFreqStr", item.MachineMaintenanceFrequency.Frequency);
                            cmdUpdateWorkOrder.Parameters.AddWithValue("@CreatedDate", item.CreatedDate);
                            result2 = cmdUpdateWorkOrder.ExecuteNonQuery();
                            cmdUpdateWorkOrder.Parameters.Clear();

                            foreach (var items in item.MachineMaintenanceInfo)
                            {
                                cmdInsertMachineWorkDescription.Transaction = trans;
                                cmdInsertMachineWorkDescription.Parameters.AddWithValue("@MachineWorkOrderID", item.WorkOrderNo);
                                cmdInsertMachineWorkDescription.Parameters.AddWithValue("@MachineMaintenanceInfoID", items.ID);
                                cmdInsertMachineWorkDescription.Parameters.AddWithValue("@MachineRepairWorkOrderID", 0);
                                cmdInsertMachineWorkDescription.Parameters.AddWithValue("@Code", items.MachineCode);
                                cmdInsertMachineWorkDescription.Parameters.AddWithValue("@Description", items.MachineDescription);
                                cmdInsertMachineWorkDescription.Parameters.AddWithValue("@IsCompleted", false);
                                cmdInsertMachineWorkDescription.Parameters.AddWithValue("@Active", true);
                                cmdInsertMachineWorkDescription.ExecuteNonQuery();
                                cmdInsertMachineWorkDescription.Parameters.Clear();
                            }
                        }
                    }

                    if (result1 > 0 || result2 > 0)
                    {
                        result = 1;
                    }

                    trans.Commit();

                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("Production SQL Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return result;
        }

        public static List<MachineSpecialRequiremants> GetMachineSpecialReqByMachId(int id)
        {
            List<MachineSpecialRequiremants> machineSpecialRequiremantsList = new List<MachineSpecialRequiremants>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    using (SqlCommand cmd = new SqlCommand("SELECT * FROM MachineSpecialRequiremants WHERE machine_id=@MID", conn))
                    {
                        conn.Open();
                        cmd.Parameters.AddWithValue("@MID", id);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr != null)
                            {

                                while (dr.Read())
                                {
                                    MachineSpecialRequiremants msr = new MachineSpecialRequiremants();
                                    msr.ID = Convert.ToInt16(dr["id"]);
                                    msr.Machine = new Machines(0) { MachineID = Convert.ToInt16(dr["machine_id"]) };
                                    msr.Description = dr["description"].ToString();
                                    machineSpecialRequiremantsList.Add(msr);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL Vehicle ERROR : " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return machineSpecialRequiremantsList;
        }

        public static ObservableCollection<MachineWorkOrder> GetMachineWorkOrdersByDateAndGroupID(int groupId, DateTime sd)
        {
            string currDate = DateTime.Now.ToString("yyyy-MM-dd");
            string searchDate = sd.ToString("yyyy-MM-dd");

            string wstr = string.Empty;
            if (DateTime.Now.Date == sd.Date)
            {
                wstr = "(CONVERT(date,MachineMaintenanceWorkOrder.next_service_date) = @CurrDate OR CONVERT(date,MachineMaintenanceWorkOrder.show_order_date) <= @SearchDate) AND ";

            }
            else
            {
                wstr = "CONVERT(date,MachineMaintenanceWorkOrder.show_order_date) <= @SearchDate AND ";

            }

            ObservableCollection<MachineWorkOrder> machineWorkOrderList = new ObservableCollection<MachineWorkOrder>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                conn.Open();
                try
                {
                    SqlCommand cmdGetData = new SqlCommand("SELECT MachineMaintenanceWorkOrder.id,MachineMaintenanceWorkOrder.machine_id,Machines.machine_name,Machines.type,MachineMaintenanceWorkOrder.user_id,Users.FirstName,Users.LastName,MachineMaintenanceWorkOrder.urgency,MachineMaintenanceWorkOrder.work_order_type,MachineMaintenanceWorkOrder.first_service_date, " +
                                                           "MachineMaintenanceWorkOrder.maintenance_freq,MachineMaintenanceWorkOrder.maintenance_freq_str,MachineMaintenanceWorkOrder.next_service_date,MachineMaintenanceWorkOrder.created_date,MachineMaintenanceWorkOrder.created_by,MachineMaintenanceWorkOrder.is_completed, " +
                                                           "MachineMaintenanceWorkOrder.completed_date,MachineMaintenanceWorkOrder.completed_by,MachineMaintenanceWorkOrder.status, " +
                                                           "MachineGroup.group_id,MachineGroup.group_name,MachineGroup.group_active,MachineMaintenanceWorkOrder.order_type " +
                                                           "FROM MachineMaintenanceWorkOrder " +
                                                           "INNER JOIN Machines ON MachineMaintenanceWorkOrder.machine_id = Machines.machine_id " +
                                                           "LEFT JOIN Users ON MachineMaintenanceWorkOrder.user_id = Users.ID " +
                                                           "LEFT JOIN MachineGroup ON Machines.group_id = MachineGroup.group_id " +
                                                           "WHERE " + wstr + " MachineGroup.group_id = @GroupID AND MachineMaintenanceWorkOrder.is_completed ='false' AND (MachineMaintenanceWorkOrder.status <> 'Cancelled' AND MachineMaintenanceWorkOrder.status <> 'Completed') " +
                                                           "ORDER BY MachineMaintenanceWorkOrder.next_service_date,MachineMaintenanceWorkOrder.urgency", conn);


                    cmdGetData.Parameters.AddWithValue("@CurrDate", currDate);
                    cmdGetData.Parameters.AddWithValue("@SearchDate", searchDate);
                    cmdGetData.Parameters.AddWithValue("@GroupID", groupId);
                    using (SqlDataReader dr = cmdGetData.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {

                                if (Convert.ToInt16(dr["maintenance_freq"]) != 7)
                                {
                                    DateTime? dt = dr["completed_date"] as DateTime?;
                                    MachineWorkOrder vwo = new MachineWorkOrder();
                                    vwo.WorkOrderNo = Convert.ToInt32(dr["id"]);
                                    vwo.FirstServiceDate = Convert.ToDateTime(dr["first_service_date"]);
                                    vwo.Machine = new Machines(0) { MachineID = Convert.ToInt16(dr["machine_id"]), MachineName = dr["machine_name"].ToString(), MachineType = dr["type"].ToString(), MachineGroup = new MachineGroup() { GroupID = CheckNull<int>(dr["group_id"]), GroupName = dr["group_name"].ToString(), GroupActive = CheckNull<bool>(dr["group_active"]) } };
                                    vwo.User = new User() { ID = Convert.ToInt16(dr["user_id"]), FullName = dr["FirstName"].ToString() + " " + dr["LastName"].ToString() };
                                    vwo.Urgency = Convert.ToInt16(dr["urgency"]);
                                    vwo.WorkOrderType = dr["work_order_type"].ToString();
                                    vwo.MachineMaintenanceFrequency = new MachineMaintenanceFrequency() { ID = Convert.ToInt16(dr["maintenance_freq"]), Frequency = dr["maintenance_freq_str"].ToString() };
                                    vwo.NextServiceDate = Convert.ToDateTime(dr["next_service_date"]);
                                    vwo.CreatedDate = Convert.ToDateTime(dr["created_date"]);
                                    vwo.CreatedBy = dr["created_by"].ToString();
                                    vwo.IsCompleted = Convert.ToBoolean(dr["is_completed"]);
                                    vwo.CompletedDate = dt;
                                    vwo.UrgencyStr = Convert.ToInt16(dr["urgency"]) == 1 ? "Urgent" : "Normal";
                                    vwo.OrderType = string.IsNullOrWhiteSpace(dr["order_type"].ToString()) ? "Internal" : dr["order_type"].ToString();
                                    machineWorkOrderList.Add(vwo);

                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return machineWorkOrderList;
        }


        public static List<MachineRepairDescription> GetMachineRepairDescriptionByIDColl(List<MachineWorkDescription> mwod)
        {
            List<MachineRepairDescription> machineWorkDescription = new List<MachineRepairDescription>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                conn.Open();
                try
                {
                    SqlCommand cmdGetData = new SqlCommand("SELECT * FROM MachineRepairDescription " +
                                                           "WHERE machine_work_description_id=@ID AND is_active = 'True' ", conn);

                    foreach (var item in mwod)
                    {
                        cmdGetData.Parameters.AddWithValue("@ID", item.ID);
                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    MachineRepairDescription vwo = new MachineRepairDescription();
                                    vwo.ID = Convert.ToInt32(dr["id"]);
                                    vwo.MachineWorkDescriptionID = Convert.ToInt32(dr["machine_work_description_id"]);
                                    vwo.MachineWorkOrderID = Convert.ToInt32(dr["machine_work_order_id"]);
                                    vwo.SequenceNumber = Convert.ToInt16(dr["sequence_id"]);
                                    vwo.RepairDescription = dr["description"].ToString();
                                    vwo.PartsOrdered = Convert.ToBoolean(dr["parts_orded"]);
                                    vwo.IsCompleted = Convert.ToBoolean(dr["is_completed"]);
                                    vwo.IsActive = Convert.ToBoolean(dr["is_active"]);
                                    machineWorkDescription.Add(vwo);
                                }
                            }
                        }
                        cmdGetData.Parameters.Clear();
                    }

                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return machineWorkDescription;

        }

        public static List<MachineParts> GetMachinePartsDescriptionByColl(List<MachineRepairDescription> vrdList)
        {
            List<MachineParts> machineWorkDescription = new List<MachineParts>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                conn.Open();
                try
                {
                    SqlCommand cmdGetData = new SqlCommand("SELECT * FROM MachinePartDescription " +
                                                           "WHERE machine_repair_id=@ID AND active = 'True' ", conn);

                    foreach (var item in vrdList)
                    {
                        cmdGetData.Parameters.AddWithValue("@ID", item.ID);
                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    MachineParts mp = new MachineParts();
                                    mp.PartID = Convert.ToInt32(dr["id"]);
                                    mp.MachineRepairID = Convert.ToInt32(dr["machine_repair_id"]);
                                    mp.SequenceNumber = Convert.ToInt16(dr["sequence_id"]);
                                    mp.PartCode = dr["code"].ToString();
                                    mp.PartDescription = dr["description"].ToString();
                                    mp.Active = Convert.ToBoolean(dr["active"]);
                                    machineWorkDescription.Add(mp);
                                }
                            }
                        }
                        cmdGetData.Parameters.Clear();
                    }
                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return machineWorkDescription;
        }



        public static List<MachineWorkOrder> CheckIfMachineWorkOrderExistColl(List<MachineWorkOrder> machineWorkOrder)
        {

            List<MachineWorkOrder> machineWorkOrderList = new List<MachineWorkOrder>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    using (SqlCommand cmd = new SqlCommand("SELECT MachineMaintenanceWorkOrder.id AS WOID,MachineMaintenanceWorkOrder.machine_id,MachineMaintenanceWorkOrder.next_service_date,MachineMaintenanceWorkOrder.maintenance_freq,MachineMaintenanceWorkOrder.maintenance_freq_str " +
                                                           "FROM MachineMaintenanceWorkOrder " +
                                                           "WHERE machine_id = @MachineID AND " +
                                                           "(next_service_date >= @NextAvaDateStr AND next_service_date <= @NextAvaDateAfterAditionStr) " +
                                                           "AND status ='Pending' AND MachineMaintenanceWorkOrder.work_order_type <> 'Repair' " +
                                                           "AND MachineMaintenanceWorkOrder.id <> @WorkOrderID", conn))
                    {
                        conn.Open();

                        foreach (var item in machineWorkOrder)
                        {
                            foreach (var itemMMI in item.MachineMaintenanceInfo)
                            {
                                cmd.Parameters.AddWithValue("@WorkOrderID", item.WorkOrderNo);
                                cmd.Parameters.AddWithValue("@MachineID", item.Machine.MachineID);
                                cmd.Parameters.AddWithValue("@NextAvaDateStr", itemMMI.FirstDate.ToString("yyyy-MM-dd"));
                                cmd.Parameters.AddWithValue("@NextAvaDateAfterAditionStr", itemMMI.LastDate.ToString("yyyy-MM-dd"));


                                using (SqlDataReader dr = cmd.ExecuteReader())
                                {
                                    if (dr != null)
                                    {
                                        while (dr.Read())
                                        {
                                            if (machineWorkOrderList.Count == 0)
                                            {
                                                machineWorkOrderList.Add(new MachineWorkOrder() { WorkOrderNo = Convert.ToInt32(dr["WOID"]), Machine = new Machines(0) { MachineID = Convert.ToInt16(dr["machine_id"]) }, NextServiceDate = Convert.ToDateTime(dr["next_service_date"]), MachineMaintenanceInfo = new ObservableCollection<MachineMaintenanceInfo>(), MachineMaintenanceFrequency = new MachineMaintenanceFrequency() { ID = Convert.ToInt16(dr["maintenance_freq"]), Frequency = dr["maintenance_freq_str"].ToString() } });
                                                //avaList.Add(Tuple.Create(Convert.ToInt32(dr["WOID"]), new MachineMaintenanceFrequency() { ID = Convert.ToInt16(dr["maintenance_freq"]), Frequency = dr["maintenance_freq_str"].ToString() }, Convert.ToDateTime(dr["next_service_date"])));
                                            }
                                            else
                                            {
                                                bool ava = machineWorkOrderList.Any(x => x.WorkOrderNo == Convert.ToInt32(dr["WOID"]));
                                                if (ava == false)
                                                {
                                                    machineWorkOrderList.Add(new MachineWorkOrder() { WorkOrderNo = Convert.ToInt32(dr["WOID"]), Machine = new Machines(0) { MachineID = Convert.ToInt16(dr["machine_id"]) }, NextServiceDate = Convert.ToDateTime(dr["next_service_date"]), MachineMaintenanceInfo = new ObservableCollection<MachineMaintenanceInfo>(), MachineMaintenanceFrequency = new MachineMaintenanceFrequency() { ID = Convert.ToInt16(dr["maintenance_freq"]), Frequency = dr["maintenance_freq_str"].ToString() } });
                                                    //avaList.Add(Tuple.Create(Convert.ToInt32(dr["WOID"]), new MachineMaintenanceFrequency() { ID = Convert.ToInt16(dr["maintenance_freq"]), Frequency = dr["maintenance_freq_str"].ToString() }, Convert.ToDateTime(dr["next_service_date"])));
                                                }
                                            }
                                        }
                                    }
                                }
                                cmd.Parameters.Clear();
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL MachineWorkOrder error : " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return machineWorkOrderList;
        }

        public static List<MachineMaintenanceInfo> GetMachineMaintenanceInfoByMachineID(int mid)
        {

            List<MachineMaintenanceInfo> machineWorkOrderList = new List<MachineMaintenanceInfo>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    using (SqlCommand cmd = new SqlCommand("SELECT MachineMaintenanceInfo.id,MachineMaintenanceInfo.machine_id,MachineMaintenanceInfo.machine_maintenance_freq_id,MachineMaintenanceInfo.machine_code,MachineMaintenanceInfo.machine_description,MachineMaintenanceInfo.repetition,MachineMaintenanceInfo.created_date,MachineMaintenanceInfo.created_by,MachineMaintenanceInfo.active,MachineMaintenanceFrequency.frequency " +
                                                           "FROM MachineMaintenanceInfo " +
                                                           "INNER JOIN MachineMaintenanceFrequency ON MachineMaintenanceInfo.machine_maintenance_freq_id =MachineMaintenanceFrequency.id " +
                                                           "WHERE machine_id = @MachineID AND Active ='True'", conn))
                    {
                        conn.Open();

                        
                            
                                cmd.Parameters.AddWithValue("@MachineID", mid);                                
                                using (SqlDataReader dr = cmd.ExecuteReader())
                                {
                                    if (dr != null)
                                    {
                                        while (dr.Read())
                                        {
                                            MachineMaintenanceInfo mmi = new MachineMaintenanceInfo();
                                            mmi.ID = Convert.ToInt32(dr["id"]);
                                            mmi.Machine = new Machines(0) { MachineID = Convert.ToInt16(dr["machine_id"]) };
                                            mmi.MachineMaintenanceFrequency = new MachineMaintenanceFrequency() { ID = Convert.ToInt16(dr["machine_maintenance_freq_id"]), Frequency = dr["frequency"].ToString() };
                                            mmi.MachineCode = dr["machine_code"].ToString();
                                            mmi.MachineDescription = dr["machine_description"].ToString();
                                            mmi.Repetition = dr["repetition"].ToString();
                                            mmi.CreatedDate = Convert.ToDateTime(dr["created_date"]);
                                            mmi.CreatedBy = dr["created_by"].ToString();
                                            mmi.IsActive = Convert.ToBoolean(dr["active"]);
                                            machineWorkOrderList.Add(mmi);                                          
                                        }
                                    }
                                }                               
                            
                      
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL MachineWorkOrder error : " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return machineWorkOrderList;
        }


        public static int CompleteMachineWorkOrder(List<MachineWorkOrder> newMachineWorkOrderList, List<MachineWorkOrder> toCompleteWorkOrders, List<MachineWorkDescription> mwd, int userId)
        {
            int result = 0;
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {

                SqlCommand cmdUpdateMachineWorkDescription = new SqlCommand("UPDATE MachineWorkDescription SET is_completed = @IsCompleted " +
                                                                            "WHERE id = @ID", conn);

                SqlCommand cmdUpdateMachineMaintInfo = new SqlCommand("UPDATE MachineMaintenanceInfo SET last_completed_date = @LastCompletedDate " +
                                                                      "WHERE id = @ID", conn);

                SqlCommand cmdUpdateMachineRepairDescription = new SqlCommand("UPDATE MachineRepairDescription SET is_completed = @IsCompleted " +
                                                                              "WHERE id = @ID", conn);

                SqlCommand cmdUpdateMachinePartDescription = new SqlCommand("UPDATE MachinePartDescription SET completed = @IsCompleted " +
                                                                              "WHERE machine_repair_id = @ID", conn);

                SqlCommand cmdMachineWorkOrder = new SqlCommand("UPDATE MachineMaintenanceWorkOrder SET user_id=@UserID,completed_date=@CompletedDate,completed_by=@CompletedBy,is_completed = 'True',status='Completed' " +
                                                                "WHERE id = @ID", conn);

                //SqlCommand cmdInsertNewOrder = new SqlCommand("INSERT INTO MachineMaintenanceWorkOrder(machine_id,user_id,urgency,work_order_type,maintenance_freq,maintenance_freq_str,first_service_date,next_service_date,created_date,created_by,is_completed,status) " +
                //                                              "VALUES (@MachineID,@UserID,@Urgency,@WorkOrderType,@MaintenanceFreq,@MaintenanceFreqStr,@FirstServiceDate,@NextServiceDate,@CreatedDate,@createdBy,@IsCompleted,@Status)", conn);

                //SqlCommand cmdGeMachineWorkOrderID = new SqlCommand("SELECT MAX(id) FROM MachineMaintenanceWorkOrder", conn);

                //SqlCommand cmdInsertMachineWorkDescription = new SqlCommand("INSERT INTO MachineWorkDescription(machine_work_order_id,machine_maintenance_info_id,machine_repair_work_order_id,code,description,is_completed,active) " +
                //                                                            "VALUES (@MachineWorkOrderID,@MachineMaintenanceInfoID,@MachineRepairWorkOrderID,@Code,@Description,@IsCompleted,@Active)", conn);

                //SqlCommand cmdUpdateWorkOrder = new SqlCommand("UPDATE MachineMaintenanceWorkOrder " +
                //                                               "SET maintenance_freq = @MaintenanceFreq,maintenance_freq_str=@MaintenanceFreqStr,created_date=@CreatedDate " +
                //                                               "WHERE id = @ID", conn);

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {
                    //Complete Descriptions

                    foreach (var item in toCompleteWorkOrders)
                    {
                        //Complete Workorder
                        cmdMachineWorkOrder.Transaction = trans;
                        cmdMachineWorkOrder.Parameters.AddWithValue("@ID", item.WorkOrderNo);
                        cmdMachineWorkOrder.Parameters.AddWithValue("@UserID", userId);
                        cmdMachineWorkOrder.Parameters.AddWithValue("@CompletedDate", DateTime.Now);
                        cmdMachineWorkOrder.Parameters.AddWithValue("@CompletedBy", item.CreatedBy);
                        cmdMachineWorkOrder.ExecuteNonQuery();
                        cmdMachineWorkOrder.Parameters.Clear();
                    }

                    foreach (var item in mwd)
                    {
                        cmdUpdateMachineWorkDescription.Transaction = trans;
                        cmdUpdateMachineWorkDescription.Parameters.AddWithValue("@ID", item.ID);
                        cmdUpdateMachineWorkDescription.Parameters.AddWithValue("@IsCompleted", true);
                        result = cmdUpdateMachineWorkDescription.ExecuteNonQuery();
                        cmdUpdateMachineWorkDescription.Parameters.Clear();

                        cmdUpdateMachineMaintInfo.Transaction = trans;
                        cmdUpdateMachineMaintInfo.Parameters.AddWithValue("@ID", item.MachineMaintenanceInfo.ID);
                        cmdUpdateMachineMaintInfo.Parameters.AddWithValue("@LastCompletedDate", DateTime.Now);
                        result = cmdUpdateMachineMaintInfo.ExecuteNonQuery();
                        cmdUpdateMachineMaintInfo.Parameters.Clear();

                        foreach (var items in item.MachineRepairDescription)
                        {
                            cmdUpdateMachineRepairDescription.Transaction = trans;
                            cmdUpdateMachineRepairDescription.Parameters.AddWithValue("@ID", items.ID);
                            cmdUpdateMachineRepairDescription.Parameters.AddWithValue("@IsCompleted", items.IsCompleted);
                            cmdUpdateMachineRepairDescription.ExecuteNonQuery();
                            cmdUpdateMachineRepairDescription.Parameters.Clear();

                            foreach (var itemz in items.MachineParts)
                            {
                                cmdUpdateMachinePartDescription.Transaction = trans;
                                cmdUpdateMachinePartDescription.Parameters.AddWithValue("@ID", itemz.MachineRepairID);
                                cmdUpdateMachinePartDescription.Parameters.AddWithValue("@IsCompleted", items.IsCompleted);
                                cmdUpdateMachinePartDescription.ExecuteNonQuery();
                                cmdUpdateMachinePartDescription.Parameters.Clear();
                            }
                        }
                    }

                    //foreach (var item in newMachineWorkOrderList)
                    //{

                    //    Int32 workOrderId = 0;
                    //    if (item.WorkOrderNo == 0)
                    //    {
                    //        cmdInsertNewOrder.Transaction = trans;
                    //        cmdInsertNewOrder.Parameters.AddWithValue("@MachineID", item.Machine.MachineID);
                    //        cmdInsertNewOrder.Parameters.AddWithValue("@UserID", item.User.ID);
                    //        cmdInsertNewOrder.Parameters.AddWithValue("@Urgency", item.Urgency);
                    //        cmdInsertNewOrder.Parameters.AddWithValue("@WorkOrderType", item.WorkOrderType);
                    //        cmdInsertNewOrder.Parameters.AddWithValue("@MaintenanceFreq", item.MachineMaintenanceFrequency.ID);
                    //        cmdInsertNewOrder.Parameters.AddWithValue("@MaintenanceFreqStr", item.MachineMaintenanceFrequency.Frequency);
                    //        cmdInsertNewOrder.Parameters.AddWithValue("@FirstServiceDate", item.FirstServiceDate);
                    //        cmdInsertNewOrder.Parameters.AddWithValue("@NextServiceDate", item.NextServiceDate);
                    //        cmdInsertNewOrder.Parameters.AddWithValue("@CreatedDate", item.CreatedDate);
                    //        cmdInsertNewOrder.Parameters.AddWithValue("@createdBy", item.CreatedBy);
                    //        cmdInsertNewOrder.Parameters.AddWithValue("@IsCompleted", item.IsCompleted);
                    //        cmdInsertNewOrder.Parameters.AddWithValue("@Status", item.Status);
                    //        cmdInsertNewOrder.ExecuteNonQuery();
                    //        cmdInsertNewOrder.Parameters.Clear();

                    //        cmdGeMachineWorkOrderID.Transaction = trans;
                    //        workOrderId = Convert.ToInt32(cmdGeMachineWorkOrderID.ExecuteScalar());
                    //        cmdGeMachineWorkOrderID.Parameters.Clear();

                    //        foreach (var items in item.MachineMaintenanceInfo)
                    //        {
                    //            cmdInsertMachineWorkDescription.Transaction = trans;
                    //            cmdInsertMachineWorkDescription.Parameters.AddWithValue("@MachineWorkOrderID", workOrderId);
                    //            cmdInsertMachineWorkDescription.Parameters.AddWithValue("@MachineMaintenanceInfoID", items.ID);
                    //            cmdInsertMachineWorkDescription.Parameters.AddWithValue("@MachineRepairWorkOrderID", 0);
                    //            cmdInsertMachineWorkDescription.Parameters.AddWithValue("@Code", items.MachineCode);
                    //            cmdInsertMachineWorkDescription.Parameters.AddWithValue("@Description", items.MachineDescription);
                    //            cmdInsertMachineWorkDescription.Parameters.AddWithValue("@IsCompleted", false);
                    //            cmdInsertMachineWorkDescription.Parameters.AddWithValue("@Active", true);
                    //            cmdInsertMachineWorkDescription.ExecuteNonQuery();
                    //            cmdInsertMachineWorkDescription.Parameters.Clear();
                    //        }
                    //    }
                    //    else
                    //    {
                    //        cmdUpdateWorkOrder.Transaction = trans;
                    //        cmdUpdateWorkOrder.Parameters.AddWithValue("@ID", item.WorkOrderNo);
                    //        cmdUpdateWorkOrder.Parameters.AddWithValue("@MaintenanceFreq", item.MachineMaintenanceFrequency.ID);
                    //        cmdUpdateWorkOrder.Parameters.AddWithValue("@MaintenanceFreqStr", item.MachineMaintenanceFrequency.Frequency);
                    //        cmdUpdateWorkOrder.Parameters.AddWithValue("@CreatedDate", item.CreatedDate);
                    //        cmdUpdateWorkOrder.ExecuteNonQuery();
                    //        cmdUpdateWorkOrder.Parameters.Clear();

                    //        foreach (var items in item.MachineMaintenanceInfo)
                    //        {
                    //            cmdInsertMachineWorkDescription.Transaction = trans;
                    //            cmdInsertMachineWorkDescription.Parameters.AddWithValue("@MachineWorkOrderID", item.WorkOrderNo);
                    //            cmdInsertMachineWorkDescription.Parameters.AddWithValue("@MachineMaintenanceInfoID", items.ID);
                    //            cmdInsertMachineWorkDescription.Parameters.AddWithValue("@MachineRepairWorkOrderID", 0);
                    //            cmdInsertMachineWorkDescription.Parameters.AddWithValue("@Code", items.MachineCode);
                    //            cmdInsertMachineWorkDescription.Parameters.AddWithValue("@Description", items.MachineDescription);
                    //            cmdInsertMachineWorkDescription.Parameters.AddWithValue("@IsCompleted", false);
                    //            cmdInsertMachineWorkDescription.Parameters.AddWithValue("@Active", true);
                    //            cmdInsertMachineWorkDescription.ExecuteNonQuery();
                    //            cmdInsertMachineWorkDescription.Parameters.Clear();
                    //        }
                    //    }
                    //}

                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("Production SQL Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return result;
        }

        public static List<MachineGroup> GetMachineGroups()
        {
            List<MachineGroup> machineGroupList = new List<MachineGroup>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                conn.Open();
                try
                {
                    SqlCommand cmdGetData = new SqlCommand("SELECT * FROM MachineGroup", conn);

                    using (SqlDataReader dr = cmdGetData.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                MachineGroup mp = new MachineGroup();
                                mp.GroupID = Convert.ToInt16(dr["group_id"]);
                                mp.GroupName = dr["group_name"].ToString();
                                mp.GroupActive = Convert.ToBoolean(dr["group_active"]);
                                machineGroupList.Add(mp);
                            }
                        }
                    }
                    cmdGetData.Parameters.Clear();

                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return machineGroupList;
        }

        public static ObservableCollection<VehicleMaintenanceInfo> GetMaintenanceInfoByMeterReading(List<int> ints, int loc)
        {
            ObservableCollection<VehicleMaintenanceInfo> vehicleMaintenanceInfo = new ObservableCollection<VehicleMaintenanceInfo>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT * FROM VehicleMaintenanceInfo " +
                                                                  "WHERE vehicle_maintenance_sequence_id=@Vmsid AND location_id=@Loc AND active='True' ORDER BY id", conn))
                    {
                        foreach (var item in ints)
                        {
                            cmdGetData.Parameters.AddWithValue("@Vmsid", item);
                            cmdGetData.Parameters.AddWithValue("@Loc", loc);
                            using (SqlDataReader dr = cmdGetData.ExecuteReader())
                            {
                                if (dr != null)
                                {
                                    while (dr.Read())
                                    {
                                        VehicleMaintenanceInfo vmi = new VehicleMaintenanceInfo();
                                        vmi.ID = Convert.ToInt16(dr["id"]);
                                        vmi.VehicleMaintenanceSequence = new VehicleMaintenanceSequence() { ID = Convert.ToInt16(dr["vehicle_maintenance_sequence_id"]) };
                                        vmi.VehicleCategory = new VehicleCategory() { ID = Convert.ToInt16(dr["vehicle_category_id"]) };
                                        vmi.LocationID = Convert.ToInt16(dr["location_id"]);
                                        vmi.Code = dr["code"].ToString();
                                        vmi.Description = dr["description"].ToString();
                                        vmi.Active = Convert.ToBoolean(dr["active"]);
                                        vmi.CreatedDate = Convert.ToDateTime(dr["created_date"]);
                                        vmi.CreatedBy = dr["created_by"].ToString();
                                        vehicleMaintenanceInfo.Add(vmi);
                                    }
                                }
                            }
                            cmdGetData.Parameters.Clear();
                        }                        
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading production line: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return vehicleMaintenanceInfo;
        }


        public static List<VehicleMaintenanceSequence> GetVehicleMaintenanceSequence(int vcid)
        {
            List<VehicleMaintenanceSequence> vehicleMaintenanceSeq = new List<VehicleMaintenanceSequence>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT * FROM VehicleMaintenanceSequence " +
                                                                  "WHERE vehicle_category_id=@VehicleCategoryID ORDER BY id", conn))
                    {
                        cmdGetData.Parameters.AddWithValue("@VehicleCategoryID", vcid);
                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    VehicleMaintenanceSequence vmi = new VehicleMaintenanceSequence();
                                    vmi.ID = Convert.ToInt16(dr["id"]);
                                    vmi.VehicleCategoryID = Convert.ToInt16(dr["vehicle_category_id"]);
                                    vmi.Kmhrs = Convert.ToInt64(dr["kmhrs"]);
                                    vmi.Unit = dr["unit"].ToString();
                                    vehicleMaintenanceSeq.Add(vmi);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading production line: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return vehicleMaintenanceSeq;
        }

        public static ObservableCollection<VehicleWorkDescription> GetCompletedVehicleWorkDescriptionByID(Int32 Id)
        {
            ObservableCollection<VehicleWorkDescription> vehicleWorkDescription = new ObservableCollection<VehicleWorkDescription>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                conn.Open();
                try
                {
                    SqlCommand cmdGetData = new SqlCommand("SELECT * FROM VehicleMaintenanceDescriptionsCompleted " +
                                                           "WHERE vehicle_work_order_id=@ID AND is_completed = 'True' ORDER BY id", conn);

                    cmdGetData.Parameters.AddWithValue("@ID", Id);
                    using (SqlDataReader dr = cmdGetData.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                VehicleWorkDescription vwo = new VehicleWorkDescription();
                                vwo.ID = Convert.ToInt32(dr["id"]);
                                vwo.Description = dr["description"].ToString();
                                vwo.IsCompleted = Convert.ToBoolean(dr["is_completed"]);
                                vwo.VehicleMaintenanceInfo = new VehicleMaintenanceInfo() { ID = Convert.ToInt16(dr["vehicle_maintenance_info_id"]), Code = dr["code"].ToString() };   
                                vehicleWorkDescription.Add(vwo);
                            }
                        }
                    }
                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return vehicleWorkDescription;

        }

        public static Int64 GetVehicleOdometerReading(Int32 id)
        {
            Int64 odo = 0;
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                conn.Open();
                try
                {
                    SqlCommand cmdGetData = new SqlCommand("SELECT odometer_reading FROM VehicleWorkOrder " +
                                                           "WHERE id = @ID", conn);

                    cmdGetData.Parameters.AddWithValue("@ID", id);
                    using (SqlDataReader dr = cmdGetData.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                odo = Convert.ToInt64(dr["odometer_reading"]);
                            }
                        }
                    }
                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return odo;
        }

        public static int CancelMixing(ProductionHistory productionHistory)
        {
            int result = 0;

            List<RawProductMachine> rawProductMachine = GetMachineByRawProductID(productionHistory.RawProduct.RawProductID);

            if (rawProductMachine.Count > 0)
            {

                using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
                {
                    SqlCommand cmdGetMixingCompleted = new SqlCommand("SELECT * FROM MixingCompleted " +
                                                                      "WHERE id = @ID", conn);
                    SqlCommand cmdCancelMixing = new SqlCommand("UPDATE MixingCompleted SET qty -= @Qty " +
                                                                "WHERE id = @ID", conn);
                    //Get gradings
                    SqlCommand cmdGetGradings = new SqlCommand("SELECT * FROM Formulas " +
                                                               "WHERE raw_product_id = @RawProductID", conn);

                    SqlCommand cmdGetGradingCompleted = new SqlCommand("SELECT * FROM MixingGradesCompleted " +
                                                                       "WHERE raw_product_id = @RawProductID", conn);
                    //Update MixingGradingCompleted
                    SqlCommand cmdUpdateMixingGradesCompleted = new SqlCommand("UPDATE MixingGradesCompleted SET kg_completed -= @KgCompleted " +
                                                                               "WHERE mixing_time_table_id=@MixingTimeTableID AND grading_id = @GradingID AND shift = @Shift AND created_date = @CreatedDate AND order_type =@OrderType", conn);

                    //Get ProductionTimeTableID
                    SqlCommand cmdSelectProductionTimeTable = new SqlCommand("SELECT * FROM ProductionTimeTable " +
                                                                             "WHERE machine_id = @MachineID AND date = @Date", conn);

                    SqlCommand cmdAddToMixing = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM MixingCurrentCapacity WHERE mixing_time_table_id=@MixingTimeTableID AND sales_id=@SalesID AND raw_product_id = @RawProductID AND order_type = @OrderType AND rank=3) " +
                                                               "INSERT INTO MixingCurrentCapacity(prod_time_table_id,mixing_time_table_id,sales_id,raw_product_id,blockLog_qty,status,order_type,rank,active_order) " +
                                                               "VALUES (@ProdTimeTableID,@MixingTimeTableID,@SalesID,@RawProductID,@BlockLogQty,@Status,@OrderType,@Rank,@ActiveOrder) ELSE " +
                                                               "UPDATE MixingCurrentCapacity SET blockLog_qty += @BlockLogQty WHERE mixing_time_table_id=@MixingTimeTableID AND sales_id=@SalesID AND raw_product_id = @RawProductID AND order_type = @OrderType AND rank=3", conn);

                    SqlCommand cmdDeleteMixingCompleted = new SqlCommand("DELETE MixingCompleted WHERE qty <= 0", conn);
                    SqlCommand cmdDeleteMixingGradesCompleted = new SqlCommand("DELETE MixingGradesCompleted WHERE kg_completed <= 0", conn);

                    SqlTransaction trans = null;
                    conn.Open();
                    trans = conn.BeginTransaction();
                    try
                    {
                        /*******Update MixingCompleted********/
                        cmdCancelMixing.Transaction = trans;
                        cmdCancelMixing.Parameters.AddWithValue("@ID", productionHistory.ID);
                        cmdCancelMixing.Parameters.AddWithValue("@Qty", 1);
                        cmdCancelMixing.ExecuteNonQuery();

                        //Calculate how much rubber need
                        List<Formulas> gradings = new List<Formulas>();
                        cmdGetGradings.Transaction = trans;
                        cmdGetGradings.Parameters.AddWithValue("@RawProductID", productionHistory.RawProduct.RawProductID);
                        using (SqlDataReader dr = cmdGetGradings.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    gradings.Add(new Formulas() { ProductCapacity1 = Convert.ToInt16(dr["product_capacity1"]), GradingWeight1 = Convert.ToDecimal(dr["grading_weight1"]) });
                                    if (Convert.ToInt16(dr["product_capacity2"]) > 0)
                                    {
                                        gradings.Add(new Formulas() { ProductCapacity1 = Convert.ToInt16(dr["product_capacity2"]), GradingWeight1 = Convert.ToDecimal(dr["grading_weight2"]) });
                                    }
                                }
                            }
                        }
                        /*****Update GradingGradesMixingCompleted******/
                        foreach (var item in gradings)
                        {
                            cmdUpdateMixingGradesCompleted.Transaction = trans;
                            cmdUpdateMixingGradesCompleted.Parameters.AddWithValue("@MixingTimeTableID", productionHistory.ProdTimeTableID);
                            cmdUpdateMixingGradesCompleted.Parameters.AddWithValue("@GradingID", item.ProductCapacity1);
                            cmdUpdateMixingGradesCompleted.Parameters.AddWithValue("@KgCompleted", item.GradingWeight1);
                            cmdUpdateMixingGradesCompleted.Parameters.AddWithValue("@Shift", productionHistory.Shift);
                            cmdUpdateMixingGradesCompleted.Parameters.AddWithValue("@CreatedDate", productionHistory.CreatedDateTime.ToString("yyyy-MM-dd"));
                            cmdUpdateMixingGradesCompleted.Parameters.AddWithValue("@OrderType", productionHistory.OrderType);
                            cmdUpdateMixingGradesCompleted.ExecuteNonQuery();
                            cmdUpdateMixingGradesCompleted.Parameters.Clear();
                        }

                        /************Adding to Mixing Current Shift********/
                        //Int32 prodTimeTableID = 0;
                        Int32 mixingTimeTableID = 0;
                        cmdSelectProductionTimeTable.Transaction = trans;
                        cmdSelectProductionTimeTable.Parameters.AddWithValue("@ID", productionHistory.ProdTimeTableID);
                        cmdSelectProductionTimeTable.Parameters.AddWithValue("@MachineID", rawProductMachine[0].MixingMachineID);
                        cmdSelectProductionTimeTable.Parameters.AddWithValue("@Date", productionHistory.CreatedDateTime.ToString("yyyy-MM-dd"));
                        using (SqlDataReader dr = cmdSelectProductionTimeTable.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    //prodTimeTableID = Convert.ToInt32(dr["id"]);
                                    mixingTimeTableID = Convert.ToInt32(dr["id"]);
                                }
                            }
                        }

                        //Delete rows which are zeros
                        cmdDeleteMixingCompleted.Transaction = trans;
                        cmdDeleteMixingCompleted.ExecuteNonQuery();

                        cmdDeleteMixingGradesCompleted.Transaction = trans;
                        cmdDeleteMixingGradesCompleted.ExecuteNonQuery();

                        cmdAddToMixing.Transaction = trans;
                        cmdAddToMixing.Parameters.AddWithValue("@ProdTimeTableID", productionHistory.ProdTimeTableID);
                        cmdAddToMixing.Parameters.AddWithValue("@MixingTimeTableID", mixingTimeTableID);
                        cmdAddToMixing.Parameters.AddWithValue("@SalesID", productionHistory.SalesOrder.ID);
                        cmdAddToMixing.Parameters.AddWithValue("@RawProductID", productionHistory.RawProduct.RawProductID);
                        cmdAddToMixing.Parameters.AddWithValue("@BlockLogQty", 1);
                        cmdAddToMixing.Parameters.AddWithValue("@Status", "Mixing");
                        cmdAddToMixing.Parameters.AddWithValue("@OrderType", productionHistory.OrderType);
                        cmdAddToMixing.Parameters.AddWithValue("@Rank", 3);
                        cmdAddToMixing.Parameters.AddWithValue("@ActiveOrder", false);
                        result = cmdAddToMixing.ExecuteNonQuery();

                        Transaction transaction = new Transaction()
                        {
                            TransDateTime = DateTime.Now,
                            Transtype = "Mixing Completed Cancelled",
                            SalesOrderID = productionHistory.SalesOrder.ID,
                            Products = new List<RawStock>()
                                {
                                  new RawStock(){RawProductID = productionHistory.RawProduct.RawProductID,Qty=1},  
                                },
                            CreatedBy = productionHistory.CompletedBy
                        };
                        int r = DBAccess.InsertTransaction(transaction);

                        trans.Commit();

                    }
                    catch (Exception e)
                    {
                        trans.Rollback();
                        Debug.WriteLine("Error: Updating SalesOrder Required Date" + e);
                    }
                    finally
                    {
                        conn.Close();
                    }
                }
            }
            return result;
        }

        //public static List<GradingCompleted> GetGradingCompletedHistoryByDate(List<MixingOrder> mo)
        //{
        //    List<GradingCompleted> prodHistList = new List<GradingCompleted>();

        //    using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
        //    {
        //        SqlCommand cmdSelect = new SqlCommand("SELECT GradingCompleted.sales_id,GradingCompleted.raw_product_id,RawProducts.RawProductCode,RawProducts.Description,RawProducts.RawProductType,SUM(GradingCompleted.qty) AS qty " +
        //                                              "FROM GradingCompleted " +
        //                                              "INNER JOIN RawProducts ON GradingCompleted.raw_product_id = RawProducts.RawProductID  " +
        //                                              "WHERE GradingCompleted.sales_id =@OrderNo AND GradingCompleted.raw_product_id=@RawProductID AND GradingCompleted.status <> 'Returned' " +													 
        //                                              "GROUP BY GradingCompleted.sales_id,GradingCompleted.raw_product_id,RawProducts.RawProductCode,RawProducts.Description,RawProducts.RawProductType", conn);
        //        conn.Open();
        //        try
        //        {
        //            foreach (var item in mo)
        //            {
        //                cmdSelect.Parameters.AddWithValue("@OrderNo", item.Order.OrderNo);
        //                cmdSelect.Parameters.AddWithValue("@RawProductID", item.Product.RawProduct.RawProductID);
        //                using (SqlDataReader dr = cmdSelect.ExecuteReader())
        //                {
        //                    if (dr != null)
        //                    {
        //                        if (dr.HasRows)
        //                        {
        //                            while (dr.Read())
        //                            {
        //                                GradingCompleted ph = new GradingCompleted();
        //                                ph.SalesID = Convert.ToInt32(dr["sales_id"]);
        //                                ph.RawProduct = new Product() { ProductID = Convert.ToInt16(dr["raw_product_id"]), ProductCode = dr["RawProductCode"].ToString(), ProductDescription = dr["Description"].ToString(), ProductUnit = dr["RawProductType"].ToString() };
        //                                ph.Qty = Convert.ToDecimal(dr["qty"]);
        //                                prodHistList.Add(ph);
        //                            }
        //                        }
        //                    }
        //                }
        //                cmdSelect.Parameters.Clear();
        //            }
                    
        //        }
        //        catch (Exception e)
        //        {

        //            Debug.WriteLine("Error: " + e);
        //        }
        //        finally
        //        {
        //            conn.Close();
        //        }
        //    }
        //    return prodHistList;
        //}


        public static List<MixingOrder> GetCurrentMixingList()
        {
            List<MixingOrder> prodHistList = new List<MixingOrder>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdSelect = new SqlCommand("SELECT MixingCurrentCapacity.raw_product_id,RawProducts.RawProductCode,RawProducts.Description,SUM(MixingCurrentCapacity.blockLog_qty) AS qty,Orders.required_date,Orders.mixing_date,Orders.mixing_shift,Orders.required_date_selected " +
                                                      "FROM MixingCurrentCapacity " +
                                                      "INNER JOIN RawProducts ON MixingCurrentCapacity.raw_product_id = RawProducts.RawProductID " +
                                                      "INNER JOIN Orders  ON MixingCurrentCapacity.sales_id = Orders.order_id " +
                                                      "GROUP BY MixingCurrentCapacity.raw_product_id,RawProducts.RawProductCode,RawProducts.Description,Orders.required_date,Orders.mixing_date,Orders.mixing_shift,Orders.required_date_selected " +
                                                      "ORDER BY Orders.mixing_date,Orders.mixing_shift", conn);
                conn.Open();
                try
                {
                    
                        using (SqlDataReader dr = cmdSelect.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                if (dr.HasRows)
                                {
                                    while (dr.Read())
                                    {
                                        MixingOrder m = new MixingOrder();
                                        m.Product = new Product() { RawProduct = new RawProduct() { RawProductID = Convert.ToInt16(dr["raw_product_id"]), RawProductCode = dr["RawProductCode"].ToString(), Description = dr["Description"].ToString() } };
                                        m.BlocksLogs = Convert.ToDecimal(dr["qty"]);
                                        m.Order = new Order() { RequiredDate = Convert.ToDateTime(dr["required_date"]), MixingDate = Convert.ToDateTime(dr["mixing_date"]), MixingShift = dr["mixing_shift"].ToString(),IsRequiredDateSelected= Convert.ToBoolean(dr["required_date_selected"]) };
                                        prodHistList.Add(m);
                                    }
                                }
                            }
                        }                       
                    }                    
                
                catch (Exception e)
                {

                    Debug.WriteLine("Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return prodHistList;
        }

        public static List<GradingPending> GetGradingPendingList()
        {
            List<GradingPending> gradingPendingList = new List<GradingPending>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdSelect = new SqlCommand("SELECT GradingScheduling.raw_product_id,RawProducts.RawProductCode,RawProducts.Description, SUM(GradingScheduling.blocklog_qty) AS Qty,Orders.required_date,Orders.mixing_date,Orders.mixing_shift,Orders.required_date_selected " +
                                                      "FROM GradingScheduling " +
                                                      "INNER JOIN RawProducts ON GradingScheduling.raw_product_id = RawProducts.RawProductID " +
													  "INNER JOIN Orders ON GradingScheduling.sales_id = Orders.order_id " +
                                                      "WHERE (blocklog_qty > 0) " +
                                                      "GROUP BY GradingScheduling.raw_product_id,RawProducts.RawProductCode,RawProducts.Description,Orders.required_date,Orders.mixing_date,Orders.mixing_shift,Orders.required_date_selected " +
                                                      "ORDER BY Orders.required_date,Orders.mixing_shift ", conn);
                conn.Open();
                try
                {

                    using (SqlDataReader dr = cmdSelect.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    GradingPending gp = new GradingPending();
                                    gp.RawProduct = new RawProduct() { RawProductID = Convert.ToInt16(dr["raw_product_id"]), RawProductCode = dr["RawProductCode"].ToString(), Description = dr["Description"].ToString() };
                                    gp.BlocklogQty = Convert.ToDecimal(dr["Qty"]);
                                    gp.RequiredDate = Convert.ToDateTime(dr["required_date"]);
                                    gp.MixingDate = Convert.ToDateTime(dr["mixing_date"]);
                                    gp.Shift = dr["mixing_shift"].ToString() == "Morning" ? 1 : 2;
                                    gp.RequiredDateSelected = Convert.ToBoolean(dr["required_date_selected"]);
                                   gradingPendingList.Add(gp);
                                }
                            }
                        }
                    }
                }

                catch (Exception e)
                {

                    Debug.WriteLine("Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return gradingPendingList;
        }

        public static ObservableCollection<VehicleWorkOrder> GetTopVehicleWorkOrdersByVehicleID(int vid)
        {
            ObservableCollection<VehicleWorkOrder> vehicleWorkOrderList = new ObservableCollection<VehicleWorkOrder>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                conn.Open();
                try
                {
                    SqlCommand cmdGetData = new SqlCommand("SELECT MAX(id) AS WorkOrderID,vehicle_id,maintenance_seq_id, Max(odometer_reading) as ODO,Max(created_date) AS CompletedDate " +
                                                           "FROM VehicleWorkOrder " +
                                                           "WHERE is_completed='True' AND work_order_type='Maintenance' and vehicle_id=@VehicleID " +
                                                           "GROUP BY maintenance_seq_id,vehicle_id " +
                                                           "ORDER BY maintenance_seq_id DESC", conn);

                    cmdGetData.Parameters.AddWithValue("@VehicleID", vid);
                    using (SqlDataReader dr = cmdGetData.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                VehicleWorkOrder vwo = new VehicleWorkOrder();
                                vwo.VehicleWorkOrderID = Convert.ToInt32(dr["WorkOrderID"]);
                                vwo.Vehicle = new Vehicle() { ID = Convert.ToInt16(dr["vehicle_id"])};
                                vwo.VehicleMaintenanceSequence = new VehicleMaintenanceSequence() { ID =Convert.ToInt16(dr["maintenance_seq_id"]) };
                                vwo.CreatedDate = Convert.ToDateTime(dr["CompletedDate"]);
                                vwo.OdometerReading  = Convert.ToInt64(dr["ODO"]);
                                vehicleWorkOrderList.Add(vwo);

                            }
                        }
                    }
                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return vehicleWorkOrderList;
        }

        public static VehicleWorkOrder GetLastCompletedWorkOrder(int vid)
        {
            VehicleWorkOrder vwo = new VehicleWorkOrder();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                conn.Open();
                try
                {
                    SqlCommand cmdGetData = new SqlCommand("SELECT TOP 1 * FROM VehicleWorkOrder " +
                                                           "WHERE is_completed = 'True' AND vehicle_id=@VehicleID " +
                                                           "ORDER BY odometer_reading desc", conn);

                    cmdGetData.Parameters.AddWithValue("@VehicleID", vid);
                    using (SqlDataReader dr = cmdGetData.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                vwo.VehicleWorkOrderID = Convert.ToInt32(dr["id"]);
                                vwo.WorkOrderType = dr["work_order_type"].ToString();
                                vwo.Vehicle = new Vehicle() { ID = Convert.ToInt16(dr["vehicle_id"])};
                                vwo.FirstServiceDate = Convert.ToDateTime(dr["first_service_date"]);
                                vwo.NextServiceDate = Convert.ToDateTime(dr["next_service_date"]);
                                vwo.VehicleMaintenanceSequence = new VehicleMaintenanceSequence() { ID = Convert.ToInt16(dr["maintenance_seq_id"]) };
                                vwo.CreatedDate = Convert.ToDateTime(dr["created_date"]);
                                vwo.OdometerReading = Convert.ToInt64(dr["odometer_reading"]);
                                vwo.Urgency = Convert.ToInt16(dr["urgency"]);
                                vwo.UrgencyStr = Convert.ToInt16(dr["urgency"]) == 1 ? "Urgent" : "Normal";
                            }
                        }
                    }
                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return vwo;
        }



        public static int UpdateShredStock(List<ShredStock> shredStock,int shift)
        {
            int result = 0;
       
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
               
                SqlCommand cmdUpdateShredStock = new SqlCommand("UPDATE ShredStock " +
                                                                "SET qty += @Qty " +
                                                                "WHERE shred_id = @ShredID", conn);

                SqlCommand cmdAddShreddingHistory = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM ShreddingHistory WHERE date_time=@DateTime AND shift=@Shift AND shred_id = @ShredID) " +
                                                                   "INSERT INTO ShreddingHistory(date_time,shift,shred_id,qty) " +
                                                                   "VALUES (@DateTime,@Shift,@ShredID,@Qty) ELSE " +
                                                                   "UPDATE ShreddingHistory SET qty += @Qty WHERE date_time=@DateTime AND shift=@Shift AND shred_id = @ShredID", conn);


                conn.Open();
                try
                {
                    foreach (var item in shredStock)
                    {
                        cmdUpdateShredStock.Parameters.AddWithValue("@ShredID", item.Shred.ID);
                        cmdUpdateShredStock.Parameters.AddWithValue("@Qty", item.Qty);
                        cmdUpdateShredStock.ExecuteNonQuery();
                        cmdUpdateShredStock.Parameters.Clear();

                        cmdAddShreddingHistory.Parameters.AddWithValue("@DateTime", DateTime.Now);
                        cmdAddShreddingHistory.Parameters.AddWithValue("@Shift", shift);
                        cmdAddShreddingHistory.Parameters.AddWithValue("@ShredID", item.Shred.ID);
                        cmdAddShreddingHistory.Parameters.AddWithValue("@Qty", item.Qty);
                        result = cmdAddShreddingHistory.ExecuteNonQuery();
                        cmdAddShreddingHistory.Parameters.Clear();
                          
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Production SQL Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return result;
        }


        public static List<ShreddingHistory> GetShredingHistory(DateTime date, int shift)
        {
            string newDate = date.ToString("yyyy-MM-dd");
            List<ShreddingHistory> shreddingHistory = new List<ShreddingHistory>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                conn.Open();
                try
                {
                    SqlCommand cmdGetData = new SqlCommand("SELECT CONVERT(date,ShreddingHistory.date_time) AS DateTime,ShreddingHistory.shift,ShreddingHistory.shred_id,Shred.name,SUM(ShreddingHistory.qty) AS Total " +
                                                           "FROM ShreddingHistory " +
                                                           "INNER JOIN Shred ON ShreddingHistory.shred_id = Shred.id " +
                                                           "WHERE CONVERT(date,ShreddingHistory.date_time) = @Date AND ShreddingHistory.shift=@Shift " +
                                                           "GROUP BY CONVERT(date,ShreddingHistory.date_time),ShreddingHistory.shift,ShreddingHistory.shred_id,Shred.name", conn);

                    cmdGetData.Parameters.AddWithValue("@Date", newDate);
                    cmdGetData.Parameters.AddWithValue("@Shift", shift);
                    using (SqlDataReader dr = cmdGetData.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                ShreddingHistory sh = new ShreddingHistory();
                                sh.DateTime = Convert.ToDateTime(dr["DateTime"]);
                                sh.ShredStock = new ShredStock();
                                sh.ShredStock.Shred = new Shred() { ID = Convert.ToInt16(dr["shred_id"]), Name = dr["name"].ToString() };
                                sh.Total = Convert.ToDecimal(dr["Total"]);
                                shreddingHistory.Add(sh);
                            }
                        }
                    }
                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return shreddingHistory;
        }

        public static List<ShredStock> GetShredStock()
        {
            List<ShredStock> shredStock = new List<ShredStock>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                conn.Open();
                try
                {
                    SqlCommand cmdGetData = new SqlCommand("SELECT ShredStock.shred_id,Shred.name,ShredStock.qty FROM ShredStock " +
                                                           "INNER JOIN Shred ON ShredStock.shred_id = Shred.id", conn);

                   
                    using (SqlDataReader dr = cmdGetData.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                ShredStock ss = new ShredStock();
                                ss.Shred = new Shred() { ID = Convert.ToInt16(dr["shred_id"]), Name = dr["name"].ToString() };
                                ss.Qty = Convert.ToDecimal(dr["qty"]);
                                shredStock.Add(ss);
                            }
                        }
                    }
                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return shredStock;
        }

        public static int DeductShredStock(List<ShredStock> shredStockList)
        {
            int result = 0;
          
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmd = new SqlCommand("UPDATE ShredStock SET qty -= @Qty WHERE shred_id = @ID", conn);
             
                conn.Open();
                try
                {
                    foreach (var item in shredStockList)
                    {
                        cmd.Parameters.AddWithValue("@ID", item.Shred.ID);
                        cmd.Parameters.AddWithValue("@QTY", item.Qty);
                        result = cmd.ExecuteNonQuery();
                        cmd.Parameters.Clear();
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return result;
        }

        public static List<FormulaOptions> GetFormulaOptions()
        {
            List<FormulaOptions> formulaOptions = new List<FormulaOptions>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
              
                SqlCommand cmdSelect = new SqlCommand("SELECT SimiliarBlockLogs.id,SimiliarBlockLogs.group_id,SimiliarBlockLogs.raw_product_id, " +
	                                                  "RawProducts.RawProductCode,RawProducts.Description, " +
	                                                  "Formulas.product_capacity1,Formulas.product_capacity2,Formulas.grading_weight1,Formulas.grading_weight2,Formulas.grading " +
                                                      "FROM SimiliarBlockLogs " +
                                                      "INNER JOIN RawProducts ON SimiliarBlockLogs.raw_product_id = RawProducts.RawProductID " +
                                                      "INNER JOIN Formulas ON SimiliarBlockLogs.raw_product_id = Formulas.raw_product_id " +
                                                      "ORDER BY SimiliarBlockLogs.group_id", conn);


                conn.Open();
                try
                {
                    using (SqlDataReader dr = cmdSelect.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    FormulaOptions fo = new FormulaOptions();
                                    fo.ID = Convert.ToInt16(dr["id"]);
                                    fo.GroupID = Convert.ToInt16(dr["group_id"]);
                                    fo.RawProduct = new RawProduct() { RawProductID = Convert.ToInt16(dr["raw_product_id"]), RawProductCode = dr["RawProductCode"].ToString(), Description = dr["Description"].ToString() };
                                    fo.Formula = new Formulas() { ProductCapacity1 = Convert.ToInt16(dr["product_capacity1"]), ProductCapacity2 = Convert.ToInt16(dr["product_capacity2"]), GradingWeight1 = Convert.ToDecimal(dr["grading_weight1"]), GradingWeight2 = Convert.ToDecimal(dr["grading_weight2"]), GradingFormula = dr["grading"].ToString() };
                                    formulaOptions.Add(fo);
                                }
                            }
                        }
                    }
                }

                catch (Exception e)
                {

                    Debug.WriteLine("Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return formulaOptions;
        }


        public static Int32 UpdateFormulaOptions(int gradingSchedulingID, int rawProdId, List<CurrentCapacity> ccl, List<GradingCompleted> oldCcl,List<ShredStock> shredStock)
        {
            Int32 result = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {               

                SqlCommand cmdGetGradingScheduling = new SqlCommand("SELECT COUNT(*) FROM GradingScheduling " +
                                                                    "WHERE production_time_table_id=@ProdTimeTableID AND raw_product_id =@RawProductID AND sales_id=@SalesID AND shift=@Shift AND order_type=@OrderType", conn);
               
                SqlCommand cmdUpdateGradingScheduling = new SqlCommand("UPDATE GradingScheduling SET raw_product_id =@RawProductID " +
                                                                       "WHERE id = @GSID AND raw_product_id <> @RawProductID", conn);

                SqlCommand cmdUpdateCCSimilar = new SqlCommand("UPDATE CurrentCapacity SET capacity_kg +=@CapacityKg,blocks_logs+=@BlocksLogs " +
                                                               "WHERE prod_timetable_id = @ProdTimeTableID AND product_capacity_id=@ProductCapacityID AND sales_id=@SalesID AND raw_product_id=@RawProductID AND shift=@Shift AND order_type=@OrderType", conn);

                SqlCommand cmdUpdateSSGradingScheduling = new SqlCommand("UPDATE GradingScheduling SET blocklog_qty +=@BlockLog " +
                                                                         "WHERE production_time_table_id=@ProdTimeTableID AND raw_product_id =@RawProductID AND sales_id=@SalesID AND shift=@Shift AND order_type=@OrderType", conn);

                SqlCommand cmdDeleteGS = new SqlCommand("DELETE FROM GradingScheduling " +
                                                        "WHERE production_time_table_id = @ProdTimeTableID AND raw_product_id=@RawProductID AND sales_id=@SalesID AND shift=@Shift AND order_type=@OrderType", conn);


                SqlCommand cmdDeleteCC = new SqlCommand("DELETE FROM CurrentCapacity " +
                                                        "WHERE prod_timetable_id = @prodTimeTableIdParam AND product_capacity_id = @prodCap AND sales_id = @salesIdParam AND " +
                                                        "raw_product_id = @rawProductIdParam AND shift = @oldShift AND order_type = @Ordertype", conn);


                SqlCommand cmdUpdateCurrentCapacity = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM CurrentCapacity " +
                                                                     "WHERE prod_timetable_id=@prodTimeTableID AND product_capacity_id=@CapacityID AND sales_id=@SalesID AND raw_product_id=@RawProductID AND shift=@Shift AND order_type=@OrderType) " +
                                                                     "INSERT INTO CurrentCapacity(prod_timetable_id,product_capacity_id,sales_id,raw_product_id,product_id,shift,capacity_kg,blocks_logs,order_type) " +
                                                                     "VALUES (@prodTimeTableID,@CapacityID,@SalesID,@RawProductID,@ProductID,@Shift,@CapacityKG,@BlocksLogs,@OrderType) " +
                                                                     "ELSE " +
                                                                     "UPDATE CurrentCapacity SET capacity_kg = @CapacityID " +
                                                                     "WHERE prod_timetable_id=@prodTimeTableID AND product_capacity_id=@CapacityID AND sales_id=@SalesID AND raw_product_id=@RawProductID AND shift=@Shift AND order_type=@OrderType", conn);

                SqlCommand cmdUpdateShredStock = new SqlCommand("UPDATE ShredStock SET qty =@Qty " +
                                                                "WHERE shred_id = @ShredID", conn);

                //SqlCommand cmdGetGradSchDet = new SqlCommand("SELECT GradingScheduling.id AS g_id,GradingScheduling.production_time_table_id,GradingScheduling.sales_id,GradingScheduling.raw_product_id,GradingScheduling.blocklog_qty,GradingScheduling.shift,GradingScheduling.status, GradingScheduling.order_type,GradingScheduling.active_order,GradingScheduling.print_counter, " +
                //                                             "RawProducts.RawProductCode, RawProducts.Description, RawProducts.RawProductType, " +
                //                                             "Formulas.grading, " +
                //                                             "ProductionTimeTable.id AS PID,ProductionTimeTable.date, " +
                //                                             "Orders.order_id,Orders.required_date,Orders.comments,Orders.required_date_selected,Orders.sales_no, " +
                //                                             "Customers.CompanyName, " +
                //                                             "RawProductMachine.grading_machine_id " +
                //                                             "FROM dbo.GradingScheduling " +
                //                                             "INNER JOIN dbo.RawProducts ON GradingScheduling.raw_product_id = RawProducts.RawProductID " +
                //                                             "INNER JOIN dbo.Formulas ON GradingScheduling.raw_product_id = Formulas.raw_product_id " +
                //                                             "INNER JOIN dbo.ProductionTimeTable ON GradingScheduling.production_time_table_id = ProductionTimeTable.id " +
                //                                             "INNER JOIN dbo.Orders ON GradingScheduling.sales_id = Orders.order_id " +
                //                                             "INNER JOIN dbo.Customers ON Orders.customer_id = Customers.CustomerID " +
                //                                             "INNER JOIN dbo.RawProductMachine ON RawProducts.RawProductID = RawProductMachine.raw_product_id " +
                //                                             "WHERE GradingScheduling.sales_id=@SalesID AND GradingScheduling.raw_product_id=@RawProductID AND GradingScheduling.shift= @Shift", conn);

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {
                    int rowCount = 0;
                    

                    foreach (var item in ccl)
                    {                       
                        cmdGetGradingScheduling.Transaction = trans;
                        cmdGetGradingScheduling.Parameters.AddWithValue("@ProdTimeTableID", item.ProdTimeTableID);
                        cmdGetGradingScheduling.Parameters.AddWithValue("@RawProductID", rawProdId);
                        cmdGetGradingScheduling.Parameters.AddWithValue("@SalesID", item.SalesID);
                        cmdGetGradingScheduling.Parameters.AddWithValue("@Shift", item.Shift);
                        cmdGetGradingScheduling.Parameters.AddWithValue("@OrderType", item.OrderType);
                        rowCount = (int)cmdGetGradingScheduling.ExecuteScalar();
                        cmdGetGradingScheduling.Parameters.Clear();
                    }

                    if (rowCount > 0)
                    {
                        List<int> ccRes = new List<int>();
                        List<int> ccDRes = new List<int>();
                        int pt = 0, rpid = 0,  shift = 0, otype = 0;
                        Int64 sid = 0;
                        decimal blockLogs = 0;

                        foreach (var item in ccl)
                        {
                            pt = item.ProdTimeTableID;
                            rpid = item.RawProductID;
                            sid = item.SalesID;
                            shift = item.Shift;
                            otype = item.OrderType;
                            blockLogs = item.BlocksLogs;
                            //Update CurrentCapacity
                            cmdUpdateCCSimilar.Transaction = trans;
                            cmdUpdateCCSimilar.Parameters.AddWithValue("@ProdTimeTableID", item.ProdTimeTableID);
                            cmdUpdateCCSimilar.Parameters.AddWithValue("@ProductCapacityID", item.ProductCapacityID);
                            cmdUpdateCCSimilar.Parameters.AddWithValue("@SalesID", item.SalesID);
                            cmdUpdateCCSimilar.Parameters.AddWithValue("@RawProductID", item.RawProductID);
                            cmdUpdateCCSimilar.Parameters.AddWithValue("@Shift", item.Shift);
                            cmdUpdateCCSimilar.Parameters.AddWithValue("@OrderType", item.OrderType);
                            cmdUpdateCCSimilar.Parameters.AddWithValue("@CapacityKg", item.CapacityKG);
                            cmdUpdateCCSimilar.Parameters.AddWithValue("@BlocksLogs", item.BlocksLogs);
                            ccRes.Add(cmdUpdateCCSimilar.ExecuteNonQuery());
                            cmdUpdateCCSimilar.Parameters.Clear();
                        }

                        bool y = ccRes.Any(c => c > 0);
                        if (y)
                        {
                            cmdUpdateSSGradingScheduling.Transaction = trans;
                            cmdUpdateSSGradingScheduling.Parameters.AddWithValue("@ProdTimeTableID", pt);
                            cmdUpdateSSGradingScheduling.Parameters.AddWithValue("@RawProductID", rpid);
                            cmdUpdateSSGradingScheduling.Parameters.AddWithValue("@SalesID", sid);
                            cmdUpdateSSGradingScheduling.Parameters.AddWithValue("@BlockLog", blockLogs);
                            cmdUpdateSSGradingScheduling.Parameters.AddWithValue("@Shift", shift);
                            cmdUpdateSSGradingScheduling.Parameters.AddWithValue("@OrderType", otype);
                            int q = cmdUpdateSSGradingScheduling.ExecuteNonQuery();
                            if (q > 0)
                            {
                                foreach (var item in oldCcl)
                                {
                                    pt = item.ProdTimeTableID;
                                    rpid = item.RawProduct.RawProduct.RawProductID;
                                    sid = item.SalesID;
                                    shift = item.Shift;
                                    otype = item.OrderType;
                                    //Delete CurrentCapacity           
                                    cmdDeleteCC.Transaction = trans;
                                    cmdDeleteCC.Parameters.AddWithValue("@prodTimeTableIdParam", item.ProdTimeTableID);
                                    cmdDeleteCC.Parameters.AddWithValue("@prodCap", item.GradingID);
                                    cmdDeleteCC.Parameters.AddWithValue("@salesIdParam", item.SalesID);
                                    cmdDeleteCC.Parameters.AddWithValue("@rawProductIdParam", item.RawProduct.RawProduct.RawProductID);
                                    cmdDeleteCC.Parameters.AddWithValue("@oldShift", item.Shift);
                                    cmdDeleteCC.Parameters.AddWithValue("@Ordertype", item.OrderType);
                                    ccDRes.Add(cmdDeleteCC.ExecuteNonQuery());
                                    cmdDeleteCC.Parameters.Clear();
                                }
                                //Delete grading scheduling
                                bool x = ccDRes.Any(c => c > 0);
                                if (x)
                                {
                                    cmdDeleteGS.Transaction = trans;
                                    cmdDeleteGS.Parameters.AddWithValue("@ProdTimeTableID", pt);
                                    cmdDeleteGS.Parameters.AddWithValue("@RawProductID", rpid);
                                    cmdDeleteGS.Parameters.AddWithValue("@SalesID", sid);
                                    cmdDeleteGS.Parameters.AddWithValue("@Shift", shift);
                                    cmdDeleteGS.Parameters.AddWithValue("@OrderType", otype);
                                    result = cmdDeleteGS.ExecuteNonQuery();
                                }
                            }
                        }
                    }
                    else
                    {
                        cmdUpdateGradingScheduling.Transaction = trans;
                        cmdUpdateGradingScheduling.Parameters.AddWithValue("@GSID", gradingSchedulingID);
                        cmdUpdateGradingScheduling.Parameters.AddWithValue("@RawProductID", rawProdId);
                        int res = cmdUpdateGradingScheduling.ExecuteNonQuery();
                        if (res > 0)
                        {   
                            List<int> res1 = new List<int>();
                            foreach (var item in ccl)
                            {
                                cmdUpdateCurrentCapacity.Transaction = trans;
                                cmdUpdateCurrentCapacity.Parameters.AddWithValue("@prodTimeTableID", item.ProdTimeTableID);
                                cmdUpdateCurrentCapacity.Parameters.AddWithValue("@CapacityID", item.ProductCapacityID);
                                cmdUpdateCurrentCapacity.Parameters.AddWithValue("@SalesID", item.SalesID);
                                cmdUpdateCurrentCapacity.Parameters.AddWithValue("@RawProductID", item.RawProductID);
                                cmdUpdateCurrentCapacity.Parameters.AddWithValue("@ProductID", 0);
                                cmdUpdateCurrentCapacity.Parameters.AddWithValue("@Shift", item.Shift);
                                cmdUpdateCurrentCapacity.Parameters.AddWithValue("@CapacityKG", item.CapacityKG);
                                cmdUpdateCurrentCapacity.Parameters.AddWithValue("@BlocksLogs", item.BlocksLogs);
                                cmdUpdateCurrentCapacity.Parameters.AddWithValue("@OrderType", item.OrderType);
                                res1.Add(cmdUpdateCurrentCapacity.ExecuteNonQuery());
                                cmdUpdateCurrentCapacity.Parameters.Clear();
                            }

                            bool z1 = res1.Any(x => x > 0);
                            if (z1)
                            {
                                List<int> res2 = new List<int>();
                                foreach (var item in oldCcl)
                                {
                                    //Delete Source CurrentCapacity           
                                    cmdDeleteCC.Transaction = trans;
                                    cmdDeleteCC.Parameters.AddWithValue("@prodTimeTableIdParam", item.ProdTimeTableID);
                                    cmdDeleteCC.Parameters.AddWithValue("@prodCap", item.GradingID);
                                    cmdDeleteCC.Parameters.AddWithValue("@salesIdParam", item.SalesID);
                                    cmdDeleteCC.Parameters.AddWithValue("@rawProductIdParam", item.RawProduct.RawProduct.RawProductID);
                                    cmdDeleteCC.Parameters.AddWithValue("@oldShift", item.Shift);
                                    cmdDeleteCC.Parameters.AddWithValue("@Ordertype", item.OrderType);
                                    res2.Add(cmdDeleteCC.ExecuteNonQuery());
                                    cmdDeleteCC.Parameters.Clear();
                                }

                                bool z2 = res2.Any(x => x > 0);
                                if (z2)
                                {
                                    result = 1;                   
                                }
                            }
                        }                        
                    }                   

                    foreach (var item in shredStock)
                    {
                        cmdUpdateShredStock.Transaction = trans;
                        cmdUpdateShredStock.Parameters.AddWithValue("@ShredID", item.Shred.ID);
                        cmdUpdateShredStock.Parameters.AddWithValue("@Qty", item.Qty);
                        cmdUpdateShredStock.ExecuteNonQuery();
                        cmdUpdateShredStock.Parameters.Clear();
                    }

                    //cmdGetGradSchDet.Transaction = trans;
                    //cmdGetGradSchDet.Parameters.AddWithValue("@SalesID", item.Shred.ID);
                    //cmdGetGradSchDet.Parameters.AddWithValue("@RawProductID", item.Qty);
                    //cmdGetGradSchDet.Parameters.AddWithValue("@Shift", item.Qty);
                    //using (SqlDataReader dr = cmdGetGradSchDet.ExecuteReader())
                    //{
                    //    if (dr != null)
                    //    {
                    //        while (dr.Read())
                    //        {
                    //            ShredStock ss = new ShredStock();
                    //            ss.Shred = new Shred() { ID = Convert.ToInt16(dr["shred_id"]), Name = dr["name"].ToString() };
                    //            ss.Qty = Convert.ToDecimal(dr["qty"]);
                    //            shredStock.Add(ss);
                    //        }
                    //    }
                    //}


                    if (result > 0)
                    {
                        trans.Commit();
                    }
                    else
                    {
                        trans.Rollback();
                    }

                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("SQL Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return result;
        }


        public static int TickleGradingScheduling(int id,int salesID)
        {
            int result = 0;
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmd = new SqlCommand("UPDATE GradingScheduling SET sales_id = @SalesID " +
                                                "WHERE id = @ID", conn);

                conn.Open();
                try
                {
                    cmd.Parameters.AddWithValue("@ID", id);
                    cmd.Parameters.AddWithValue("@SalesID", salesID);
                    result = cmd.ExecuteNonQuery();
                  
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error: Updating ProductionTimeTable " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return result;
        }



        public static List<OffSpecDetails> GetOffSpecDetails(DateTime From, DateTime To)
        {
            List<OffSpecDetails> OffSpecDetails = new List<OffSpecDetails>();
            string fromDate = From.ToString("yyyy-MM-dd");
            string toDate = To.ToString("yyyy-MM-dd");

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
              
                SqlCommand cmdSelect = new SqlCommand("SELECT SlittingCompleted.order_no,SlittingCompleted.product_id, Products.product_code, Products.product_description,SlittingCompleted.no_of_blocks,SlittingCompleted.off_spec_tiles,SlittingCompleted.created_date,SlittingCompleted.created_time, " +
	                                                  "SlittingDefectReasons.lifted_off_boad,SlittingDefectReasons.uneven_thickness,SlittingDefectReasons.stone_lines,SlittingDefectReasons.too_thick,SlittingDefectReasons.too_thin,SlittingDefectReasons.damaged_block_log,SlittingDefectReasons.contaminated,SlittingDefectReasons.operator_error,SlittingDefectReasons.other,SlittingDefectReasons.other_comment " +
                                                      "FROM SlittingCompleted " +
                                                      "INNER JOIN Products ON SlittingCompleted.product_id = Products.id " +
                                                      "INNER JOIN SlittingDefectReasons ON SlittingCompleted.id = SlittingDefectReasons.slitting_completed_id " +
                                                      "WHERE SlittingCompleted.off_spec_tiles > 0 AND SlittingCompleted.created_date BETWEEN @From AND @To " +
                                                      "ORDER BY SlittingCompleted.created_date DESC", conn);


                conn.Open();
                try
                {
                    cmdSelect.Parameters.AddWithValue("@From", fromDate);
                    cmdSelect.Parameters.AddWithValue("@To", toDate);
                    using (SqlDataReader dr = cmdSelect.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    OffSpecDetails osd = new OffSpecDetails();
                                    osd.OrderNo = Convert.ToInt32(dr["order_no"]);
                                    osd.Product = new Product() { ProductID = Convert.ToInt16(dr["product_id"]), ProductCode = dr["product_code"].ToString(), ProductDescription = dr["product_description"].ToString() };
                                    osd.Blocks = Convert.ToDecimal(dr["no_of_blocks"]);
                                    osd.OffSpecTiles = Convert.ToDecimal(dr["off_spec_tiles"]);
                                    osd.CompletedDate = Convert.ToDateTime(dr["created_date"]);
                                    osd.CompletedTime = (TimeSpan)(dr["created_time"]);
                                    osd.LiftedOffBoard = Convert.ToBoolean(dr["lifted_off_boad"]);
                                    osd.UnevenThickness = Convert.ToBoolean(dr["uneven_thickness"]);
                                    osd.StoneLines = Convert.ToBoolean(dr["stone_lines"]);
                                    osd.TooThick = Convert.ToBoolean(dr["too_thick"]);
                                    osd.TooThin = Convert.ToBoolean(dr["too_thin"]);
                                    osd.DamagedBlockLog = Convert.ToBoolean(dr["damaged_block_log"]);
                                    osd.Contaminated = Convert.ToBoolean(dr["contaminated"]);
                                    osd.OperatorError = Convert.ToBoolean(dr["operator_error"]);
                                    osd.Other = Convert.ToBoolean(dr["other"]);
                                    osd.OtherComment = (dr["other_comment"]).ToString();
                                    OffSpecDetails.Add(osd);
                                }
                            }
                        }
                    }
                }

                catch (Exception e)
                {

                    Debug.WriteLine("Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return OffSpecDetails;
        }

        public static Tuple<Int32,int,bool> CheckToAddCuring(int rawProductId)
        {
            Int32 orderNo=0;
            int productId=0;
            bool active=false;
           

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                conn.Open();
                try
                {
                    SqlCommand cmdGetData = new SqlCommand("SELECT MixingCurrentCapacity.sales_id,OrderDetails.product_id,RawProducts.Active " +
                                                           "FROM RawProducts " +
                                                           "INNER JOIN SimiliarBlockLogs  ON SimiliarBlockLogs.raw_product_id = RawProducts.RawProductID " +
                                                           "INNER JOIN MixingCurrentCapacity ON SimiliarBlockLogs.raw_product_id = MixingCurrentCapacity.raw_product_id " +
                                                           "INNER JOIN OrderDetails ON MixingCurrentCapacity.sales_id = OrderDetails.order_id " +
                                                           "WHERE SimiliarBlockLogs.raw_product_id=@RawProductID", conn);

                    cmdGetData.Parameters.AddWithValue("@RawProductID", rawProductId);
                    using (SqlDataReader dr = cmdGetData.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                orderNo = Convert.ToInt32(dr["sales_id"]);
                                productId = Convert.ToInt16(dr["product_id"]);
                                active = Convert.ToBoolean(dr["Active"]);
                            }
                        }
                    }
                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return Tuple.Create(orderNo, productId,active);
        }

        public static int GetSimilarBlockLogOtherProduct(Curing curing)
        {
            SqlTransaction trans = null;
            RawStock rs = new RawStock();
            int groupId = 0;
            int newRawProductId = 0;
            decimal maxYield = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                
                try
                {
                    SqlCommand cmdGetData = new SqlCommand("SELECT group_id FROM SimiliarBlockLogs WHERE raw_product_id = @RawProductID", conn);

                    SqlCommand cmdGetData2 = new SqlCommand("SELECT raw_product_id FROM SimiliarBlockLogs WHERE group_id=@GroupID AND raw_product_id <> @RawProductID", conn);

                    SqlCommand cmdGetProductTiles = new SqlCommand("SELECT * FROM ProductTiles WHERE product_id=@ProductID", conn);

                    //UPDATE PendingSlitPeel
                    SqlCommand cmdUpPendingSlitPeel = new SqlCommand("UPDATE PendingSlitPeel SET blocks_logs -= @BlockLogs,qty -= @Qty " +
                                                                     "WHERE order_no = @OrderNo AND raw_product_id = @RawProductID AND product_id = @ProductID", conn);

                    SqlCommand cmdDelete = new SqlCommand("DELETE FROM PendingSlitPeel WHERE blocks_logs <= 0 OR qty <= 0", conn);

                    SqlCommand cmdInsertPendingSlitPeel = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM PendingSlitPeel WHERE " +
                                                       "order_no=@OrderNo AND raw_product_id = @RawProductID AND product_id =@ProductID) " +
                                                       "INSERT INTO PendingSlitPeel VALUES(@OrderNo,@RawProductID,@ProductID,@BlocksLogs,@Qty,@Active) " +
                                                       "ELSE " +
                                                       "UPDATE PendingSlitPeel SET blocks_logs+=@BlocksLogs, qty+=@Qty WHERE order_no=@OrderNo AND raw_product_id = @RawProductID AND product_id =@ProductID", conn);

                    conn.Open();
                    trans = conn.BeginTransaction();

                    cmdGetData.Transaction = trans;
                    cmdGetData.Parameters.AddWithValue("@RawProductID", curing.Product.RawProduct.RawProductID);
                    using (SqlDataReader dr = cmdGetData.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                groupId = Convert.ToInt16(dr["group_id"]);
                            }
                        }
                    }

                    if(groupId > 0)
                    {
                        cmdGetData2.Transaction = trans;
                        cmdGetData2.Parameters.AddWithValue("@RawProductID", curing.Product.RawProduct.RawProductID);
                        cmdGetData2.Parameters.AddWithValue("@GroupID", groupId);
                        using (SqlDataReader dr = cmdGetData2.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    newRawProductId = Convert.ToInt16(dr["raw_product_id"]);
                                }
                            }
                        }

                        if(newRawProductId>0)
                        {

                            //Deduct from PendingSlitPeel
                            cmdGetProductTiles.Transaction = trans;
                            cmdGetProductTiles.Parameters.AddWithValue("@ProductID", curing.Product.ProductID);
                            using (SqlDataReader dr = cmdGetProductTiles.ExecuteReader())
                            {
                                if (dr != null)
                                {
                                    while (dr.Read())
                                    {
                                        maxYield = Convert.ToInt16(dr["max_yield"]);
                                    }
                                }
                            }
                            int rows = 0;
                            //Deduct from PendingSlitPeel
                            cmdUpPendingSlitPeel.Transaction = trans;
                            cmdUpPendingSlitPeel.Parameters.AddWithValue("@OrderNo", curing.OrderNo);
                            cmdUpPendingSlitPeel.Parameters.AddWithValue("@RawProductID", newRawProductId);
                            cmdUpPendingSlitPeel.Parameters.AddWithValue("@ProductID", curing.Product.ProductID);
                            cmdUpPendingSlitPeel.Parameters.AddWithValue("@BlockLogs", 1);
                            cmdUpPendingSlitPeel.Parameters.AddWithValue("@Qty", maxYield);
                            rows = cmdUpPendingSlitPeel.ExecuteNonQuery();

                            
                            if (rows > 0)
                            {
                                cmdDelete.Transaction = trans;
                                int res = cmdDelete.ExecuteNonQuery();

                                cmdInsertPendingSlitPeel.Transaction = trans;
                                cmdInsertPendingSlitPeel.Parameters.AddWithValue("@OrderNo", curing.OrderNo);
                                cmdInsertPendingSlitPeel.Parameters.AddWithValue("@RawProductID", curing.Product.RawProduct.RawProductID);
                                cmdInsertPendingSlitPeel.Parameters.AddWithValue("@ProductID", curing.Product.ProductID);
                                cmdInsertPendingSlitPeel.Parameters.AddWithValue("@BlocksLogs", 1);
                                cmdInsertPendingSlitPeel.Parameters.AddWithValue("@Qty", maxYield);
                                cmdInsertPendingSlitPeel.Parameters.AddWithValue("@Active", true);
                                cmdInsertPendingSlitPeel.ExecuteNonQuery();
                            }
                        }
                    }

                    trans.Commit(); 
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return curing.Product.RawProduct.RawProductID;
        }


        public static decimal GetSlittingDollarValue(ProductionTimeTable pt,int machineId,int shift)
        {
            decimal dollarValue = 0;
            
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT dollar_value FROM SlittingCapacity WHERE prod_timetable_id = @ProdTimetableID AND machine_id= @MachineID AND shift=@Shift", conn))
                    {
                        cmdGetData.Parameters.AddWithValue("@ProdTimetableID", pt.ID);
                        cmdGetData.Parameters.AddWithValue("@MachineID", machineId);
                        cmdGetData.Parameters.AddWithValue("@Shift", shift);
                        dollarValue = (decimal)cmdGetData.ExecuteScalar();                                
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return dollarValue;
        }

        public static decimal GetSlittingDollarValueForShift(ProductionTimeTable pt, int shift)
        {
            decimal dollarValue = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT SUM(dollar_value) AS dollar_value FROM SlittingOrders WHERE prod_timetable_id = @ProdTimetableID AND shift=@Shift", conn))
                    {
                        cmdGetData.Parameters.AddWithValue("@ProdTimetableID", pt.ID);
                        cmdGetData.Parameters.AddWithValue("@Shift", shift);
                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    dollarValue = CheckNull<decimal>(dr["dollar_value"]);
                                }
                            }
                        }

                        
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return dollarValue;
        }


        public static int MoveSlittingOrder(int newProdTimeTableID, Int64 orderNo, Product product, int newShiftId, decimal qty, decimal blocks, decimal dollarValue, SlittingOrder slittingOrder, string updateType,decimal originBlocks, decimal originQty, decimal originDollarValue)
        {
            SqlTransaction trans = null;
            int res = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    SqlCommand cmdNewSlittingOrders = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM SlittingOrders WHERE " +
                                                                         "prod_timetable_id=@NewProdTimeTableID AND order_no=@OrderNo AND product_id =@ProductID AND raw_product_id = @RawProductID AND shift=@NewShift AND order_type=@OrderType) " +
                                                                         "INSERT INTO SlittingOrders VALUES(@NewProdTimeTableID,@OrderNo,@ProductID,@RawProductID,@NewShift,@Qty,@Blocks,@DollarValue,@OrderType,@Status) " +
                                                                         "ELSE " +
                                                                         "UPDATE SlittingOrders SET qty+=@Qty, blocks+=@Blocks,dollar_value+=@DollarValue WHERE prod_timetable_id=@NewProdTimeTableID AND order_no=@OrderNo AND product_id =@ProductID AND raw_product_id = @RawProductID AND shift=@NewShift AND order_type=@OrderType", conn);

                    SqlCommand cmdDeleteSlittingOrder = new SqlCommand("DELETE FROM SlittingOrders WHERE id = @OriginSlittingOrderID", conn);

                    SqlCommand cmdUpdateOriginalSlittingOrders = new SqlCommand("UPDATE SlittingOrders SET qty = @OriginQty,blocks = @OriginBlocks,dollar_value=@OriginDollarValue " +
                                                                                "WHERE id = @OriginSlittingOrderID", conn);

                    conn.Open();
                    trans = conn.BeginTransaction();

                    if (updateType=="Del")
                    {   
                        //Origin Delete
                        cmdDeleteSlittingOrder.Transaction = trans;
                        cmdDeleteSlittingOrder.Parameters.AddWithValue("@OriginSlittingOrderID", slittingOrder.ID);
                        cmdDeleteSlittingOrder.ExecuteNonQuery();
                    }
                    else
                    {
                        //Origin Update
                        cmdUpdateOriginalSlittingOrders.Transaction = trans;
                        cmdUpdateOriginalSlittingOrders.Parameters.AddWithValue("@OriginQty", originQty);
                        cmdUpdateOriginalSlittingOrders.Parameters.AddWithValue("@OriginBlocks", originBlocks);
                        cmdUpdateOriginalSlittingOrders.Parameters.AddWithValue("@OriginDollarValue", originDollarValue);
                        cmdUpdateOriginalSlittingOrders.Parameters.AddWithValue("@OriginSlittingOrderID", slittingOrder.ID);
                        cmdUpdateOriginalSlittingOrders.ExecuteNonQuery();
                    }

                    //Destination Update
                    cmdNewSlittingOrders.Transaction = trans;
                    cmdNewSlittingOrders.Parameters.AddWithValue("@NewProdTimeTableID", newProdTimeTableID);
                    cmdNewSlittingOrders.Parameters.AddWithValue("@OrderNo", orderNo);
                    cmdNewSlittingOrders.Parameters.AddWithValue("@ProductID", product.ProductID);
                    cmdNewSlittingOrders.Parameters.AddWithValue("@RawProductID", product.Tile.RawProduct.RawProductID);
                    cmdNewSlittingOrders.Parameters.AddWithValue("@NewShift", newShiftId);
                    cmdNewSlittingOrders.Parameters.AddWithValue("@Qty", qty);
                    cmdNewSlittingOrders.Parameters.AddWithValue("@Blocks", blocks);
                    cmdNewSlittingOrders.Parameters.AddWithValue("@DollarValue", dollarValue);
                    cmdNewSlittingOrders.Parameters.AddWithValue("@OrderType", slittingOrder.Order.OrderType);
                    cmdNewSlittingOrders.Parameters.AddWithValue("@Status", "Slitting");
                    res = cmdNewSlittingOrders.ExecuteNonQuery();
                        
                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return res;
        }

        public static int MoveMultipleSlittingOrders(List<SlittingOrder> slittingOrderList,int availableShift,Int32 prodTimeTableID)
        {
            SqlTransaction trans = null;
            int res = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    SqlCommand cmdNewSlittingOrders = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM SlittingOrders WHERE " +
                                                                         "prod_timetable_id=@NewProdTimeTableID AND order_no=@OrderNo AND product_id =@ProductID AND raw_product_id = @RawProductID AND shift=@NewShift AND order_type=@OrderType) " +
                                                                         "INSERT INTO SlittingOrders VALUES(@NewProdTimeTableID,@OrderNo,@ProductID,@RawProductID,@NewShift,@Qty,@Blocks,@DollarValue,@OrderType,@Status) " +
                                                                         "ELSE " +
                                                                         "UPDATE SlittingOrders SET qty+=@Qty, blocks+=@Blocks,dollar_value+=@DollarValue WHERE prod_timetable_id=@NewProdTimeTableID AND order_no=@OrderNo AND product_id =@ProductID AND raw_product_id = @RawProductID AND shift=@NewShift AND order_type=@OrderType", conn);

                    SqlCommand cmdDeleteSlittingOrder = new SqlCommand("DELETE FROM SlittingOrders WHERE id = @OriginSlittingOrderID", conn);

                    

                    conn.Open();
                    trans = conn.BeginTransaction();

                    foreach (var item in slittingOrderList)
                    {
                        //Origin Delete
                        cmdDeleteSlittingOrder.Transaction = trans;
                        cmdDeleteSlittingOrder.Parameters.AddWithValue("@OriginSlittingOrderID", item.ID);
                        cmdDeleteSlittingOrder.ExecuteNonQuery();
                        cmdDeleteSlittingOrder.Parameters.Clear();

                        //Destination Update
                        cmdNewSlittingOrders.Transaction = trans;
                        cmdNewSlittingOrders.Parameters.AddWithValue("@NewProdTimeTableID", prodTimeTableID);
                        cmdNewSlittingOrders.Parameters.AddWithValue("@OrderNo", item.Order.OrderNo);
                        cmdNewSlittingOrders.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                        cmdNewSlittingOrders.Parameters.AddWithValue("@RawProductID", item.Product.RawProduct.RawProductID);
                        cmdNewSlittingOrders.Parameters.AddWithValue("@NewShift", availableShift);
                        cmdNewSlittingOrders.Parameters.AddWithValue("@Qty", item.Qty);
                        cmdNewSlittingOrders.Parameters.AddWithValue("@Blocks", item.Blocks);
                        cmdNewSlittingOrders.Parameters.AddWithValue("@DollarValue", item.DollarValue);
                        cmdNewSlittingOrders.Parameters.AddWithValue("@OrderType", item.Order.OrderType);
                        cmdNewSlittingOrders.Parameters.AddWithValue("@Status", "Slitting");
                        res = cmdNewSlittingOrders.ExecuteNonQuery();
                        cmdNewSlittingOrders.Parameters.Clear();

                    }
                    
                   
                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return res;
        }

        public static List<SlittingOrder> GetSlittingOrdersByMachine(int machineId)
        {
            List<SlittingOrder> slittingOrders = new List<SlittingOrder>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT Orders.order_id,Orders.sales_no,Orders.customer_id,Orders.required_date,Orders.slitting_comments, " +
                                                 "SlittingOrders.id AS slitting_id,SlittingOrders.prod_timetable_id,SlittingOrders.product_id,SlittingOrders.raw_product_id,SlittingOrders.qty,SlittingOrders.blocks,SlittingOrders.dollar_value,SlittingOrders.order_type,SlittingOrders.status,  " +
                                                 "Products.product_name,Products.product_code,Products.product_description,Products.Unit,Products.unit_price,  " +
                                                 "Customers.CompanyName,  " +
                                                 "ProductionTimeTable.date,  " +
                                                 "Machines.machine_id,Machines.machine_name,  " +
                                                 "Shifts.shift_id,Shifts.shift_name,  " +
                                                 "RawProducts.RawProductType,  " +
                                                 "ProductTiles.thickness,ProductTiles.max_yield  " +
                                                 "FROM dbo.Orders  " +
                                                 "INNER JOIN dbo.SlittingOrders ON Orders.order_id = SlittingOrders.order_no  " +
                                                 "INNER JOIN dbo.Products ON SlittingOrders.product_id = Products.id  " +
                                                 "INNER JOIN dbo.Customers ON Orders.customer_id = Customers.CustomerID  " +
                                                 "INNER JOIN dbo.ProductionTimeTable ON SlittingOrders.prod_timetable_id = ProductionTimeTable.id  " +
                                                 "INNER JOIN dbo.Machines ON ProductionTimeTable.machine_id = Machines.machine_id  " +
                                                 "INNER JOIN dbo.Shifts ON SlittingOrders.shift = Shifts.shift_id  " +
                                                 "INNER JOIN dbo.RawProducts ON Products.raw_product_id = RawProducts.RawProductID  " +
                                                 "INNER JOIN dbo.ProductTiles ON Products.id = ProductTiles.product_id  " +
                                                 "WHERE SlittingOrders.blocks > 0 AND Machines.machine_id=@MachineID", conn))
                    {

                        cmdGetData.Parameters.AddWithValue("@MachineID", machineId);
                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    SlittingOrder so = new SlittingOrder();
                                    so.ID = Convert.ToInt32(dr["slitting_id"]);
                                    so.ProdTimetableID = Convert.ToInt32(dr["prod_timetable_id"]);
                                    so.Qty = Convert.ToDecimal(dr["qty"]);
                                    so.Blocks = Convert.ToDecimal(dr["blocks"]);
                                    so.DollarValue = Convert.ToDecimal(dr["dollar_value"]);
                                    so.Shift = new Shift() { ShiftID = Convert.ToInt16(dr["shift_id"]), ShiftName = dr["shift_name"].ToString() };
                                    so.Status = dr["status"].ToString();
                                    so.SlittingDate = Convert.ToDateTime(dr["date"]);
                                    so.IsNotesVisible = dr["slitting_comments"].ToString() != "" ? "Visible" : "Collapsed";
                                    so.Machine = new Machines()
                                    {
                                        MachineID = Convert.ToInt16(dr["machine_id"]),
                                        MachineName = dr["machine_name"].ToString()
                                    };
                                    so.Order = new Order()
                                    {
                                        OrderNo = Convert.ToInt32(dr["order_id"]),
                                        SalesNo = dr["sales_no"].ToString(),
                                        Comments = dr["slitting_comments"].ToString(),
                                        OrderType = Convert.ToInt16(dr["order_type"]),
                                        RequiredDate = Convert.ToDateTime(dr["required_date"]),
                                        Customer = new Customer()
                                        {
                                            CustomerId = Convert.ToInt16(dr["customer_id"]),
                                            CompanyName = dr["CompanyName"].ToString()
                                        }
                                    };
                                    so.Product = new Product()
                                    {
                                        ProductID = Convert.ToInt16(dr["product_id"]),
                                        ProductCode = dr["product_code"].ToString(),
                                        ProductName = dr["product_name"].ToString(),
                                        ProductDescription = dr["product_description"].ToString(),
                                        ProductUnit = dr["Unit"].ToString(),
                                        Tile = new Tile()
                                        {
                                            Thickness = Convert.ToDecimal(dr["thickness"]),
                                            MaxYield = Convert.ToDecimal(dr["max_yield"])
                                        },

                                        UnitPrice = Convert.ToDecimal(dr["unit_price"]),
                                        RawProduct = new RawProduct()
                                        {
                                            RawProductID = Convert.ToInt16(dr["raw_product_id"]),
                                            RawProductType = dr["RawProductType"].ToString()
                                        }
                                    };
                                    slittingOrders.Add(so);
                                }
                            }
                        }


                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return slittingOrders;
        }

        public static ObservableCollection<SlittingOrder> GetSlittingOrdersByDateByShift(Int32 prodTimeTableID, int shift)
        {
            ObservableCollection<SlittingOrder> slittingOrders = new ObservableCollection<SlittingOrder>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                conn.Open();
                try
                {
                    SqlCommand cmdGetData = new SqlCommand("SELECT Orders.order_id,Orders.sales_no,Orders.customer_id,Orders.required_date,Orders.slitting_comments, " +
                                                                 "SlittingOrders.id AS slitting_id,SlittingOrders.prod_timetable_id,SlittingOrders.product_id,SlittingOrders.raw_product_id,SlittingOrders.qty,SlittingOrders.blocks,SlittingOrders.dollar_value,SlittingOrders.order_type,SlittingOrders.status,  " +
                                                                 "Products.product_name,Products.product_code,Products.product_description,Products.Unit,Products.unit_price,  " +
                                                                 "Customers.CompanyName,  " +
                                                                 "ProductionTimeTable.date,  " +
                                                                 "Machines.machine_id,Machines.machine_name,  " +
                                                                 "Shifts.shift_id,Shifts.shift_name,  " +
                                                                 "RawProducts.RawProductType,  " +
                                                                 "ProductTiles.thickness,ProductTiles.max_yield  " +
                                                                 "FROM dbo.Orders  " +
                                                                 "INNER JOIN dbo.SlittingOrders ON Orders.order_id = SlittingOrders.order_no  " +
                                                                 "INNER JOIN dbo.Products ON SlittingOrders.product_id = Products.id  " +
                                                                 "INNER JOIN dbo.Customers ON Orders.customer_id = Customers.CustomerID  " +
                                                                 "INNER JOIN dbo.ProductionTimeTable ON SlittingOrders.prod_timetable_id = ProductionTimeTable.id  " +
                                                                 "INNER JOIN dbo.Machines ON ProductionTimeTable.machine_id = Machines.machine_id  " +
                                                                 "INNER JOIN dbo.Shifts ON SlittingOrders.shift = Shifts.shift_id  " +
                                                                 "INNER JOIN dbo.RawProducts ON Products.raw_product_id = RawProducts.RawProductID  " +
                                                                 "INNER JOIN dbo.ProductTiles ON Products.id = ProductTiles.product_id  " +
                                                                 "WHERE SlittingOrders.blocks > 0 AND prod_timetable_id=@PodTimetableID AND shift=@Shift", conn);

                    cmdGetData.Parameters.AddWithValue("@PodTimetableID", prodTimeTableID);
                    cmdGetData.Parameters.AddWithValue("@Shift", shift);
                    using (SqlDataReader dr = cmdGetData.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                SlittingOrder so = new SlittingOrder();
                                so.ID = Convert.ToInt32(dr["slitting_id"]);
                                so.ProdTimetableID = Convert.ToInt32(dr["prod_timetable_id"]);
                                so.Qty = Convert.ToDecimal(dr["qty"]);
                                so.Blocks = Convert.ToDecimal(dr["blocks"]);
                                so.DollarValue = Convert.ToDecimal(dr["dollar_value"]);
                                so.Shift = new Shift() { ShiftID = Convert.ToInt16(dr["shift_id"]), ShiftName = dr["shift_name"].ToString() };
                                so.Status = dr["status"].ToString();
                                so.SlittingDate = Convert.ToDateTime(dr["date"]);
                                so.IsNotesVisible = dr["slitting_comments"].ToString() != "" ? "Visible" : "Collapsed";
                                so.Machine = new Machines()
                                {
                                    MachineID = Convert.ToInt16(dr["machine_id"]),
                                    MachineName = dr["machine_name"].ToString()
                                };
                                so.Order = new Order()
                                {
                                    OrderNo = Convert.ToInt32(dr["order_id"]),
                                    SalesNo = dr["sales_no"].ToString(),
                                    Comments = dr["slitting_comments"].ToString(),
                                    OrderType = Convert.ToInt16(dr["order_type"]),
                                    RequiredDate = Convert.ToDateTime(dr["required_date"]),
                                    Customer = new Customer()
                                    {
                                        CustomerId = Convert.ToInt16(dr["customer_id"]),
                                        CompanyName = dr["CompanyName"].ToString()
                                    }
                                };
                                so.Product = new Product()
                                {
                                    ProductID = Convert.ToInt16(dr["product_id"]),
                                    ProductCode = dr["product_code"].ToString(),
                                    ProductName = dr["product_name"].ToString(),
                                    ProductDescription = dr["product_description"].ToString(),
                                    ProductUnit = dr["Unit"].ToString(),
                                    Tile = new Tile()
                                    {
                                        Thickness = Convert.ToDecimal(dr["thickness"]),
                                        MaxYield = Convert.ToDecimal(dr["max_yield"])
                                    },

                                    UnitPrice = Convert.ToDecimal(dr["unit_price"]),
                                    RawProduct = new RawProduct()
                                    {
                                        RawProductID = Convert.ToInt16(dr["raw_product_id"]),
                                        RawProductType = dr["RawProductType"].ToString()
                                    }
                                };
                                slittingOrders.Add(so);
                            }
                        }
                    }
                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return slittingOrders;
        }


       

        public static int BackupDeleteSlittingOrders(List<SlittingOrder> slitPeelList,string backupType)
        {
            int result = 0;
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdInsertSlittingBackup = new SqlCommand("INSERT INTO SlittingBackUp(backup_date,backup_shift_id,backup_type,id,prod_time_table_id,order_no,product_id,raw_product_id,qty,dollar_value,blocks,shift,order_type) " +
                                                                    "VALUES (@BackupDate,@BackupShift,@BackupType,@ID,@ProdTimeTableID,@OrderNo,@ProductID,@RawProductID,@Qty,@DollarValue,@Blocks,@Shift,@OrderType)", conn);

                SqlCommand cmdDeleteSlittingOrder = new SqlCommand("DELETE FROM SlittingOrders " + 
                                                                   "WHERE id = @ID", conn);
                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {
                    List<int> raw1 = new List<int>();
                    List<int> raw2 = new List<int>();
                    foreach (var item in slitPeelList)
                    {

                        cmdInsertSlittingBackup.Transaction = trans;
                        cmdInsertSlittingBackup.Parameters.AddWithValue("@BackupDate", DateTime.Now);
                        cmdInsertSlittingBackup.Parameters.AddWithValue("@BackupShift", item.Shift.ShiftID);
                        cmdInsertSlittingBackup.Parameters.AddWithValue("@BackupType", backupType);
                        cmdInsertSlittingBackup.Parameters.AddWithValue("@ID", item.ID);
                        cmdInsertSlittingBackup.Parameters.AddWithValue("@ProdTimeTableID", item.ProdTimetableID);
                        cmdInsertSlittingBackup.Parameters.AddWithValue("@OrderNo", item.Order.OrderNo);
                        cmdInsertSlittingBackup.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                        cmdInsertSlittingBackup.Parameters.AddWithValue("@RawProductID", item.Product.RawProduct.RawProductID);
                        cmdInsertSlittingBackup.Parameters.AddWithValue("@Qty", item.Qty);
                        cmdInsertSlittingBackup.Parameters.AddWithValue("@DollarValue", item.DollarValue);
                        cmdInsertSlittingBackup.Parameters.AddWithValue("@Blocks", item.Blocks);
                        cmdInsertSlittingBackup.Parameters.AddWithValue("@Shift", item.Shift.ShiftID);
                        cmdInsertSlittingBackup.Parameters.AddWithValue("@OrderType", item.Order.OrderType);
                        raw1.Add(cmdInsertSlittingBackup.ExecuteNonQuery());
                        cmdInsertSlittingBackup.Parameters.Clear();
                    }

                    bool y = raw1.Any(c => c > 0);
                    if (y)
                    {
                        foreach (var item in slitPeelList)
                        {
                            cmdDeleteSlittingOrder.Transaction = trans;
                            cmdDeleteSlittingOrder.Parameters.AddWithValue("@ID", item.ID);
                            raw2.Add(cmdDeleteSlittingOrder.ExecuteNonQuery());
                            cmdDeleteSlittingOrder.Parameters.Clear();
                        }
                        bool x = raw2.Any(c => c > 0);
                        result = x == true ? 1 : -2;
                    }
                    else
                    {
                        result = -1;//Could not make backup
                    }
                    
                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("SQL ADDING COMMAND ERROR OCCURED :  Adding to Slit Peel table" + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return result;
        }

        public static int InsertIBCChangeOverDetails(IBCChangeOver ibcc)
        {
            int result = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmd = new SqlCommand("INSERT INTO IBCChangeOver(binder_type, batch_no, datetime) VALUES (@BinderType,@BatchNo,@DateTime)", conn))
                    {
                        cmd.Parameters.AddWithValue("@BinderType", ibcc.BinderType);
                        cmd.Parameters.AddWithValue("@BatchNo", ibcc.BatchNo);
                        cmd.Parameters.AddWithValue("@DateTime", ibcc.DateTime);
                        result = cmd.ExecuteNonQuery();

                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error: " + e);
                    result = 3;
                }
                finally
                {
                    conn.Close();
                }
            }

            return result;
        }

        public static ObservableCollection<IBCChangeOver> GetIBCChangeOverDetails()
        {

            ObservableCollection<IBCChangeOver> IBCChangeOverList = new ObservableCollection<IBCChangeOver>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT * FROM IBCChangeOver " +
                                                                  "Order by datetime desc", conn))
                    {


                        //cmdGetData.Parameters.AddWithValue("@ProductID", prodId);

                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    IBCChangeOver ibc = new IBCChangeOver();
                                    ibc.ID = Convert.ToInt32(dr["id"]);
                                    ibc.BinderType = dr["binder_type"].ToString();
                                    ibc.BatchNo = dr["batch_no"].ToString();
                                    ibc.DateTime = Convert.ToDateTime(dr["datetime"]);
                                    IBCChangeOverList.Add(ibc);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading Product Capacity: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return IBCChangeOverList;
        }

        public static Product GetProductDetailsByID(int prodId)
        {
            Product p = new Product();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT * FROM Products " +
                                                                  "WHERE id=@ProductID", conn))
                    {


                        cmdGetData.Parameters.AddWithValue("@ProductID", prodId);


                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    p.ProductID = Convert.ToInt16(dr["id"]);
                                    //prod.Category = new Category() { CategoryID = Convert.ToInt16(dr["category_id"]) };
                                    //prod.RawProduct = new RawProduct()
                                    //{
                                    //    RawProductID = Convert.ToInt16(dr["raw_product_id"]),
                                    //    RawProductCode = dr["RawProductCode"].ToString(),
                                    //    RawProductName = dr["RawProductName"].ToString(),

                                    //    Description = dr["Description"].ToString(),
                                    //    RawProductType = dr["RawProductType"].ToString()
                                    //};
                                    p.Type = dr["type"].ToString();
                                    p.ProductCode = dr["product_code"].ToString();
                                    p.ProductName = dr["product_name"].ToString();
                                    p.ProductDescription = dr["product_description"].ToString();
                                    p.ProductUnit = dr["unit"].ToString();
                                    p.UnitPrice = Convert.ToDecimal(dr["unit_price"]);
                                    //p.Roll = new Roll() { RollThickness = Convert.ToDecimal(dr["RollThickness"]), RollDensity = dr["RollDensity"].ToString(), RollWidth = Convert.ToDecimal(dr["RollWidth"]), RollMaxYield = Convert.ToDecimal(dr["RollMaxYield"]) };
                                    p.Active = Convert.ToBoolean(dr["active"]);

                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading Product Capacity: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return p;
        }

        public static List<RawProductMachine> GetMachineByRawProductID(int rawProdId)
        {
            List<RawProductMachine> list = new List<RawProductMachine>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    
                        using (SqlCommand cmdGetId = new SqlCommand("SELECT * FROM RawProductMachine WHERE raw_product_id=@RawProdID", conn))
                        {
                            cmdGetId.Parameters.AddWithValue("@RawProdID", rawProdId);
                            using (SqlDataReader dr = cmdGetId.ExecuteReader())
                            {
                                if (dr != null)
                                {
                                    while (dr.Read())
                                    {
                                        RawProductMachine mach = new RawProductMachine();
                                        mach.ID = Convert.ToInt16(dr["id"]);
                                        mach.RawProductID = Convert.ToInt16(dr["raw_product_id"]);
                                        mach.GradingMachineID = Convert.ToInt16(dr["grading_machine_id"]);
                                        mach.MixingMachineID = Convert.ToInt16(dr["mixing_machine_id"]);
                                        mach.SlitPeelMachineID = Convert.ToInt16(dr["slit_peel_machine_id"]);
                                        mach.ReRollingMachineID = Convert.ToInt16(dr["re_rolling_machine_id"]);
                                        list.Add(mach);
                                    }
                                }
                            }
                        }

                    
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading production details: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return list;
        }

        public static List<VehicleWorkOrder> GetVehicleOdometerReadings(int vehicleId)
        {
            List<VehicleWorkOrder> list = new List<VehicleWorkOrder>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    
                        using (SqlCommand cmdGetId = new SqlCommand("SELECT TOP(6) completed_date,odometer_reading,completed_by  " +
                                                                    "FROM VehicleWorkOrder " +
                                                                    "WHERE vehicle_id = @VehicleId AND work_order_type != 'Repair' AND status ='Completed' " +
                                                                    "ORDER BY completed_date DESC", conn))
                        {
                            cmdGetId.Parameters.AddWithValue("@VehicleId", vehicleId);
                            using (SqlDataReader dr = cmdGetId.ExecuteReader())
                            {
                                if (dr != null)
                                {
                                    while (dr.Read())
                                    {
                                        VehicleWorkOrder v = new VehicleWorkOrder();
                                        v.CompletedDate = Convert.ToDateTime(dr["completed_date"]);
                                        v.OdometerReading = Convert.ToInt64(dr["odometer_reading"]);
                                        v.CompletedBy = dr["completed_by"].ToString();
                                        list.Add(v);
                                    }
                                }
                            }
                        }

                    
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading production details: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return list;
        }


        public static List<BinderType> GetBinderTypes()
        {
            List<BinderType> binderTypes = new List<BinderType>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                conn.Open();
                try
                {
                    SqlCommand cmdGetData = new SqlCommand("SELECT * FROM BinderTypes " +
                                                           "WHERE active ='True'", conn);

                  
                    using (SqlDataReader dr = cmdGetData.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                BinderType bt = new BinderType();
                                bt.ID = Convert.ToInt16(dr["id"]);
                                bt.BinderName = dr["binder_type"].ToString();
                                bt.Active = Convert.ToBoolean(dr["active"]);

                                binderTypes.Add(bt);
                            }
                        }
                    }
                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return binderTypes;
        }

        public static List<ProductionHistory> GetMixingCompletedByDate(DateTime date)
        {
            List<ProductionHistory> MixingCompletedList = new List<ProductionHistory>();
            List<ProductionHistory> MixingReturnedList = new List<ProductionHistory>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                conn.Open();
                try
                {
                    SqlCommand cmdGetData = new SqlCommand("SELECT raw_product_id,SUM(qty) AS mixing_completed, created_date, shift, status " +
                                                           "FROM MixingCompleted " +
                                                           "WHERE created_date = @CompletedDate AND status = 'Completed' " +
                                                           "GROUP BY raw_product_id, created_date, shift, status " +
                                                           "ORDER BY created_date desc,shift", conn);

                    SqlCommand cmdGetReturnedData = new SqlCommand("SELECT raw_product_id,SUM(qty) AS mixing_completed, created_date, shift, status " +
                                                           "FROM MixingCompleted " +
                                                           "WHERE created_date = @CompletedDate AND status = 'Returned' " +
                                                           "GROUP BY raw_product_id, created_date, shift, status " +
                                                           "ORDER BY created_date desc,shift", conn);

                    cmdGetData.Parameters.AddWithValue("@CompletedDate", date.Date);
                    using (SqlDataReader dr = cmdGetData.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                ProductionHistory ph = new ProductionHistory();
                                ph.RawProduct = new RawProduct() { RawProductID = Convert.ToInt16(dr["raw_product_id"]) };
                                ph.Qty = Convert.ToDecimal(dr["mixing_completed"]);
                                ph.CreatedDateTime = Convert.ToDateTime(dr["created_date"]);
                                ph.Shift = Convert.ToInt16(dr["shift"]);
                                ph.Status = dr["status"].ToString();
                                if(Convert.ToInt16(dr["shift"]) == 1)
                                {
                                    ph.ShiftName = "Morning";
                                }
                                else if(Convert.ToInt16(dr["shift"]) == 2)
                                {
                                    ph.ShiftName = "Arvo";
                                }
                                else if(Convert.ToInt16(dr["shift"]) == 3)
                                {
                                    ph.ShiftName = "Night";
                                }
                                
                                MixingCompletedList.Add(ph);
                            }
                        }
                    }

                    cmdGetReturnedData.Parameters.AddWithValue("@CompletedDate", date.Date);
                    using (SqlDataReader dr = cmdGetReturnedData.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                ProductionHistory ph = new ProductionHistory();
                                ph.RawProduct = new RawProduct() { RawProductID = Convert.ToInt16(dr["raw_product_id"]) };
                                ph.Qty = Convert.ToDecimal(dr["mixing_completed"]);
                                ph.CreatedDateTime = Convert.ToDateTime(dr["created_date"]);
                                ph.Shift = Convert.ToInt16(dr["shift"]);
                                ph.Status = dr["status"].ToString();
                                if (Convert.ToInt16(dr["shift"]) == 1)
                                {
                                    ph.ShiftName = "Morning";
                                }
                                else if (Convert.ToInt16(dr["shift"]) == 2)
                                {
                                    ph.ShiftName = "Arvo";
                                }
                                else if (Convert.ToInt16(dr["shift"]) == 3)
                                {
                                    ph.ShiftName = "Night";
                                }

                                MixingReturnedList.Add(ph);
                            }
                        }
                    }
                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            //Remove returned items
            if (MixingCompletedList != null && MixingReturnedList != null)

                for (int i = 0; i < MixingCompletedList.Count; i++)
                {
                    var data = MixingReturnedList.FirstOrDefault(x => x.RawProduct.RawProductID == MixingCompletedList[i].RawProduct.RawProductID && x.CreatedDateTime.Date == MixingCompletedList[i].CreatedDateTime.Date && x.Shift == MixingCompletedList[i].Shift);
                    if(data != null)
                    {
                        MixingCompletedList[i].Qty -= data.Qty;
                    }
            }

            return MixingCompletedList;
        }

        public static List<ProductionHistory> GetGradingMixingCompletedOrders(ObservableCollection<GradingWeeklySchedule> gws)
        {
            List<ProductionHistory> MixingCompletedList = new List<ProductionHistory>();
            List<ProductionHistory> MixingReturnedList = new List<ProductionHistory>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                conn.Open();
                try
                {
                    SqlCommand cmdGetData = new SqlCommand("SELECT sales_id,raw_product_id,SUM(qty) AS mixing_completed " +
                                                           "FROM MixingCompleted " +
                                                           "WHERE sales_id = @OrderNo AND raw_product_id=@RawProductID AND status = 'Completed' " +
                                                           "GROUP BY sales_id,raw_product_id", conn);

                    SqlCommand cmdGetReturnedData = new SqlCommand("SELECT sales_id,raw_product_id,SUM(qty) AS mixing_completed, created_date, shift, status " +
                                                                   "FROM MixingCompleted " +
                                                                   "WHERE sales_id = @OrderNo AND raw_product_id=@RawProductID AND status = 'Returned' " +
                                                                   "GROUP BY sales_id,raw_product_id, created_date, shift, status " +
                                                                   "ORDER BY created_date desc,shift", conn);

                    for (int i = 0; i < gws.Count; i++)
                    {
                        cmdGetData.Parameters.AddWithValue("@OrderNo", gws[i].OrderNo);
                        cmdGetData.Parameters.AddWithValue("@RawProductID", gws[i].RawProduct.RawProductID);
                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    ProductionHistory ph = new ProductionHistory();
                                    ph.SalesOrder = new SalesOrder() { ID = Convert.ToInt16(dr["sales_id"]) };
                                    ph.RawProduct = new RawProduct() { RawProductID = Convert.ToInt16(dr["raw_product_id"]) };
                                    ph.Qty = Convert.ToDecimal(dr["mixing_completed"]);
                                    //ph.CreatedDateTime = Convert.ToDateTime(dr["created_date"]);
                                    //ph.Shift = Convert.ToInt16(dr["shift"]);
                                    //ph.Status = dr["status"].ToString();
                                    //if (Convert.ToInt16(dr["shift"]) == 1)
                                    //{
                                    //    ph.ShiftName = "Morning";
                                    //}
                                    //else if (Convert.ToInt16(dr["shift"]) == 2)
                                    //{
                                    //    ph.ShiftName = "Arvo";
                                    //}
                                    //else if (Convert.ToInt16(dr["shift"]) == 3)
                                    //{
                                    //    ph.ShiftName = "Night";
                                    //}
                                    if (MixingCompletedList.Count == 0)
                                    {
                                        MixingCompletedList.Add(ph);
                                    }
                                    else
                                    {
                                        bool data = MixingCompletedList.Any(x => x.SalesOrder.ID == Convert.ToInt16(dr["sales_id"]) && x.RawProduct.RawProductID == Convert.ToInt16(dr["raw_product_id"]));
                                        if (data == false)
                                        {
                                            MixingCompletedList.Add(ph);
                                        }
                                    }
                                }
                            }
                        }
                        cmdGetData.Parameters.Clear();
                    }
                   
                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }          
            

            return MixingCompletedList;
        }


        public static List<ProductionHistory> GetMixingCompletedOrders(ObservableCollection<MixingWeeklySchedule> gws)
        {
            List<ProductionHistory> MixingCompletedList = new List<ProductionHistory>();
            List<ProductionHistory> MixingReturnedList = new List<ProductionHistory>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                conn.Open();
                try
                {
                    SqlCommand cmdGetData = new SqlCommand("SELECT sales_id,raw_product_id,SUM(qty) AS mixing_completed " +
                                                           "FROM MixingCompleted " +
                                                           "WHERE sales_id = @OrderNo AND raw_product_id=@RawProductID AND status = 'Completed' " +
                                                           "GROUP BY sales_id,raw_product_id", conn);

                    SqlCommand cmdGetReturnedData = new SqlCommand("SELECT sales_id,raw_product_id,SUM(qty) AS mixing_completed, created_date, shift, status " +
                                                                   "FROM MixingCompleted " +
                                                                   "WHERE sales_id = @OrderNo AND raw_product_id=@RawProductID AND status = 'Returned' " +
                                                                   "GROUP BY sales_id,raw_product_id, created_date, shift, status " +
                                                                   "ORDER BY created_date desc,shift", conn);

                    for (int i = 0; i < gws.Count; i++)
                    {
                        cmdGetData.Parameters.AddWithValue("@OrderNo", gws[i].OrderNo);
                        cmdGetData.Parameters.AddWithValue("@RawProductID", gws[i].RawProduct.RawProductID);
                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    ProductionHistory ph = new ProductionHistory();
                                    ph.SalesOrder = new SalesOrder() { ID = Convert.ToInt16(dr["sales_id"]) };
                                    ph.RawProduct = new RawProduct() { RawProductID = Convert.ToInt16(dr["raw_product_id"]) };
                                    ph.Qty = Convert.ToDecimal(dr["mixing_completed"]);
                                    //ph.CreatedDateTime = Convert.ToDateTime(dr["created_date"]);
                                    //ph.Shift = Convert.ToInt16(dr["shift"]);
                                    //ph.Status = dr["status"].ToString();
                                    //if (Convert.ToInt16(dr["shift"]) == 1)
                                    //{
                                    //    ph.ShiftName = "Morning";
                                    //}
                                    //else if (Convert.ToInt16(dr["shift"]) == 2)
                                    //{
                                    //    ph.ShiftName = "Arvo";
                                    //}
                                    //else if (Convert.ToInt16(dr["shift"]) == 3)
                                    //{
                                    //    ph.ShiftName = "Night";
                                    //}
                                    if (MixingCompletedList.Count == 0)
                                    {
                                        MixingCompletedList.Add(ph);
                                    }
                                    else
                                    {
                                        bool data = MixingCompletedList.Any(x => x.SalesOrder.ID == Convert.ToInt16(dr["sales_id"]) && x.RawProduct.RawProductID == Convert.ToInt16(dr["raw_product_id"]));
                                        if (data == false)
                                        {
                                            MixingCompletedList.Add(ph);
                                        }
                                    }
                                }
                            }
                        }
                        cmdGetData.Parameters.Clear();
                    }

                    //for (int i = 0; i < gws.Count; i++)
                    //{
                    //    cmdGetReturnedData.Parameters.AddWithValue("@OrderNo", gws[i].OrderNo);
                    //    cmdGetReturnedData.Parameters.AddWithValue("@RawProductID", gws[i].RawProduct.RawProductID);
                    //    using (SqlDataReader dr = cmdGetReturnedData.ExecuteReader())
                    //    {
                    //        if (dr != null)
                    //        {
                    //            while (dr.Read())
                    //            {
                    //                ProductionHistory ph = new ProductionHistory();
                    //                ph.SalesOrder = new SalesOrder() { ID = Convert.ToInt16(dr["sales_id"]) };
                    //                ph.RawProduct = new RawProduct() { RawProductID = Convert.ToInt16(dr["raw_product_id"]) };
                    //                ph.Qty = Convert.ToDecimal(dr["mixing_completed"]);
                    //                ph.CreatedDateTime = Convert.ToDateTime(dr["created_date"]);
                    //                ph.Shift = Convert.ToInt16(dr["shift"]);
                    //                ph.Status = dr["status"].ToString();
                    //                if (Convert.ToInt16(dr["shift"]) == 1)
                    //                {
                    //                    ph.ShiftName = "Morning";
                    //                }
                    //                else if (Convert.ToInt16(dr["shift"]) == 2)
                    //                {
                    //                    ph.ShiftName = "Arvo";
                    //                }
                    //                else if (Convert.ToInt16(dr["shift"]) == 3)
                    //                {
                    //                    ph.ShiftName = "Night";
                    //                }

                    //                if (MixingReturnedList.Count == 0)
                    //                {
                    //                    MixingReturnedList.Add(ph);
                    //                }
                    //                else
                    //                {
                    //                    bool data = MixingReturnedList.Any(x => x.SalesOrder.ID == Convert.ToInt16(dr["sales_id"]) && x.RawProduct.RawProductID == Convert.ToInt16(dr["raw_product_id"]));
                    //                    if(data ==false)
                    //                    {
                    //                        MixingReturnedList.Add(ph);
                    //                    }
                    //                }
                    //            }
                    //        }
                    //    }
                    //    cmdGetReturnedData.Parameters.Clear();
                    //}
                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            //foreach (var item in MixingCompletedList)
            //{
            //    Console.WriteLine(item.SalesOrder.ID + " " + item.RawProduct.RawProductID + " " + item.Qty + " " + item.CreatedDateTime);
            //}

            //Console.WriteLine("@@@@@@@@@@@@@@@@@@@@@@@@@");

            //foreach (var item in MixingReturnedList)
            //{
            //    Console.WriteLine(item.SalesOrder.ID + " " + item.RawProduct.RawProductID + " " + item.Qty + " " + item.CreatedDateTime);
            //}

            //Console.WriteLine("@@@@@@@@@@@@@@@@@@@@@@@@@");

            ////Remove returned items
            //if (MixingCompletedList != null && MixingReturnedList != null)
            //{
            //    for (int i = 0; i < MixingCompletedList.Count; i++)
            //    {
            //        var data = MixingReturnedList.FirstOrDefault(x => x.RawProduct.RawProductID == MixingCompletedList[i].RawProduct.RawProductID && x.SalesOrder.ID == MixingCompletedList[i].SalesOrder.ID);
            //        if (data != null)
            //        {
            //            MixingCompletedList[i].Qty -= data.Qty;
            //            if(MixingCompletedList[i].Qty <= 0)
            //            {
            //                MixingCompletedList.RemoveAt(i);
            //            }
            //        }
            //    }
            //}

            //foreach (var item in MixingCompletedList)
            //{
            //    Console.WriteLine(item.SalesOrder.ID + " " + item.RawProduct.RawProductID + " " + item.Qty + " " + item.CreatedDateTime);
            //}

            return MixingCompletedList;
        }

        public static ObservableCollection<ProductionTotals> GetGradingAndMixingData()
        {
            ObservableCollection<ProductionTotals> productionTotals = new ObservableCollection<ProductionTotals>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                conn.Open();
                try
                {
                    SqlCommand cmdGetData = new SqlCommand("SELECT Orders.required_date as grading_date,ISNULL(GradingScheduling.raw_product_id,0) as grading_raw_product_id,ISNULL(GradingScheduling.shift,0) as grading_shift, ISNULL(GradingScheduling.blocklog_qty,0) as grading_blocklog_qty, ISNULL(g.RawProductType,'') as grading_unit, " +
                                                           "Orders.mixing_date,ISNULL(MixingCurrentCapacity.raw_product_id,0) as raw_product_id,Orders.mixing_shift,ISNULL(MixingCurrentCapacity.blockLog_qty,0) as mixing_block_log, ISNULL(m.RawProductType,'') as mixing_unit " +
                                                           "FROM dbo.Orders " +
                                                           "LEFT JOIN dbo.GradingScheduling ON Orders.order_id = GradingScheduling.sales_id " +
                                                           "LEFT JOIN dbo.MixingCurrentCapacity ON Orders.order_id = MixingCurrentCapacity.sales_id " +
                                                           "LEFT JOIN dbo.RawProducts g ON GradingScheduling.raw_product_id = g.RawProductID " +
                                                           "LEFT JOIN dbo.RawProducts m ON MixingCurrentCapacity.raw_product_id = m.RawProductID " +
                                                           "WHERE GradingScheduling.blocklog_qty IS NOT NULL OR MixingCurrentCapacity.blocklog_qty IS NOT NULL " + 
                                                           "ORDER BY grading_date", conn);


                    using (SqlDataReader dr = cmdGetData.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                ProductionTotals pt = new ProductionTotals();
                                pt.GradingDate = Convert.ToDateTime(dr["grading_date"]).AddDays(1);

                                string shiftName = string.Empty;
                                if (Convert.ToInt16(dr["grading_shift"]) == 1)
                                {
                                    shiftName = "Morning";
                                }
                                else if (Convert.ToInt16(dr["grading_shift"]) == 2)
                                {
                                    shiftName = "Arvo";
                                }
                                else if (Convert.ToInt16(dr["grading_shift"]) == 3)
                                {
                                    shiftName = "Night";
                                }

                                pt.GradingShift = shiftName;
                                pt.GradingUnit = dr["grading_unit"].ToString();
                                pt.GradingQty = Convert.ToDecimal(dr["grading_blocklog_qty"]);

                                pt.MixingDate = Convert.ToDateTime(dr["mixing_date"]);
                                pt.MixingingUnit = dr["mixing_unit"].ToString();
                                pt.MixingShift = dr["mixing_shift"].ToString();
                                pt.MixingQty = Convert.ToDecimal(dr["mixing_block_log"]);
                                productionTotals.Add(pt);
                            }
                        }
                    }
                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return productionTotals;
        }

        public static ObservableCollection<MixingProductionDetails> GetAllMixingOrders()
        {
            ObservableCollection<MixingProductionDetails> rawProductionDetails = new ObservableCollection<MixingProductionDetails>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                conn.Open();
                try
                {
                    SqlCommand cmdGetData = new SqlCommand("SELECT MixingCurrentCapacity.id,MixingCurrentCapacity.prod_time_table_id,MixingCurrentCapacity.mixing_time_table_id,MixingCurrentCapacity.sales_id,MixingCurrentCapacity.raw_product_id,MixingCurrentCapacity.blockLog_qty,MixingCurrentCapacity.order_type,MixingCurrentCapacity.rank,MixingCurrentCapacity.active_order, " +
                                                           "RawProducts.RawProductID,RawProducts.RawProductCode, RawProducts.Description,RawProducts.RawProductType, " +
                                                           "Formulas.mixing, " +
                                                           "ProductionTimeTable.date, " +
                                                           "Orders.order_id,Orders.sales_no,Orders.mixing_date,Orders.mixing_comments,Orders.required_date_selected,ISNULL(Orders.mixing_shift,'') AS mixing_shift, " +
                                                           "Customers.CompanyName, RawProductsActive.day_shift, RawProductsActive.evening_shift,RawProductsActive.night_shift " +
                                                           "FROM dbo.MixingCurrentCapacity " +
                                                           "INNER JOIN dbo.RawProducts ON MixingCurrentCapacity.raw_product_id = RawProducts.RawProductID " +
                                                           "INNER JOIN dbo.Formulas ON RawProducts.RawProductID = Formulas.raw_product_id " +
                                                           "INNER JOIN dbo.Orders ON MixingCurrentCapacity.sales_id = Orders.order_id " +
                                                           "INNER JOIN dbo.ProductionTimeTable ON MixingCurrentCapacity.mixing_time_table_id = ProductionTimeTable.id " +
                                                           "INNER JOIN dbo.RawProductsActive ON RawProducts.RawProductID = RawProductsActive.raw_product_id " +
                                                           "INNER JOIN dbo.Customers ON Orders.customer_id = Customers.CustomerID " +
                                                           "WHERE MixingCurrentCapacity.blockLog_qty > 0 AND MixingCurrentCapacity.status = 'Mixing' AND RawProductsActive.type = 'mixing' " +
                                                           "ORDER BY MixingCurrentCapacity.rank,Orders.mixing_date,Orders.mixing_shift desc", conn);


                    using (SqlDataReader dr = cmdGetData.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                MixingProductionDetails rpd = new MixingProductionDetails();

                                rpd.RawProduct = new RawProduct()
                                {
                                    RawProductID = Convert.ToInt16(dr["RawProductID"]),
                                    RawProductCode = dr["RawProductCode"].ToString(),
                                    Description = dr["Description"].ToString(),
                                    RawProductType = dr["RawProductType"].ToString()
                                };
                                rpd.Customer = new Customer()
                                {
                                    CompanyName = dr["CompanyName"].ToString()
                                };
                                rpd.RawProductsActive = new RawProductsActive()
                                {
                                    DayShift = Convert.ToBoolean(dr["day_shift"]),
                                    EveningShift = Convert.ToBoolean(dr["evening_shift"]),
                                    NightShift = Convert.ToBoolean(dr["night_shift"])
                                };
                                rpd.MixingCurrentCapacityID = Convert.ToInt32(dr["id"]);
                                rpd.ProdTimeTableID = Convert.ToInt32(dr["prod_time_table_id"]);
                                rpd.MixingTimeTableID = Convert.ToInt32(dr["mixing_time_table_id"]);
                                rpd.SalesOrder = dr["sales_no"].ToString();
                                rpd.SalesOrderId = Convert.ToInt32(dr["order_id"]);
                                rpd.RequiredDate = Convert.ToDateTime(dr["mixing_date"]).ToString("dd/MM/yyyy");
                                rpd.ReqDateSelected = Convert.ToBoolean(dr["required_date_selected"]);
                                rpd.Comment = dr["mixing_comments"].ToString();
                                rpd.MixingFormula = dr["mixing"].ToString();
                                rpd.BlockLogQty = Convert.ToDecimal(dr["blockLog_qty"]);
                                rpd.OrderType = Convert.ToInt32(dr["order_type"]);
                                rpd.ProductionDate = dr["date"].ToString();
                                rpd.Rank = Convert.ToInt16(dr["rank"]);
                                rpd.ActiveOrder = Convert.ToBoolean(dr["active_order"]);
                                rpd.MixingShift = dr["mixing_shift"].ToString();
                                rawProductionDetails.Add(rpd);
                            }
                        }
                    }
                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return rawProductionDetails;
        }


        public static int AddNewProviderToDB(MachineProvider mp, string newProviderName)
        {
            SqlTransaction trans = null;
            int res = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    //Check the existance of the provider name                    
                    SqlCommand cmdCheckProvider = new SqlCommand("SELECT COUNT(*) FROM Provider " +
                                                                 "WHERE provider_name =@ProviderName", conn);

                    SqlCommand cmdAddProvider = new SqlCommand("INSERT INTO Provider (provider_name,provider_address,provider_suburb,provider_postcode,provider_state,active,contact_name,email,phone) " +
                                                               "VALUES (@ProviderName,@ProviderAddress,@ProviderSuburb,@ProviderPostcode,@ProviderState,@Active,@ContactName,@Email,@Phone)", conn);


                    SqlCommand cmdAddUpdateProvider = new SqlCommand("UPDATE Provider SET provider_name=@ProviderName, provider_address=@ProviderAddress,provider_suburb =@ProviderSuburb,provider_postcode = @ProviderPostcode, provider_state=@ProviderState, active=@Active,contact_name=@ContactName,email=@Email,phone=@Phone " +
                                                                     "WHERE id=@ProviderID", conn);


                    conn.Open();
                    trans = conn.BeginTransaction();

                    //New provider
                    if (!string.IsNullOrWhiteSpace(newProviderName))
                    {
                        cmdCheckProvider.Transaction = trans;
                        cmdCheckProvider.Parameters.AddWithValue("@ProviderName", newProviderName);
                        int userCount = (int)cmdCheckProvider.ExecuteScalar();
                        if (userCount == 0)
                        {
                            cmdAddProvider.Transaction = trans;
                            //cmdAddProvider.Parameters.AddWithValue("@ProviderID", mp.ProviderID);
                            cmdAddProvider.Parameters.AddWithValue("@ProviderName", newProviderName);
                            cmdAddProvider.Parameters.AddWithValue("@ProviderAddress", mp.Address);
                            cmdAddProvider.Parameters.AddWithValue("@ProviderSuburb", mp.Suburb);
                            cmdAddProvider.Parameters.AddWithValue("@ProviderPostcode", mp.PostCode);
                            cmdAddProvider.Parameters.AddWithValue("@ProviderState", mp.State);
                            cmdAddProvider.Parameters.AddWithValue("@Active", mp.Active.Equals("Active") ? true : false);
                            cmdAddProvider.Parameters.AddWithValue("@ContactName", mp.ContactName);
                            cmdAddProvider.Parameters.AddWithValue("@Email", mp.Email ?? (object)DBNull.Value); 
                            cmdAddProvider.Parameters.AddWithValue("@Phone", mp.Phone ?? (object)DBNull.Value);
                            res = cmdAddProvider.ExecuteNonQuery();
                        }
                        else
                        {
                            res = -1;
                        }
                    }
                    else
                    {
                        //Update
                        cmdAddUpdateProvider.Transaction = trans;
                        cmdAddUpdateProvider.Parameters.AddWithValue("@ProviderID", mp.ProviderID);
                        cmdAddUpdateProvider.Parameters.AddWithValue("@ProviderName", mp.ProviderName);
                        cmdAddUpdateProvider.Parameters.AddWithValue("@ProviderAddress", mp.Address);
                        cmdAddUpdateProvider.Parameters.AddWithValue("@ProviderSuburb", mp.Suburb);
                        cmdAddUpdateProvider.Parameters.AddWithValue("@ProviderPostcode", mp.PostCode);
                        cmdAddUpdateProvider.Parameters.AddWithValue("@ProviderState", mp.State);
                        cmdAddUpdateProvider.Parameters.AddWithValue("@Active", mp.Active.Equals("Active") ? true : false);
                        cmdAddUpdateProvider.Parameters.AddWithValue("@ContactName", mp.ContactName);
                        cmdAddUpdateProvider.Parameters.AddWithValue("@Email", mp.Email ?? (object)DBNull.Value);
                        cmdAddUpdateProvider.Parameters.AddWithValue("@Phone", mp.Phone ?? (object)DBNull.Value);
                        res = cmdAddUpdateProvider.ExecuteNonQuery();
                    }   

                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return res;
        }

        public static List<MachineProvider> GetAllProviders (string active)
        {
            List<MachineProvider> MachineProviderList = new List<MachineProvider>();
            string where = string.Empty;

            if (!active.Equals("All"))
            {
                where = "WHERE active=@Active ";
            }

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    SqlCommand cmdGetProviders = new SqlCommand("SELECT * FROM Provider " +
                                                                "" + where + " " + 
                                                                "ORDER BY provider_name ", conn);

                    conn.Open();
             

                    cmdGetProviders.Parameters.AddWithValue("@Active", active.ToLower().Equals("active") ? true : false);
                    using (SqlDataReader dr = cmdGetProviders.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                MachineProvider mp = new MachineProvider();
                                mp.ProviderID = Convert.ToInt16(dr["id"]);
                                mp.ProviderName = dr["provider_name"].ToString();
                                mp.Address = dr["provider_address"].ToString();
                                mp.Suburb = dr["provider_suburb"].ToString();
                                mp.PostCode = dr["provider_postcode"].ToString();
                                mp.State = dr["provider_state"].ToString();
                                mp.ContactName = dr["contact_name"].ToString();
                                mp.Active = Convert.ToBoolean(dr["active"]) == true ?"Active" : "Inactive";
                                mp.Email = dr["email"].ToString();
                                mp.Phone = dr["phone"].ToString();
                                MachineProviderList.Add(mp);
                            }
                        }
                    }                    

                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return MachineProviderList;
        }

        public static Int32 InsertToUploadFiles(string userName,int mid, Int64 wod, ObservableCollection<FileUpload> fileNames)
        {
            int res = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {                

                SqlCommand cmdUploadFile = new SqlCommand("INSERT INTO UploadedFiles (machine_id,work_order_id,description,file_path,file_name,uploaded_datetime,uploaded_by) " +
                                                          "VALUES (@MachineID,@WorkOrderID,@Description,@FilePath,@FileName,@UploadedDatetime,@UploadedBy)", conn);

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {
                    List<int> udRes = new List<int>();
                    foreach (var item in fileNames)
                    {
                        cmdUploadFile.Transaction = trans;
                        cmdUploadFile.Parameters.AddWithValue("@MachineID", mid);
                        cmdUploadFile.Parameters.AddWithValue("@WorkOrderID", wod);
                        cmdUploadFile.Parameters.AddWithValue("@Description", item.Description);
                        cmdUploadFile.Parameters.AddWithValue("@FilePath", item.FilePathTo);
                        cmdUploadFile.Parameters.AddWithValue("@FileName", item.FileName);
                        cmdUploadFile.Parameters.AddWithValue("@UploadedDatetime", DateTime.Now);
                        cmdUploadFile.Parameters.AddWithValue("@UploadedBy", userName);
                        udRes.Add(cmdUploadFile.ExecuteNonQuery());
                        cmdUploadFile.Parameters.Clear();
                    }

                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("Production SQL Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return res;
        }

        public static ObservableCollection<FileUpload> GetUploadedFilesByWorkOrderNo(Int64 workOrderNo)
        {
            ObservableCollection<FileUpload> fileUploadList = new ObservableCollection<FileUpload>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                conn.Open();
                try
                {
                    SqlCommand cmdGetData = new SqlCommand("SELECT * FROM UploadedFiles " +
                                                           "WHERE work_order_id=@WorkOrderNo", conn);

                    cmdGetData.Parameters.AddWithValue("@WorkOrderNo", workOrderNo);
                    using (SqlDataReader dr = cmdGetData.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                FileUpload fileUpload = new FileUpload();
                                fileUpload.Description = dr["description"].ToString();
                                fileUpload.FilePathTo = dr["file_path"].ToString();
                                fileUpload.FileName = dr["file_name"].ToString();
                                fileUpload.UploadedDateTime = Convert.ToDateTime(dr["uploaded_datetime"]);
                                fileUploadList.Add(fileUpload);
                                
                            }
                        }
                    }
                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return fileUploadList;
        }

        /******************UPDATE MIXING PRODUCTION FOR UNFINISHED ORDERS*************/

        public static int ClearMixingOrders(Int64 id, string uname)
        {
            int result = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdUpdateUnfinished = new SqlCommand("UPDATE MixingCompleted " +
                                                                "SET status = @Status, completed_by = @CompletedBy " +
                                                                "WHERE id = @ID", conn);

                conn.Open();
                try
                {
                    cmdUpdateUnfinished.Parameters.AddWithValue("@ID", id);
                    cmdUpdateUnfinished.Parameters.AddWithValue("@Status", "Cleared");
                    cmdUpdateUnfinished.Parameters.AddWithValue("@CompletedBy", uname);
                    result = cmdUpdateUnfinished.ExecuteNonQuery();
                    
                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL UPDATE COMMAND ERROR OCCURED :  Updating Orders table" + e);                    
                }
                finally
                {
                    conn.Close();
                }
            }
            return result;
        }

        public static DateTime GetProductionTimeTableMaxDate(DateTime date)
        {
            DateTime maxDate = date;
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT Max(date) as max_date FROM ProductionTimeTable", conn))
                    {                       

                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    maxDate = Convert.ToDateTime(dr["max_date"]);
                                      
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading Product Capacity: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return maxDate;
        }

        public static ObservableCollection<ProductionTimeTable> GetAllTimeTableDatesForObservableColl(int id, DateTime currentDate)
        {
            string neDate = currentDate.ToString("yyy-MM-dd");

            ObservableCollection<ProductionTimeTable> productionTimeTableList = new ObservableCollection<ProductionTimeTable>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT * FROM ProductionTimeTable " +
                                                                  "WHERE (machine_id=1 OR machine_id=7) AND date >= @currDate ORDER BY date ASC", conn))
                    {
                        cmdGetData.Parameters.AddWithValue("@id", id);
                        cmdGetData.Parameters.AddWithValue("@currDate", neDate);
                        cmdGetData.Parameters.AddWithValue("@machineActive", true);

                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    ProductionTimeTable pt = new ProductionTimeTable();
                                    pt.ID = Convert.ToInt32(dr["id"]);
                                    pt.MachineID = Convert.ToInt16(dr["machine_id"]);
                                    pt.ProductionDate = Convert.ToDateTime(dr["date"]);
                                    pt.IsMachineActive = Convert.ToBoolean(dr["machine_active"]);
                                    pt.IsDayShiftActive = Convert.ToBoolean(dr["day_shift"]);
                                    pt.IsEveningShiftActive = Convert.ToBoolean(dr["evening_shift"]);
                                    pt.IsNightShiftActive = Convert.ToBoolean(dr["night_shift"]);

                                    productionTimeTableList.Add(pt);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading Product Capacity: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return productionTimeTableList;
        }
        public static T CheckNull<T>(object obj)
        {
            return (obj == DBNull.Value ? default(T) : (T)obj);
        }
    }

        

    
        
}


